<?php


/**
 * Human name.
 */
define('MOHA_COMMERCE_ORDER', 'Moha Commerce Order');

/**
 * Machine name.
 */
define('__MOHA_COMMERCE_ORDER', 'moha_commerce_order');

/**
 * moha_commerce_order__variables.
 */
define('MOHA_COMMERCE_ORDER__VARIABLES', __MOHA_COMMERCE_ORDER . '__variables');

/**
 * /sites/all/modules/custom/moha/modules/moha_commerce_order.
 */
define('MOHA_COMMERCE_ORDER__PATH', base_path() . drupal_get_path('module', __MOHA_COMMERCE_ORDER));

/**
 * sites/all/modules/custom/moha/modules/moha_commerce_order.
 */
define('MOHA_COMMERCE_ORDER__RELATIVE_PATH', drupal_get_path('module', __MOHA_COMMERCE_ORDER));

/**
 * Permission: Administer Moha Commerce Orders.
 */
define('MOHA_COMMERCE_ORDER__PERMISSION__ADMIN_ORDERS', 'administer moha commerce orders');

/**
 * Implements hook_menu().
 *
 * Declares configuration page entry, etc.
 */
function moha_commerce_order_menu() {
  $item['admin/moha/commerce/order/config'] = array(
    'title' => 'Moha Commerce Order Configuration',
    'description' => 'Configure order properties and limitations.',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -1,
    'access arguments' => array('administer site configuration'),

    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_commerce_order_config_form'),
    'file' => 'includes/moha_commerce_order.admin.inc',
  );

  return $item;
}

/**
 * Implements hook_entity_info().
 */
function moha_commerce_order_entity_info() {
  $items = array();

  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_COMMERCE_ORDER] = array(
    'label' => t(MOHA_COMMERCE_ORDER),
    'plural label' => t(MOHA_COMMERCE_ORDER . 's'),
    'base table' => __MOHA_COMMERCE_ORDER,
    'revision table' => __MOHA_COMMERCE_ORDER . '_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    //
    'label callback' => 'entity_class_label',

    // @see entity_crud_hook_entity_info.
    "admin ui" => array(
      "path" => 'admin/moha/commerce/orders',
      "controller class" => "MohaCommerceOrderEntityAdminController",
      "file" => "includes/moha_commerce_order.admin.inc",
    ),
    // Declares which module contains related Class information, like Admin UI Class, etc.
    "module" => __MOHA_COMMERCE_ORDER,

    "access callback" => "_moha_commerce_order_entity_admin_access_callback",

    'entity class' => 'MohaCommerceOrderEntity',
    'controller class' => 'MohaCommerceOrderEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity fieldable; @see field_attach_form to attach added fields.
    'fieldable' => TRUE,
    'bundles' => array(
      __MOHA_COMMERCE_ORDER => array(
        'label' => t(MOHA_COMMERCE_ORDER),
        'plural label' => t(MOHA_COMMERCE_ORDER . 's'),
        'admin' => array(
          'path' => 'admin/moha/commerce/orders',
          'access arguments' => array(MOHA_COMMERCE_ORDER__PERMISSION__ADMIN_ORDERS),
        ),
      ),
    ),

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $items;
}

/**
 * Implements hook_entity_property_info().
 */
function moha_commerce_order_entity_property_info() {

  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('Order created date.'),
    'type' => 'date',
    'schema field' => 'created',
  );

  $properties['updated'] = array(
    'label' => t('Updated'),
    'description' => t('Order updated date.'),
    'type' => 'date',
    'schema field' => 'updated',
  );

  $properties['nid'] = array(
    'label' => t('Product'),
    'type' => 'node',
    'bundle' => __MOHA_COMMERCE_PRODUCT,
    'description' => t('Product node ID.'),
    'schema field' => 'nid',
  );

  $properties['status'] = array(
    'label' => t('Status'),
    'type' => 'text',
    'description' => t('Order status.'),
    'schema field' => 'status',
    'getter callback' => 'moha_commerce_order_status_get',
  );

  $properties['oid'] = array(
    'label' => t('Owner'),
    'type' => 'user',
    'description' => t('User ID who requested the order.'),
    'schema field' => 'oid',
  );

  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
    'description' => t('User ID who made the creation or update.'),
    'schema field' => 'uid',
  );

  $properties['comment'] = array(
    'label' => t('Comment'),
    'type' => 'text',
    'description' => t('Update reason.'),
    'schema field' => 'comment',
  );

  $items[__MOHA_COMMERCE_ORDER]['properties'] = $properties;
  return $items;
}

/**
 * Returns status value to label map.
 *
 * @return mixed
 */
function moha_commerce_order_status($status_value = "") {

  static $status_array = array(
    1 => 'Returned',
    2 => 'Transferred',
    3 => 'Dropped',
    100 => 'Ordered',
    101 => 'Delivered',
    102 => 'In-use',
  );

  if ($status_value == "") {
    return $status_array;
  }
  else {
    $key = array_search($status_value, $status_array);
    if ($key === false) {
      throw new InvalidArgumentException("Passed status doesn't exist.");
    }
    else {
      return $key;
    }
  }
}

/**
 * Gets the status property of moha_commerce_order.
 */
function moha_commerce_order_status_get($data, array $options, $name, $type, $info) {
  $name = isset($info['schema field']) ? $info['schema field'] : $name;

  if (isset($data[$name])) {
    return moha_commerce_order_status()[$data[$name]];
  }

  return 'No Status';
}

/**
 * Implements hook_views_pre_render().
 *
 * Convert numeric status value to status label for moha_commerce_order exporting.
 */
function moha_commerce_order_views_pre_render(&$view) {
  if ($view->name == 'moha_commerce_order_export') {
    $status_array = moha_commerce_order_status();

    foreach ($view->result as $item) {
      $status_key = $item->moha_commerce_order_status;
      $item->moha_commerce_order_status = ($status_array[$status_key]);
    }
  }
}

/**
 * Implements hook_views_post_execute().
 */
function moha_commerce_order_views_post_execute(&$view) {

}

/**
 * Implements hook_views_post_render().
 */
function moha_commerce_order_views_post_render(&$view, &$output, &$cache) {

}

/**
 * Implements hook_entity_view().
 */
function moha_commerce_order_entity_view($entity, $type, $view_mode, $langcode) {

}

/**
 * Implements hook_entity_views_field_handlers_alter().
 */
function moha_commerce_order_entity_views_field_handlers_alter(array &$field_handlers) {

}

/**
 * @param $op
 * @param $entity object
 * @param $account object
 *
 * @return bool
 */
function _moha_commerce_order_entity_admin_access_callback($op, $entity = NULL, $account = NULL) {
  if (user_access(MOHA_COMMERCE_ORDER__PERMISSION__ADMIN_ORDERS, $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function moha_commerce_order_permission() {
  return array(
    MOHA_COMMERCE_ORDER__PERMISSION__ADMIN_ORDERS => array(
      'title' => 'Administer Moha Commerce Orders',
    ),
    'create own moha commerce order' => array(
      'title' => 'Create Own Moha Commerce Order',
    ),
  );
}

function moha_commerce_order_entity_info_label($entity, $entity_type) {
  return $entity->id;
}
