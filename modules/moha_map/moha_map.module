<?php
/**
 * @file
 */

/**
 * Human name.
 */
define('MOHA_MAP', 'Moha Map');

/**
 * Machine name.
 */
define('__MOHA_MAP', 'moha_map');

/**
 * Node Human name: Moha Map Marker.
 */
define('MOHA_MAP_MARKER', MOHA_MAP . ' Marker');

/**
 * Node machine name: moha_map_marker.
 */
define('__MOHA_MAP_MARKER', __MOHA_MAP . '_marker');

/**
 * moha_map__variables.
 */
define('MOAH_MAP__VARIABLES', __MOHA_MAP . '__variables');

/**
 * Module install path.
 */
define('MOAH_MAP__PATH', drupal_get_path('module', __MOHA_MAP));

/**
 * Implements hook_menu().
 *
 * Declares service URLs.
 */
function moha_map_menu() {

  $items = array();

  $items['moha/moha-map/demo'] = array(
    'title' => t('Moha Map Front Page'),
    'page callback' => '_moha_map_front',
    'access callback' => TRUE,
    'file' => 'includes/moha_map.front.inc',
    'type' => MENU_CALLBACK,
  );

  $items['moha/moha-map/view/%node'] = array(
    'page callback' => '_moha_map_view',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'includes/moha_map.front.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/moha_map'] = array(
    'title' => t('Moha Map Manager'),
    'description' => t('Manage Moha Map configurations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_map_manager_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/moha_map.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 *
 * Declares content types: moha_map_marker.
 */
function moha_map_node_info() {
  $items = array(
    __MOHA_MAP_MARKER => array(
      'name' => t(MOHA_MAP_MARKER),
      'base' => __MOHA_MAP, /* Set to node_content, otherwise need implement hook_form to let title could be specified. */
      'description' => t('Use <i>Moha Map Marker</i> to demonstrate location marker on map service.'),
      'title_label' => t('Location Name'),
      'has_title' => TRUE,
      'locked' => FALSE,
    ),
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function moha_map_form($node, &$form_state) {
  global $theme_key;

  if ($theme_key == 'seven') {
    // Fix admin style issue when admin theme is seven.
    drupal_add_css(MOHA__RELATIVE_PATH . '/css/moha.admin.css');
  }

  // Add configurations per content type.
  switch ($node->type) {
    case __MOHA_MAP_MARKER:

      break;
    default:
      break;
  }

  return node_content_form($node, $form_state);
}

/**
 * Moha Map Fields.
 *
 * @return array fields & instance parameter array.
 */
function _moha_map_fields_and_instances() {
  $fields_and_instances = array();

  $fields_and_instances['moha_coordinator'] = array(
    'label'       => t('Coordinator'),
    'field_name'  => 'moha_coordinator',
    'type'        => 'geofield',
    'cardinality' => 1, // set to FIELD_CARDINALITY_UNLIMITED when no limited.
    'description' => t('Stores coordinators for map rendering. Coordinators from different map services may not be interchangeable.'),
    'entity_type' => 'node',
    'bundle'      => __MOHA_MAP_MARKER,
    'settings'    => array(
    ),
    'widget' => array(
      'module' => 'geofield',
      'settings' => array(),
      'type' => 'geofield_latlon',
    ),
    'display' => array(
      'default' => array(
        'label'  => 'hidden',
        'module' => 'geofield',
        'settings' => array(
        ),
        'type' => 'geofield_latlon',
      ),
    ),
  );

  $fields_and_instances['moha_map_type'] = array(
    'label'       => t('Map Type'),
    'field_name'  => 'moha_map_type',
    'description' => t('Selects map type, like: Google, Baidu, etc. Use Baidu map service by default.'),
    'type'        => 'taxonomy_term_reference',
    'cardinality' => 1,
    'entity_type' => 'node',
    'bundle'      => __MOHA_MAP_MARKER,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'moha_map_types',
          'parent' => '0',
        ),
      ),
    ),
    'widget' => array(
      'module'  => 'options',
      'type'    => 'options_select',
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type'  => 'taxonomy_term_reference_plain',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type'  => 'taxonomy_term_reference_plain',
      ),
    ),
  );

  return $fields_and_instances;
}

/**
 * Implements hook_node_type_insert().
 *
 * Bind moha_map fields.
 *
 * @throws \FieldException
 *   When fields binging error.
 */
function moha_map_node_type_insert($info) {
  if ($info->type == __MOHA_MAP_MARKER) {

    $body_instance = node_add_body_field($info, t('Information Window'));
    // Save our changes to the body field instance.
    field_update_instance($body_instance);

    /** @see _moha_map_fields_and_instances() */
    moha_create_fields_and_instances('_moha_map_fields_and_instances');

    // Hide comment for Moha Map by default.
    variable_set('comment_' . __MOHA_MAP_MARKER, COMMENT_NODE_HIDDEN);
    variable_set('node_options_' . __MOHA_MAP_MARKER, array('status'));
  }
}

/**
 * Implements hook_node_view().
 */
function moha_map_node_view($node, $view_mode, $langcode) {

  return;
}

/**
 * Implements hook_node_view_alter().
 */
function moha_map_node_view_alter(&$build) {
  /*
  $baidu_access_key = moha_array_variable_get(MOAH_MAP__VARIABLES, 'baidu_access_key', '');
  $build['baidu_access_key'] = $baidu_access_key;
  */

  return;
}

/**
 * Implements hook_theme().
 */
function moha_map_theme($existing, $type, $theme, $path) {
  return array(
    // moha_demo_baidu_marker
    __MOHA_MAP . '_baidu_marker' => array(
      'render element' => 'page',
      'template' => 'templates/moha_map_baidu_marker',
    ),
    // Register node__<Node Machine Name> for node template.
    // node__moha_map_marker.
    'node__' . __MOHA_MAP_MARKER => array(
      'render element' => 'elements',
      'template' => 'templates/node__' . __MOHA_MAP_MARKER,
    ),
  );
}
