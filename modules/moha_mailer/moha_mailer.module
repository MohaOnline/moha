<?php
/**
 * @file
 * Hooks entry file of the module.
 */

/**
 * Human name.
 */
define('MOHA_MAILER', 'Moha Mailer');

/**
 * Machine name.
 */
define('__MOHA_MAILER', 'moha_mailer');

/**
 * Entity Machine name.
 */
define('__MOHA_MAILER_MAIL', 'moha_mailer_mail');

/**
 * Entity Human name.
 */
define('MOHA_MAILER_MAIL', 'Moha Mailer Mail');

/**
 * Entity Admin UI Filter.
 */
define('MOHA_MAILER_MAIL__ADMIN_UI_FILTER__TO', __MOHA_MAILER_MAIL . '__admin_ui_filter__to');

/**
 * sites/all/modules/custom/moha/modules/moha_mailer.
 */
define('MOHA_MAILER__PATH', drupal_get_path('module', __MOHA_MAILER));

/**
 * /sites/all/modules/custom/moha/modules/moha_mailer.
 */
define('__MOHA_MAILER__PATH', base_path() . MOHA_MAILER__PATH);

/**
 * Module variables name: moha_mailer__var__manual_to.
 *
 * Reuse mail to data collected from manual sending to.
 */
define('MOHA_MAILER__VARIABLE__MANUAL_TO', __MOHA_MAILER. '__var__manual_to');

/**
 * Module variables name: moha_mailer__var__manual_cc.
 *
 * Reuse mail cc data collected from manual sending form.
 */
define('MOHA_MAILER__VARIABLE__MANUAL_CC', __MOHA_MAILER. '__var__manual_cc');

/**
 * Module variables name: moha_mailer__var__manual_bcc.
 *
 * Reuse mail bcc data collected from manual sending form.
 */
define('MOHA_MAILER__VARIABLE__MANUAL_BCC', __MOHA_MAILER. '__var__manual_bcc');

/**
 * Module variables name: moha_mailer__var__manual_from.
 *
 * Reuse mail from data collected from manual sending form.
 */
define('MOHA_MAILER__VARIABLE__MANUAL_FROM', __MOHA_MAILER. '__var__manual_from');

/**
 * Module variables name: moha_mailer__var__threshold.
 *
 * How many mail
 */
define('MOHA_MAILER__VARIABLE__THRESHOLD', __MOHA_MAILER. '__var__threshold');

/**
 * Module variables name: moha_mailer__var__suspend.
 *
 * TRUE to suspend mail sending.
 */
define('MOHA_MAILER__VARIABLE__SUSPEND', __MOHA_MAILER. '__var__suspend');

/**
 * Module variables name: moha_mailer__var__ignore_cc.
 *
 * TRUE to ignore Cc recipients.
 */
define('MOHA_MAILER__VARIABLE__IGNORE_CC', __MOHA_MAILER. '__var__ignore_cc');

/**
 * Moha Mailer URL: Moha Mailer mail management page.
 */
define('MOHA_MAILER__URL__MAIL_ADMIN_UI', MOHA__URL__ENTITIES . '/mailer-mail');

/**
 * Permission: Administer Moha Mailer.
 */
define('MOHA_MAILER__PERMISSION__ADMIN', 'administer moha mailer');

/**
 * Implements hook_entity_info().
 */
function moha_mailer_entity_info() {
  $items[__MOHA_MAILER_MAIL] = moha_entity_define(
    __MOHA_MAILER,
    __MOHA_MAILER_MAIL,
    MOHA_MAILER_MAIL,
    'MohaMailerMail',
    MOHA_MAILER__URL__MAIL_ADMIN_UI
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function moha_mailer_permission() {
  // Declare entity permissions.
  $permissions = moha_entity_permissions_generator(__MOHA_MAILER_MAIL);

  // Add permission for restrict privilege of admin configuration.
  $permissions[MOHA_MAILER__PERMISSION__ADMIN] = array(
    'title' => t(moha_ucwords(MOHA_MAILER__PERMISSION__ADMIN)),
    'description' => t("Allows the user to configure Moha Mailer."),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function moha_mailer_menu() {
  $items['admin/moha/dashboard/mailer'] = array(
    'title' => 'Dashboard',
    'description' => 'Moha mail statistics / dashboard.',
    'page callback' => 'drupal_get_form',
    /* @see moha_mailer_dashboard_form() */
    'page arguments' => array('moha_mailer_dashboard_form'),
    'file' => 'moha_mailer.admin.inc',
    'access arguments' => array(MOHA_MAILER__PERMISSION__ADMIN),
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/mailer'] = array(
    'title' => 'Moha Mailer',
    'description' => t('Moha Mail enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => 10,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array(MOHA_MAILER__PERMISSION__ADMIN),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/moha/mailer/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'Moha mail statistics / dashboard.',
    'weight' => -99,
    /* @see moha_mailer_dashboard_jump() */
    'page callback' => 'moha_mailer_dashboard_jump',
    'file' => 'moha_mailer.admin.inc',
    'access arguments' => array(MOHA_MAILER__PERMISSION__ADMIN),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/moha/mailer/config'] = array(
    'title' => 'Configuration',
    'description' => t('Moha mailer configuration.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_mailer_config_form() */
    'page arguments' => array('moha_mailer_config_form'),
    'file' => 'moha_mailer.admin.inc',
    'access arguments' => array(MOHA_MAILER__PERMISSION__ADMIN),
  );

  $items['admin/moha/mailer/manual'] = array(
    'title' => 'Send mail',
    'description' => t('Manual mail sending function.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_mailer_manual_form() */
    'page arguments' => array('moha_mailer_manual_form'),
    'file' => 'moha_mailer.admin.inc',
    'access arguments' => array(MOHA_MAILER__PERMISSION__ADMIN),
  );

  return $items;
}

/**
 * Implements hook_mail().
 *
 * @inheritdoc
 */
function moha_mailer_mail($key, &$message, $params) {
  if (substr($key, 0, 18) === 'moha_mailer_manual') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
  else {
    mimemail_mail($key, $message, $params);
  }
}

/**
 * Implements hook_libraries_info_alter().
 *
 * @inheritdoc
 */
function moha_mailer_libraries_info_alter(&$libraries) {
  // Guide Just SMTP to use shipped PHPMailer libraries.
  if (isset($libraries['PHPMailer'])) {
    $libraries['PHPMailer']['library path'] = MOHA_COMPOSER__PATH . '/vendor';
    $libraries['PHPMailer']['version arguments']['file'] = '/phpmailer/phpmailer/VERSION';
    $libraries['PHPMailer']['version arguments']['lines'] = 1;
    $libraries['PHPMailer']['version arguments']['pattern'] = '/(\d\.\d\.\d)/';

    $libraries['PHPMailer']['files']['php'] = array(
      'autoload.php',
      'helper.php',
    );
  }
}

/**
 * Push mail to mail queue, if same $mail_to and $nid pair exists,
 * mail will be ignored by default; set $force to TRUE, could skip this logic.
 *
 * @param $subject string
 *   Mail subject
 *
 * @param $mail_from
 *   Mail sender information, format: SENDER_NAME <SENDER_MAIL_ADDRESS>
 *
 * @param $mail_to
 *   Mail address of receipt.
 *
 * @param $nid
 *   Node ID which contains mail content.
 *
 * @param $eid
 *   Mail related entity ID.
 *
 * @param $eid_type
 *   Mail related entity Type.
 *
 * @param $cc
 *   Mail addresses will be cc-ed when mail sending, multiple address should be separated by comma.
 *
 * @param $bcc
 *   Mail addresses will be bcc-ed when mail sending, multiple address should be separated by comma.
 *
 * @param $weight
 *   Priority of the mail, less value should be sent earlier.
 *
 * @param $force
 *   If force to push this mail.
 *
 * @return boolean
 */
function moha_mailer_push_mail($subject, $mail_from, $mail_to, $nid, $eid, $eid_type = 'user', $cc = '', $bcc = '', $weight = 500, $force = FALSE) {

  try {
    if (!$force) {
      // Get queued mails, then send.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', __MOHA_MAILER_MAIL);
      $query->propertyCondition('$mail_to', $mail_to);
      $query->propertyCondition('$nid', $nid);
      $results = $query->execute();

      $ids = isset($results[__MOHA_MAILER_MAIL]) ? array_keys($results[__MOHA_MAILER_MAIL]) : array();

      if (empty($ids)) {
        $force = TRUE;
      }
      else {
        watchdog(__FUNCTION__, t('Mail exists: @nid to @mail_to', array(
          '@nid' => $nid,
          '@mail_to' => $mail_to,
        )));
      }
    }

    if ($force){
      $mail = entity_create(__MOHA_MAILER_MAIL, array(
        'subject' => $subject,
        'mail_from' => $mail_from,
        'mail_to' => $mail_to,
        'nid' => $nid,
        'eid' => $eid,
        'eid_type' => $eid_type,
        'mail_cc' => $cc,
        'mail_bcc' => $bcc,
        'weight' => $weight,
        'status' => moha_array_key_by_value(MOHA__TERM__QUEUED, MOHA__STATUS__ENTITY),
      ));

      /** @var MohaMailerMailEntity $mail */
      /** @see MohaCommonEntityController::save() */
      $mail->save();

      watchdog(__FUNCTION__, t('Mail @id is queued: @nid to @mail_to', array(
        '@id' => $mail->identifier(),
        '@nid' => $nid,
        '@mail_to' => $mail_to,
      )));
    }
  }
  catch (Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
    return FALSE;
  }

  return TRUE;
}

/**
 * Sends queued mails through cron per entity moha_mailer_mail.
 *
 * Implements hook_cron().
 */
function moha_mailer_cron() {

  try {
    moha_throw_exception_per_variable(MOHA_MAILER__VARIABLE__SUSPEND);

    // Get queued mails, then send.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', __MOHA_MAILER_MAIL);
    $query->propertyCondition('status', moha_array_key_by_value(MOHA__TERM__QUEUED, MOHA__STATUS__ENTITY));
    $query->propertyOrderBy('weight');
    $query->range(0, moha_variable_get(MOHA_MAILER__VARIABLE__THRESHOLD, 20));
    $results = $query->execute();

    $ids = isset($results[__MOHA_MAILER_MAIL]) ? array_keys($results[__MOHA_MAILER_MAIL]) : array();
    $entities = $ids ? entity_load(__MOHA_MAILER_MAIL, $ids) : array();

    global $language;

    foreach ($entities as $entity) {
      /** @var MohaMailerMailEntity $entity */
      moha_throw_exception_per_variable(MOHA_MAILER__VARIABLE__SUSPEND);

      $mail_to = $entity->mail_to;
      $mail_from = $entity->mail_from;

      $params = array();

      if ($entity->eid_type == 'user') {
        $mail_context = user_load($entity->eid);
        $params['context']['user'] = $mail_context;
      }

      $node = node_load($entity->nid);
      $params['subject'] = $entity->subject;
      $params['context']['subject'] = $entity->subject;

      $content = node_view($node);
      $mail_body = drupal_render($content['body']);
      $params['body'][] = $mail_body;
      $params['context']['body'] = $mail_body;
      $params['plaintext'] = drupal_html_to_text($mail_body);

      if (!moha_cache_get(MOHA_MAILER__VARIABLE__IGNORE_CC, FALSE, FALSE)) {
        if (!empty($entity->mail_cc)) {
          $params['headers']['Cc'] = $entity->mail_cc;
        }

        if (!empty($entity->mail_bcc)) {
          $params['headers']['Bcc'] = $entity->mail_bcc;
        }
      }

      $params['attachments'] = '';

      $message = drupal_mail(__MOHA_MAILER, __FUNCTION__, $mail_to, $language, $params, $mail_from);

      if ($message['send'] === TRUE && $message['result'] === TRUE) {
        $entity->status = moha_array_key_by_value(MOHA__TERM__SUCCESS, MOHA__STATUS__ENTITY);
      }
      else {
        $entity->status = moha_array_key_by_value(MOHA__TERM__PROCESSED, MOHA__STATUS__ENTITY);
      }

      $entity->result = serialize($message);
      $entity->save();

      sleep(6);
    } // Foreach.
  }
  catch (Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
  }
}

/**
 * Implements hook_moha_ui_dashboard_sidebar().
 */
function moha_mailer_moha_ui_dashboard_sidebar() {
  $items['features']['admin/moha/dashboard/mailer'] = array(
    '#markup' => l('<i class="fa fa-envelope"></i> <span>' . t('Mailer') . '</span>', 'admin/moha/dashboard/mailer', array('html'=>true)),
  );

  return $items;
}
