<?php
/**
 * @file
 */

/**
 * Human name.
 */
define('MOHA_SURVEY', 'Moha Survey');

/**
 * Machine name.
 */
define('__MOHA_SURVEY', 'moha_survey');

/**
 * moha_survey__variables.
 */
define('MOHA_SURVEY__VARIABLES', __MOHA_SURVEY . '__variables');

/**
 * sites/all/modules/custom/moha/modules/moha_survey.
 */
define('MOHA_SURVEY__PATH', drupal_get_path('module', __MOHA_SURVEY));

/**
 * /sites/all/modules/custom/moha/modules/moha_survey.
 */
define('__MOHA_SURVEY__PATH', base_path() . MOHA_SURVEY__PATH);

/**
 * Entity machine name.
 */
define('__MOHA_SURVEY__ENTITY__TEMPLATE', 'moha_survey_template');

/**
 * Moha URL: Moha Survey template management page.
 * @example admin/moha/entities/survey_template
 */
define('MOHA_SURVEY__URL__TEMPLATE_ADMIN_UI', MOHA__URL__ENTITIES . '/survey_template');

/**
 * Implements hook_permission().
 */
function moha_survey_permission() {
  $permissions = array(
    'administer any survey' =>  array(
      'title' => t('Administer any survey'),
      'description' => t('Perform administration tasks for any survey.'),
    ),
    'administer own survey' =>  array(
      'title' => t('Administer own survey'),
      'description' => t('Perform administration tasks for own survey.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function moha_survey_theme($existing, $type, $theme, $path) {
  $templates = array(
    'moha_survey_dashboard' => array(
      'template' => 'templates/moha_survey_dashboard',
      'render element' => 'content',
    ),
    'moha_survey_lists' => array(
      'template' => 'templates/moha_survey_lists',
      'render element' => 'content',
    ),
    'moha_survey_weui_webform_element_radios' => array(
      'template' => 'templates/moha_survey_weui_webform_element_radios',
      'render element' => 'element',
    ),
    'moha_survey_weui_webform_element_checkboxes' => array(
      'template' => 'templates/moha_survey_weui_webform_element_checkboxes',
      'render element' => 'element',
    ),
    'moha_survey_weui_webform_element_textfield' => array(
      'template' => 'templates/moha_survey_weui_webform_element_textfield',
      'render element' => 'element',
    ),
  );

  return $templates;
}

/**
 * Implements hook_entity_info().
 *
 *
 */
function moha_survey_entity_info() {

  $items = array();

  // Stores basic information of an Moha Survey Template.
  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_SURVEY__ENTITY__TEMPLATE] = array(
    'label' => t('Moha Survey Template'),
    'plural label' => t('Moha Survey Templates'),
    'base table' => __MOHA_SURVEY__ENTITY__TEMPLATE,
    'revision table' => 'moha_survey_template_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    //
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* moha_survey_template management page URL & Class. */
      'path' => MOHA_SURVEY__URL__TEMPLATE_ADMIN_UI,
      'controller class' => 'MohaSurveyTemplateEntityAdminController',

      /** @see entity_ui_get_form() */
      /* moha_survey_template add / edit forms containing file. */
      'file' => 'includes/MohaSurveyTemplateEntity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => __MOHA_SURVEY,

    /** @see entity_access() */
    'access callback' => 'moha_entity_access',

    'entity class' => 'MohaSurveyTemplateEntity',
    'controller class' => 'MohaSurveyTemplateEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity fieldable; @see field_attach_form to attach added fields.
    'fieldable' => FALSE,

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $items;
}

/**
 * Implements hook_entity_property_info().
 */
function moha_survey_entity_property_info() {

  $properties['id'] = array(
    'label' => t('ID'),
    'type' => 'integer',
    'description' => t('Template ID.'),
    'schema field' => 'id',
  );

  $properties['name'] = array(
    'label' => t('Name'),
    'type' => 'text',
    'description' => t('Template name.'),
    'schema field' => 'name',
  );

  $properties['nid'] = array(
    'label' => t('Node ID'),
    'type' => 'node',
    'bundle' => 'webform',
    'description' => t('Node ID of related Webform.'),
    'schema field' => 'nid',
  );

  $properties['referred'] = array(
    'label' => t('Referred'),
    'type' => 'integer',
    'description' => t('Referred times as template.'),
    'schema field' => 'referred',
  );

  /** @see entity_property_verbatim_get */
  $properties['status'] = array(
    'label' => t('Status'),
    'type' => 'text',
    'description' => t('Template Status.'),
    'schema field' => 'status',
    /** @see moha_entity_status_get */
    'getter callback' => 'moha_entity_status_get',
  );

  $properties['oid'] = array(
    'label' => t('Owner'),
    'type' => 'user',
    'description' => t('User ID who pinned this template.'),
    'schema field' => 'oid',
  );

  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
    'description' => t('User ID who updated this template.'),
    'schema field' => 'uid',
  );

  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('Template created date.'),
    'type' => 'date',
    'schema field' => 'created',
  );

  $properties['updated'] = array(
    'label' => t('Updated'),
    'description' => t('Template updated date.'),
    'type' => 'date',
    'schema field' => 'updated',
  );

  $properties['comment'] = array(
    'label' => t('Comment'),
    'type' => 'text',
    'description' => t('Update reason.'),
    'schema field' => 'comment',
  );

  $items[__MOHA_SURVEY__ENTITY__TEMPLATE]['properties'] = $properties;
  return $items;
}

/**
 * Implements hook_menu().
 */
function moha_survey_menu() {

  $items['moha/survey/thanks'] = array(
    'title' => 'Survey management',
    'description' => 'Manage surveys, survey templates, survey questions and statistics.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  $items['moha/survey/taken'] = array(
    'title' => 'Survey management',
    'description' => 'Manage surveys, survey templates, survey questions and statistics.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  $items['moha/survey/closed'] = array(
    'title' => 'Survey Closed',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey management entry.
  $items['admin/moha/survey'] = array(
    'title' => 'Survey management',
    'description' => 'Manage surveys, survey templates, survey questions and statistics.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Dashboard, alias to parent path.
  $items['admin/moha/survey/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'Survey Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey edit form.
  $items['admin/moha/survey/edit/%node'] = array(
    'title' => 'Survey update',
    'description' => 'Update title and components of a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_edit_form */
    'page arguments' => array('moha_survey_edit_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_LOCAL_TASK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Clone.
  $items['admin/moha/survey/clone'] = array(
    'title' => 'Survey Clone',
    'description' => 'Forward user to Survey creation page without a template selected.',
    /** @see moha_survey_clone_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_clone_form'),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Clone.
  $items['admin/moha/survey/clone/%node'] = array(
    'title' => 'Survey Clone',
    'description' => 'Forward user to Survey creation page with a template selected.',
    /** @see moha_survey_clone_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_clone_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Template Delete.
  $items['admin/moha/survey/template-delete/%'] = array(
    'title' => 'Survey Template Remove',
    'description' => 'Remove survey template.',
    /** @see moha_survey_template_delete_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_template_delete_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  $items['admin/moha/survey/edit/%node/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'moha_survey_results_submissions',
    'page arguments' => array(4, '50'),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file' => 'moha_survey.admin.inc',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/moha/survey/edit/%node/download'] = array(
    'title' => 'Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_results_download_form', 4),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file' => 'moha_survey.admin.inc',
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );

  // Moha Survey delete
  $items['admin/moha/survey/delete/%node'] = array(
    'title' => 'Survey delete',
    'description' => 'Delete a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_delete_form */
    'page arguments' => array('moha_survey_delete_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey component edit form.
  $items['admin/moha/survey/component/%node/%'] = array(
    'title' => 'Survey question edit',
    'description' => 'Add a component or update component details of a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_component_edit_form */
    'page arguments' => array('moha_survey_component_edit_form', 4, 5),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey component delete form.
  $items['admin/moha/survey/component-delete/%node/%'] = array(
    'title' => 'Survey question delete',
    'description' => 'Delete a component from a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_component_edit_form */
    'page arguments' => array('moha_survey_component_delete_form', 4, 5),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  $items['admin/moha/survey/add'] = array(
    'title' => 'Create a survey',
    'page callback' => 'moha_survey_create',
    // TODO set proper permissions.
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Declares location of codes for views.
 */
function moha_survey_views_api() {
  return array(
    'api' => 3,
    'path' => MOHA_SURVEY__PATH . '/views',
    'template path' => MOHA_SURVEY__PATH . '/templates',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * Operations control per permission.
 */
function moha_survey_views_pre_render(&$view) {
  if ($view->name == 'moha_survey_template') {
    $rows = $view->result;

    foreach ($rows as $row) {

    }
  }
}

/**
 * Webform type to survey type.
 *
 * @param $component
 *   Component detail array.
 *
 * @param $literal
 *   False to return internal type directly.
 *
 * @throws Exception
 */
function moha_survey_question_type($component, $literal = TRUE) {

  static $type_literals = array(
    'textfield' => 'Text Field',
    'rating' => 'Rating',
    'radio' => 'Radio Box',
    'check' => 'Check Box',
  );

  if (empty($component)) {
    throw new Exception('Empty component.');
  }

  if ($component['type'] == 'textfield') {
    $type = 'textfield';
  }
  elseif ($component['type'] == 'moha_ui_rating') {
    $type = 'rating';
  }
  elseif ($component['type'] == 'select' && isset($component['extra']['multiple']) && $component['extra']['multiple'] == FALSE) {
    $type = 'radio';
  }
  elseif ($component['type'] == 'select' && isset($component['extra']['multiple']) && $component['extra']['multiple'] == TRUE) {
    $type = 'check';
  }
  else {
    throw new Exception('Unknown type.');
  }

  if ($literal) {
    $type = $type_literals[$type];
  }

  return $type;
}

function moha_survey_create(){
  return drupal_get_form('moha_survey_add_form');
}

function moha_survey_add_form($form, &$form_state) {

  $form['survey_name'] = array(
    '#type' => 'textfield',
    '#title' => 'survey name',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add',
  );

  if (defined('__MOHA_UI')) {
    $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);
    $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI_ADMIN);
  }

  return $form;
}


function moha_survey_add_form_submit($form, &$form_state) {

  global $user;
  //https://www.drupal.org/node/2030697  Programmatically creating a webform
  $node = new stdClass();
  $node->type = 'webform';
  node_object_prepare($node);
  $node->title = $form_state['values']['survey_name'];
  $node->language = 'en';
  $node->body[LANGUAGE_NONE][0]['value']   = '';
  $node->body[LANGUAGE_NONE][0]['format']  = 'full_html';
  $node->uid = $user->uid;
  $node->promote = 0;
  $node->comment = 0;

  $weight = 0;
  // Create the webform components.
  $components = array(
    array(
      'name' => 'Gender',
      'form_key' => str_replace('-', '_', ctools_uuid_generate()),
      'type' => 'select',
      'mandatory' => 1,
      'weight' => ++$weight,
      'pid' => 0, // no field set.
      'required' => 1,
      'extra' => array(
        'title_display' => 'before',
        'description_above' => 1,
        'private' => 0,
        'items' => "0|Mrs\n1|Miss\n2|Mr",
        'aslist' => 0,
        'multiple' => 0,
      ),
    ),
    array(
      'name' => 'Where did you visit?',
      'form_key' => str_replace('-', '_', ctools_uuid_generate()),
      'type' => 'select',
      'mandatory' => 1,
      'weight' => ++$weight,
      'pid' => 0,
      'required' => 1,
      'extra' => array(
        'title_display' => 'before',
        'description_above' => 1,
        'private' => 0,
        'items' => "0|Paris\n1|Tokyo\n2|Shanghai\n3|New York",
        'aslist' => 0,
        'multiple' => 1,
      ),
    ),
    array(
      'name' => 'Name',
      'form_key' => str_replace('-', '_', ctools_uuid_generate()),
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => ++$weight,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'before',
        'private' => 0,
      ),
    ),
    array(
      'name' => 'question1',
      'form_key' => str_replace('-', '_', ctools_uuid_generate()),
      'type' => 'moha_ui_rating',
      'mandatory' => 1,
      'weight' => ++$weight,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'before',
        'private' => 0,
        'max_score' => 5,
        'threshold_score' => 3,
      ),
    ),
    array(
      'name' => 'question2',
      'form_key' => str_replace('-', '_', ctools_uuid_generate()),
      'type' => 'moha_ui_rating',
      'mandatory' => 1,
      'weight' => ++$weight,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'before',
        'private' => 0,
        'max_score' => 5,
        'threshold_score' => 3,
      ),
    ),
  );

  // Attach the webform to the node.
  $node->webform = array(
    'confirmation' => '',
    'confirmation_format' => NULL,
    'redirect_url' => 'moha/survey/submitted',
    'status' => '1',
    'block' => '0',
    'teaser' => '0',
    'allow_draft' => '0',
    'auto_save' => '0',
    'submit_notice' => '1',
    'submit_text' => '',
    'submit_limit' => '1', // User can submit only once.
    'submit_interval' => '-1',
    'total_submit_limit' => '-1',
    'total_submit_interval' => '-1',
    'record_exists' => TRUE,
    'roles' => array(
      0 => '2', // Only allow login user take survey.
    ),
    'progressbar_bar' => FALSE,
    'components' => $components,
  );

  // todo associated moha_ui_rating component with summit survey question

  // Save the node.
  node_save($node);

  $form_state['redirect'] = 'admin/moha/survey/edit/'. $node->nid;

}

function moha_survey_get_owns(){
  global $user;
  $query = db_select('node', 'n');
  $query->join('webform', 'w', 'n.nid=w.nid');
  $query->fields('w')
    ->addField('n', 'title', 'survey_name');
  $query->addField('n', 'created');
  $query->condition('n.uid', $user->uid, '=')
    ->condition('n.type', 'webform', '=');
  $result = $query->execute()->fetchAll();

  return $result;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function moha_survey_webform_component_render_alter(array &$element, array &$component) {
  // import weui.css
  $element['#attached']['css'][] = MOHA_UI__PATH . '/libs/weui/dist/style/weui.css';

  if ($element['#type'] == 'radios') {
    $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_radios';
  } elseif ($element['#type'] == 'checkboxes') {
    $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_checkboxes';
  } elseif ($element['#type'] == 'textfield') {
    $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_textfield';
  }
}
