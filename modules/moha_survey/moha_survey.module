<?php
/**
 * @file
 */

/**
 * Human name.
 */
define('MOHA_SURVEY', 'Moha Survey');

/**
 * Machine name.
 */
define('__MOHA_SURVEY', 'moha_survey');

/**
 * moha_survey__variables.
 */
define('MOHA_SURVEY__VARIABLES', __MOHA_SURVEY . '__variables');

/**
 * sites/all/modules/custom/moha/modules/moha_survey.
 */
define('MOHA_SURVEY__PATH', drupal_get_path('module', __MOHA_SURVEY));

/**
 * /sites/all/modules/custom/moha/modules/moha_survey.
 */
define('__MOHA_SURVEY__PATH', base_path() . MOHA_SURVEY__PATH);

/**
 * Implements hook_permission().
 */
function moha_survey_permission() {
  $permissions = array(
    'administer any survey' =>  array(
      'title' => t('Administer any survey'),
      'description' => t('Perform administration tasks for any survey.'),
    ),
    'administer own survey' =>  array(
      'title' => t('Administer own survey'),
      'description' => t('Perform administration tasks for own survey.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function moha_survey_theme($existing, $type, $theme, $path) {
  $templates = array(
    'moha_survey_dashboard' => array(
      'template' => 'templates/moha_survey_dashboard',
      'render element' => 'content',
    ),
  );

  return $templates;
}

/**
 * Implements hook_menu().
 */
function moha_survey_menu() {

  $items['admin/moha/survey'] = array(
    'title' => 'Survey management',
    'description' => 'Manage surveys, survey templates, survey questions and statistics.',
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  $items['admin/moha/survey/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'Survey Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'moha_survey.admin.inc',
  );

  $items['admin/moha/survey/add'] = array(
    'title' => 'Create a survey',
    'page callback' => 'moha_survey_create',
    // TODO set proper permissions.
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function moha_survey_create(){
  return drupal_get_form('moha_survey_add_form');
}

function moha_survey_add_form($form, &$form_state) {

  // TODO spell error
  $form['survery_name'] = array(
    '#type' => 'textfield',
    '#title' => 'survey name',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add',
  );

  if (defined('__MOHA_UI')) {
    $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);
    $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI_ADMIN);
  }

  return $form;
}


function moha_survey_add_form_submit($form, &$form_state) {

  global $user;
  //https://www.drupal.org/node/2030697  Programmatically creating a webform
  $node = new stdClass();
  $node->type = 'webform';
  node_object_prepare($node);
  $node->title = $form_state['values']['survery_name'];
  $node->language = 'en';
  $node->body[LANGUAGE_NONE][0]['value']   = '';
  $node->body[LANGUAGE_NONE][0]['format']  = 'full_html';
  $node->uid = $user->uid;
  $node->promote = 0;
  $node->comment = 0;

  // Create the webform components.
  $components = array(
    array(
      'name' => 'Gender',
      'form_key' => 'gender',
      'type' => 'select',
      'mandatory' => 1,
      'weight' => 0,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'inline',
        'private' => 0,
        'items' => "Mrs|Mrs\nMiss|Miss\nMr|Mr",
        'aslist' => 1,
      ),
    ),
    array(
      'name' => 'Last name',
      'form_key' => 'name',
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => 5,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'inline',
        'private' => 0,
      ),
    ),
    array(
      'name' => 'First name',
      'form_key' => 'first_name',
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => 10,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'inline',
        'private' => 0,
      ),
    ),
    array(
      'name' => 'question1',
      'form_key' => 'question1',
      'type' => 'moha_ui_rating',
      'mandatory' => 1,
      'weight' => 10,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'inline',
        'private' => 0,
        'max_score' => 5,
        'threshold_score' => 3,
      ),
    ),
    array(
      'name' => 'question2',
      'form_key' => 'question2',
      'type' => 'moha_ui_rating',
      'mandatory' => 1,
      'weight' => 10,
      'pid' => 0,
      'extra' => array(
        'title_display' => 'inline',
        'private' => 0,
        'max_score' => 5,
        'threshold_score' => 3,
      ),
    ),
  );


  // Attach the webform to the node.
  $node->webform = array(
    'confirmation' => '',
    'confirmation_format' => NULL,
    'redirect_url' => 'moha/survey/submitted',
    'status' => '1',
    'block' => '0',
    'teaser' => '0',
    'allow_draft' => '0',
    'auto_save' => '0',
    'submit_notice' => '1',
    'submit_text' => '',
    'submit_limit' => '1', // User can submit only once.
    'submit_interval' => '-1',
    'total_submit_limit' => '-1',
    'total_submit_interval' => '-1',
    'record_exists' => TRUE,
    'roles' => array(
      0 => '2', // Only allow login user take survey.
    ),
    'progressbar_bar' => FALSE,
    'components' => $components,
  );

  // todo associated moha_ui_rating component with summit survey question

  // Save the node.
  node_save($node);

  $form_state['redirect'] = 'node/'. $node->nid;

}

