<?php
/**
 * @file
 */

/**
 * Human name.
 */
define('MOHA_SURVEY', 'Moha Survey');

/**
 * Machine name.
 */
define('__MOHA_SURVEY', 'moha_survey');

/**
 * moha_survey__variables.
 */
define('MOHA_SURVEY__VARIABLES', __MOHA_SURVEY . '__variables');

/**
 * Variable name: moha_survey__variable__survey_style.
 * @example moha_array_variable_get(MOHA_SURVEY__VARIABLES, MOHA_SURVEY__VARIABLE__PREVIEW_UID, 'WeUI')
 * @example moha_array_variable_set(MOHA_SURVEY__VARIABLES, MOHA_SURVEY__VARIABLE__SURVEY_STYLE, 'WeUI');
 */
define('MOHA_SURVEY__VARIABLE__SURVEY_STYLE', __MOHA_SURVEY . '__variable__survey_style');

/**
 * Variable name: moha_survey__variable__preview_uid.
 * @example moha_array_variable_get(MOHA_SURVEY__VARIABLES, MOHA_SURVEY__VARIABLE__PREVIEW_UID, 0)
 * @example moha_array_variable_set(MOHA_SURVEY__VARIABLES, MOHA_SURVEY__VARIABLE__PREVIEW_UID, $values['uid']);
 */
define('MOHA_SURVEY__VARIABLE__PREVIEW_UID', __MOHA_SURVEY . '__variable__preview_uid');

/**
 * sites/all/modules/custom/moha/modules/moha_survey.
 */
define('MOHA_SURVEY__PATH', drupal_get_path('module', __MOHA_SURVEY));

/**
 * /sites/all/modules/custom/moha/modules/moha_survey.
 */
define('__MOHA_SURVEY__PATH', base_path() . MOHA_SURVEY__PATH);

/**
 * Entity machine name.
 */
define('__MOHA_SURVEY__ENTITY__TEMPLATE', 'moha_survey_template');

/**
 * Moha URL: Moha Survey template management page.
 * @example admin/moha/entities/survey_template
 */
define('MOHA_SURVEY__URL__TEMPLATE_ADMIN_UI', MOHA__URL__ENTITIES . '/survey_template');

/**
 * Permission definition: submit moha survey.
 */
define('MOHA_SURVEY__PERMISSION__SUBMIT', 'submit moha survey');

/**
 * Implements hook_permission().
 */
function moha_survey_permission() {
  $permissions = array(
    'administer any survey' =>  array(
      'title' => t('Administer any survey'),
      'description' => t('Perform administration tasks for any survey.'),
    ),
    'administer own survey' =>  array(
      'title' => t('Administer own survey'),
      'description' => t('Perform administration tasks for own survey.'),
    ),
  );

  $permissions[MOHA_SURVEY__PERMISSION__SUBMIT] = array(
    'title' => t('Submit Moha Survey'),
    'description' => t('User could submit a Moha Survey.'),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function moha_survey_theme($existing, $type, $theme, $path) {
  $themes = array(
    'moha_survey_dashboard' => array(
      'template' => 'templates/moha_survey_dashboard',
      'render element' => 'content',
    ),
    'moha_survey_weui_webform_element_radios' => array(
      'render element' => 'element',
    ),
    'moha_survey_weui_webform_element_checkboxes' => array(
      'render element' => 'element',
    ),
    'moha_survey_weui_webform_element_textfield' => array(
      'template' => 'templates/moha_survey_weui_webform_element_textfield',
      'render element' => 'element',
    ),
    'moha_survey_weui_moha_ui_reason_textfield' => array(
      'render element' => 'element',
    ),
    'moha_survey_weui_moha_ui_rating_title' => array(
      'render element' => 'element',
    ),
  );

  // Declares theme for survey preview page through naming convention, one place configuration.
  $themes['html__moha__survey'] = array(
    'render element' => 'elements',
    'template' => 'templates/html--moha--survey',
  );

  $themes['page__moha__survey'] = array(
    'render element' => 'elements',
    'template' => 'templates/page--moha--survey',
  );

  $themes['node__webform'] = array(
    'render element' => 'elements',
    'template' => 'templates/node--webform',
  );

  return $themes;
}

/**
 * Implements hook_entity_info().
 */
function moha_survey_entity_info() {

  $items = array();

  // Stores basic information of an Moha Survey Template.
  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_SURVEY__ENTITY__TEMPLATE] = array(
    'label' => t('Moha Survey Template'),
    'plural label' => t('Moha Survey Templates'),
    'base table' => __MOHA_SURVEY__ENTITY__TEMPLATE,
    'revision table' => 'moha_survey_template_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    // Entity label extractor function.
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* moha_survey_template management page URL & Class. */
      'path' => MOHA_SURVEY__URL__TEMPLATE_ADMIN_UI,
      'controller class' => 'MohaSurveyTemplateEntityAdminController',

      /** @see entity_ui_get_form() */
      /* moha_survey_template add / edit forms containing file. */
      'file' => 'includes/MohaSurveyTemplateEntity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => __MOHA_SURVEY,

    /** @see entity_access() */
    'access callback' => 'moha_entity_access',

    'entity class' => 'MohaSurveyTemplateEntity',
    'controller class' => 'MohaSurveyTemplateEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity fieldable; @see field_attach_form to attach added fields.
    'fieldable' => FALSE,

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $items;
}

/**
 * Implements hook_entity_property_info().
 */
function moha_survey_entity_property_info() {

  // Define meta explain array then bind to moha_survey_template entity.
  $properties['id'] = array(
    'label' => t('ID'),
    'type' => 'integer',
    'description' => t('Template ID.'),
    'schema field' => 'id',
  );

  $properties['name'] = array(
    'label' => t('Name'),
    'type' => 'text',
    'description' => t('Template name.'),
    'schema field' => 'name',
  );

  $properties['nid'] = array(
    'label' => t('Node ID'),
    'type' => 'node',
    'bundle' => 'webform',
    'description' => t('Node ID of related Webform.'),
    'schema field' => 'nid',
  );

  $properties['referred'] = array(
    'label' => t('Referred'),
    'type' => 'integer',
    'description' => t('Referred times as template.'),
    'schema field' => 'referred',
  );

  /** @see entity_property_verbatim_get */
  $properties['status'] = array(
    'label' => t('Status'),
    'type' => 'text',
    'description' => t('Template Status.'),
    'schema field' => 'status',
    /** @see moha_entity_status_get */
    'getter callback' => 'moha_entity_status_get',
  );

  $properties['oid'] = array(
    'label' => t('Owner'),
    'type' => 'user',
    'description' => t('User ID who pinned this template.'),
    'schema field' => 'oid',
  );

  $properties['uid'] = array(
    'label' => t('User'),
    'type' => 'user',
    'description' => t('User ID who updated this template.'),
    'schema field' => 'uid',
  );

  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('Template created date.'),
    'type' => 'date',
    'schema field' => 'created',
  );

  $properties['updated'] = array(
    'label' => t('Updated'),
    'description' => t('Template updated date.'),
    'type' => 'date',
    'schema field' => 'updated',
  );

  $properties['comment'] = array(
    'label' => t('Comment'),
    'type' => 'text',
    'description' => t('Update reason.'),
    'schema field' => 'comment',
  );

  $items[__MOHA_SURVEY__ENTITY__TEMPLATE]['properties'] = $properties;
  return $items;
}

/**
 * Implements hook_menu().
 */
function moha_survey_menu() {

  $items['moha/survey/thanks'] = array(
    'title' => 'Thank you',
    'description' => 'Thank you page after user submit the data.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_thanks',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  $items['moha/survey/taken'] = array(
    'title' => 'Survey has submitted',
    'description' => 'Prompt user he/she has submitted this survey.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_taken',
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  $items['moha/survey/closed'] = array(
    'title' => 'Survey Closed',
    'description' => 'Prompt user this survey has been closed.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_closed',
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey management entry.
  $items['admin/moha/survey'] = array(
    'title' => 'Survey management',
    'description' => 'Manage surveys, survey templates, survey questions and statistics.',
    /** @see moha_survey_dashboard */
    'page callback' => 'moha_survey_dashboard',
    'access arguments' => array('administer own survey'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Dashboard, alias to parent path.
  $items['admin/moha/survey/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'Survey Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Configuration.
  $items['admin/moha/survey/config'] = array(
    'title' => 'Survey Configuration',
    'description' => 'Configuration of Moha Survey',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_config_form */
    'page arguments' => array('moha_survey_config_form'),
    'access arguments' => array('administer survey config'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey edit form.
  $items['admin/moha/survey/edit/%node'] = array(
    'title' => 'Survey Update',
    'description' => 'Update title and components of a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_edit_form */
    'page arguments' => array('moha_survey_edit_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_LOCAL_TASK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  $items['admin/moha/survey/edit/%node/edit'] = $items['admin/moha/survey/edit/%node'];
  $items['admin/moha/survey/edit/%node/edit']['title'] = 'Edit';
  $items['admin/moha/survey/edit/%node/edit']['type'] |= MENU_DEFAULT_LOCAL_TASK;

  $items['admin/moha/survey/edit/%node/analysis'] = array(
    'title' => 'Analysis',
    /** @see moha_survey_results_analysis */
    'page callback' => 'moha_survey_results_analysis',
    'page arguments' => array(4),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file' => 'moha_survey.admin.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/moha/survey/edit/%node/submissions'] = array(
    'title' => 'Submissions',
    /** @see moha_survey_results_submissions */
    'page callback' => 'moha_survey_results_submissions',
    'page arguments' => array(4, '50'),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file' => 'moha_survey.admin.inc',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/moha/survey/edit/%node/download'] = array(
    'title' => 'Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_results_download_form', 4),
    'access callback' => 'webform_results_access',
    'access arguments' => array(4),
    'file' => 'moha_survey.admin.inc',
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );

  // Moha Survey Clone.
  $items['admin/moha/survey/create'] = array(
    'title' => 'Survey Creation',
    'description' => 'Forward user to Survey creation page without a template selected.',
    /** @see moha_survey_clone_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_clone_form'),
    'access arguments' => array('administer own survey'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Clone.
  $items['admin/moha/survey/clone/%node'] = array(
    'title' => 'Survey Clone',
    'description' => 'Forward user to Survey creation page with a template selected.',
    /** @see moha_survey_clone_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_clone_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey Template Delete.
  $items['admin/moha/survey/template-delete/%'] = array(
    'title' => 'Survey Template Remove',
    'description' => 'Remove survey template.',
    /** @see moha_survey_template_delete_form */
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moha_survey_template_delete_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey delete
  $items['admin/moha/survey/delete/%node'] = array(
    'title' => 'Survey delete',
    'description' => 'Delete a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_delete_form */
    'page arguments' => array('moha_survey_delete_form', 4),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey component edit form.
  $items['admin/moha/survey/component/%node/%'] = array(
    'title' => 'Survey question edit',
    'description' => 'Add a component or update component details of a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_component_edit_form */
    'page arguments' => array('moha_survey_component_edit_form', 4, 5),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  // Moha Survey component delete form.
  $items['admin/moha/survey/component-delete/%node/%'] = array(
    'title' => 'Survey question delete',
    'description' => 'Eleminate a component from a survey.',
    'page callback' => 'drupal_get_form',
    /** @see moha_survey_component_edit_form */
    'page arguments' => array('moha_survey_component_delete_form', 4, 5),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK | MENU_SUGGESTED_ITEM,
    'file' => 'moha_survey.admin.inc',
  );

  $items['moha/survey/preview/%node'] = array(
    'title' => 'Survey preview',
    /** @see moha_survey_preview */
    'page callback' => 'moha_survey_preview',
    'page arguments' => array(3),
    'access arguments' => array('administer own survey'),
    'type' => MENU_CALLBACK,
  );

  $items['moha/survey/page/%node'] = array(
    'title' => 'Moha Survey',
    /** @see moha_survey_page */
    'page callback' => 'moha_survey_page',
    'page arguments' => array(3),
    'access arguments' => array('moha survey submission'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Declares location of codes for views.
 */
function moha_survey_views_api() {
  return array(
    'api' => 3,
    'path' => MOHA_SURVEY__PATH . '/views',
    'template path' => MOHA_SURVEY__PATH . '/templates',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * Operations control per permission.
 */
function moha_survey_views_pre_render(&$view) {
  if ($view->name == 'moha_survey_template') {
    $rows = $view->result;

    foreach ($rows as $row) {

    }
  }
}

/**
 * Webform type to survey type.
 *
 * @param $component
 *   Component detail array.
 *
 * @param $literal
 *   False to return internal type directly.
 *
 * @throws Exception
 */
function moha_survey_question_type($component, $literal = TRUE) {

  static $type_literals = array(
    'textfield' => 'Text Field',
    'rating' => 'Rating',
    'nps' => 'NPS',
    'radio' => 'Radio Box',
    'check' => 'Check Box',
  );

  if (empty($component)) {
    throw new Exception('Empty component.');
  }

  if ($component['type'] == 'textfield') {
    $type = 'textfield';
  }
  elseif ($component['type'] == 'moha_ui_rating' && isset($component['extra']['nps']) && $component['extra']['nps'] == TRUE) {
    $type = 'nps';
  }
  elseif ($component['type'] == 'moha_ui_rating') {
    $type = 'rating';
  }
  elseif ($component['type'] == 'select' && isset($component['extra']['multiple']) && $component['extra']['multiple'] == FALSE) {
    $type = 'radio';
  }
  elseif ($component['type'] == 'select' && isset($component['extra']['multiple']) && $component['extra']['multiple'] == TRUE) {
    $type = 'check';
  }
  else {
    throw new Exception('Unknown type: ' . $component['type']);
  }

  if ($literal) {
    $type = t($type_literals[$type]);
  }

  return $type;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function moha_survey_webform_component_render_alter(array &$element, array &$component) {

  if (isset($element['#type'])) {
    if ($element['#type'] == 'radios') {
      $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_radios';
    }
    elseif ($element['#type'] == 'checkboxes') {
      $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_checkboxes';
    }
    elseif ($element['#type'] == 'textfield') {
      $element['#theme_wrappers'][] = 'moha_survey_weui_webform_element_textfield';
    }
    elseif ($element['#type'] == 'moha_ui_rating') {
      $element['#theme_wrappers'][] = 'moha_survey_weui_moha_ui_rating_title';
    }
  }

}

/**
 * Survey preview page rendering prepare.
 *
 * @param $node
 *
 * @see moha_survey_theme
 *
 * @return array
 */
function moha_survey_preview($node){
  $content = node_view($node);

  $params = drupal_get_query_parameters();
  if (isset($params['preview'])) {
    hide($content['webform']['#form']['actions']);
  }

  $content['#attached']['library'] = array(
    array(__MOHA_UI, __MOHA_UI),
  );
  $content['#attached']['css'] = array(
    MOHA_SURVEY__PATH . '/css/moha_survey.css',
  );

  return $content;
}

/**
 * Implements hook_custom_theme().
 */
function moha_survey_custom_theme() {
  $path = current_path();

  static $patterns = array(
    'moha/survey/page/*',
    'moha/survey/preview/*',
    'moha/survey/thanks',
    'moha/survey/taken',
    'moha/survey/closed',
  );

  foreach ($patterns as $pattern) {
    if (drupal_match_path($path, $pattern)) {
      return 'stark';
    }
  }
}

/**
 * Survey take page rendering prepare.
 *
 * @example moha/survey/page/nid.
 *
 * @param $node
 *
 * @return array
 */
function moha_survey_page($node){
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  global $user;
  $submission_count = webform_get_submission_count($node->nid, $user->uid);
  if ($submission_count) {
    drupal_goto('moha/survey/taken');
  }

  $content = node_view($node);
  drupal_set_title($node->title);

  $content['#attached']['library'] = array(
    array(__MOHA_UI, __MOHA_UI),
  );
  $content['#attached']['css'] = array(
    MOHA_SURVEY__PATH . '/css/moha_survey.css',
  );
  // Suppress fancy stuff like admin and admin_menu.module for the preview.
  module_invoke_all('suppress');
  return $content;
}

/**
 * Survey thanks page.
 *
 * @example moha/survey/thanks.
 *
 * @return array
 */
function moha_survey_thanks(){

  $content['msg'] = array(
    '#markup' => <<<MSG
<div class="weui-msg">
        <div class="weui-msg__icon-area"><i class="weui-icon-success weui-icon_msg"></i></div>
        <div class="weui-msg__text-area">
            <h2 class="weui-msg__title">Success</h2>
            <p class="weui-msg__desc">Thank you for your participation.</p>
        </div>
    </div>
MSG
  ,
  );
  $content['#attached']['library'] = array(
    array(__MOHA_UI, __MOHA_UI),
  );
  $content['#attached']['css'] = array(
    MOHA_SURVEY__PATH . '/css/moha_survey.css',
  );

  // Suppress fancy stuff like admin and admin_menu.module for the preview.
  module_invoke_all('suppress');
  return $content;
}

/**
 * Survey thanks page.
 *
 * @example moha/survey/taken.
 *
 * @return array
 */
function moha_survey_taken(){

  $content['msg'] = array(
    '#markup' => <<<MSG
<div class="weui-msg">
  <div class="weui-msg__icon-area"><i class="weui-icon-info weui-icon_msg"></i></div>
  <div class="weui-msg__text-area">
    <h2 class="weui-msg__title">Thank you</h2>
    <p class="weui-msg__desc">You should have taken the survey.</p>
  </div>
  <div class="weui-msg__opr-area">
    <p class="weui-btn-area">
      <a href="javascript:history.back();" class="weui-btn weui-btn_primary">Back</a>
    </p>
  </div>
</div>
MSG
  ,
  );
  $content['#attached']['library'] = array(
    array(__MOHA_UI, __MOHA_UI),
  );
  $content['#attached']['css'] = array(
    MOHA_SURVEY__PATH . '/css/moha_survey.css',
  );

  // Suppress fancy stuff like admin and admin_menu.module for the preview.
  module_invoke_all('suppress');
  return $content;
}

/**
 * Survey thanks page.
 *
 * @example moha/survey/closed.
 *
 * @return array
 */
function moha_survey_closed(){

  $content['msg'] = array(
    '#markup' => <<<MSG
<div class="weui-msg">
  <div class="weui-msg__icon-area"><i class="weui-icon-warn weui-icon_msg-primary"></i></div>
  <div class="weui-msg__text-area">
    <h2 class="weui-msg__title">Survey Closed</h2>
    <p class="weui-msg__desc">This survey has been closed.</p>
  </div>
  <div class="weui-msg__opr-area">
    <p class="weui-btn-area">
      <a href="javascript:history.back();" class="weui-btn weui-btn_primary">Back</a>
    </p>
  </div>
</div>
MSG
  ,
  );
  $content['#attached']['library'] = array(
    array(__MOHA_UI, __MOHA_UI),
  );
  $content['#attached']['css'] = array(
    MOHA_SURVEY__PATH . '/css/moha_survey.css',
  );

  // Suppress fancy stuff like admin and admin_menu.module for the preview.
  module_invoke_all('suppress');
  return $content;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function moha_survey_preprocess_html(&$variables) {

}

/**
 * @param $variables
 *
 * @return string
 */
function theme_moha_survey_weui_webform_element_radios($variables) {
  $element = $variables['element'];

  $options = $element['#options'];
  if($element['#value']){
    $checked_option = $element['#value'];
  } else {
    $checked_option = $element['#default_value'];
  }

  if ($element['#required']) {
    $element['#title'] .= '<span style="color:red"> * </span>';
  }

  $error = form_get_error($element);
  $error_class = '';
  if ($error) {
    $error_class = 'error';
  }

  $output='
    <div class="weui-cells__title">' . $element['#title'] . '</div>
    <div class="weui-cells weui-cells_radio ' . $error_class . '">';

  foreach($options as $key => $option){
    if($checked_option == $key){
      $checked = 'checked="checked"';
    } else {
      $checked = '';
    }
    $output .= '
      <label class="weui-cell weui-check__label" for="'. $element[$key]['#id'] . '">
        <div class="weui-cell__bd">
            <p>'. $option .'</p>
        </div>
        <div class="weui-cell__ft">
            <input type="radio" class="weui-check" name="' . $element[$key]['#name'] . '" id="' . $element[$key]['#id'] . '" value="' . $key .'" ' . $checked .'>
            <span class="weui-icon-checked"></span>
        </div>
      </label>';
  }

  $output .= '</div>';

  return $output;
}

/**
 * @param $variables
 *
 * @return string
 */
function theme_moha_survey_weui_webform_element_checkboxes($variables) {
  $element = $variables['element'];

  $options = $element['#options'];
  if($element['#value']){
    $checked_option = $element['#value'];
  } else {
    $checked_option = $element['#default_value'];
  }

  if ($element['#required']) {
    $element['#title'] .= '<span style="color:red"> * </span>';
  }

  $error = form_get_error($element);
  $error_class = '';
  if ($error) {
    $error_class = 'error';
  }

  $output='
    <div class="weui-cells__title">' . $element['#title'] . '</div>
    <div class="weui-cells weui-cells_checkbox ' . $error_class . '">';

  foreach($options as $key => $option){
    if(in_array($key, $checked_option )){
      $checked = 'checked="checked"';
    } else {
      $checked = '';
    }
    $output .= '
      <label class="weui-cell weui-check__label" for="'. $element[$key]['#id'] . '">
        <div class="weui-cell__hd">
            <input type="checkbox" name="' . $element[$key]['#name'] . '" class="weui-check" id="' . $element[$key]['#id'] . '" value="' . $key . '" '.$checked. '>
            <i class="weui-icon-checked"></i>
        </div>
        <div class="weui-cell__bd">
            <p>' . $option . '</p>
        </div>
      </label>';
  }

  $output .= '</div>';

  return $output;
}


/**
 * Implements hook_element_info_alter().
 */
function moha_survey_element_info_alter(&$type) {
  $type['moha_ui_rating']['#process'][] = 'moha_survey_moha_ui_rating_process';
  /* @see moha_survey_webform_component_render_alter */
  //$element['moha_ui_rating']['#theme_wrappers'] = 'moha_survey_weui_moha_ui_rating_title';
  //remove the maxlength limit of textfield
  unset($type['textfield']['#maxlength']);
}

/**
 * element process callback
 *
 * Modify the reason in $element['moha_ui_rating']
 */
function moha_survey_moha_ui_rating_process($element, &$form_state, $complete_form){
  $element['reason']['#theme'] = 'moha_survey_weui_moha_ui_reason_textfield';
  $element['reason']['#theme_wrappers'][] = 'moha_survey_weui_moha_ui_rating_title';
  return $element;
}

/**
 * @param $variables
 *
 * @return string
 *
 * Use weui style for the reason element in moha_ui_rating.
 */
function theme_moha_survey_weui_moha_ui_reason_textfield($variables) {
  $element = $variables['element'];
  if ($element['#required']) {
    $element['#title'] .= '<span style="color:red"> * </span>';
  }
  $error = form_get_error($element);
  $error_class = '';
  if ($error) {
    $error_class = 'error';
  }

  $output = '<div class="weui-cells '.  $error_class . '">
    <div class="weui-cell">
      <div class="weui-cell__bd">
        <input class="weui-input" type="text" placeholder="请输入文本"
          id="'.$element['#id'].'" name="'.$element['#name'] .'"
          value="'.$element['#value'] .'" size="'. $element['#size'] .'"
        >
      </div>
    </div>
  </div>';

  return $output;
}

/**
 * @param $variables
 *
 * @return string
 *
 * Use weui style for the title of rating or reason.
 */
function theme_moha_survey_weui_moha_ui_rating_title($variables) {
  $element = &$variables['element'];
  _form_set_class($element);

  if ($element['#required']) {
    $element['#title'] .= '<span style="color:red"> * </span>';
  }

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  // Add element's #type and #name as class to aid with JS/CSS selectors.
  $attributes['class'] = array('form-item');
  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }

  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] = drupal_array_merge_deep($attributes['class'], $element['#attributes']['class']);
  }
  $output = '<div' . drupal_attributes($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . '<div class="weui-cells__title">' . $element['#title'] . '</div>';
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      $output .= ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . '<div class="weui-cells__title">' . $element['#title'] . '</div>' . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function moha_survey_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // use weui style for webform submit button
  $form['actions']['submit']['#attributes']['class'][] = 'weui-btn';
  $form['actions']['submit']['#attributes']['class'][] ='weui-btn_primary';
}
