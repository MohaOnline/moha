<?php
/**
 * @file
 * The module file of the module.
 */

/**
 * Human name.
 */
define('MOHA_WX', 'Moha WX');

/**
 * Machine name.
 */
define('__MOHA_WX', 'moha_wx');

/**
 * sites/all/modules/custom/moha/modules/moha_wx.
 */
define('MOHA_WX__PATH', drupal_get_path('module', __MOHA_WX));

/**
 * /sites/all/modules/custom/moha/modules/moha_wx.
 */
define('__MOHA_WX__PATH', base_path() . MOHA_WX__PATH);

/**
 * Entity human name.
 */
define('MOHA_WX_ACCOUNT', 'Moha WeChat Account');

/**
 * Entity machine name.
 */
define('__MOHA_WX_ACCOUNT', 'moha_wx_account');

/** WeChat Account Types. */
define('MOHA_WX__ACCOUNT_TYPE__SERVICE', 'Service Account');
define('MOHA_WX__ACCOUNT_TYPE__ENTERPRISE', 'Enterprise Account');
define('MOHA_WX__ACCOUNT_TYPE__SUBSCRIPTION', 'Subscription Account');
define('MOHA_WX__ACCOUNT_TYPE__OPEN', 'Open Platform Account');

/**
 * Moha WX Types.
 */
define('MOHA_WX__ACCOUNT_TYPE', array(
  0 => MOHA_WX__ACCOUNT_TYPE__SUBSCRIPTION,
  MOHA_WX__ACCOUNT_TYPE__SERVICE,
  MOHA_WX__ACCOUNT_TYPE__ENTERPRISE,
  MOHA_WX__ACCOUNT_TYPE__OPEN,
));

/**
 * Moha WX URL: Moha WX account management page URL.
 */
define('MOHA_WX__URL__ACCOUNT_ADMIN_UI', 'admin/moha/entities/wechat-accounts');

/**
 * Module URL: handles redirection back from WeChat OAuth2 for getting user information.
 * @see _moha_wx_oauth2_back_with_user_info()
 */
define('MOHA_WX__URL__OAUTH2_BACK_WITH_USER_INFO', 'moha/wx/oauth2_back_with_user_info/@WECHAT_NAME');

/**
 * Module URL: Access page through STATE which need user has logged in.
 * Redirect anonymous user to WeChat OAuth2 explicit authentication URL.
 */
define('MOHA_WX__URL__REQUEST_OAUTH2_LOGIN_EXPLICIT', 'moha/wx/oauth2_explicit_login/@WECHAT_NAME/@STATE');

/**
 * Module URL: Access page through STATE which need user has logged in.
 * Redirect anonymous user to WeChat OAuth2 silent authentication URL.
 */
define('MOHA_WX__URL__REQUEST_OAUTH2_LOGIN_SILENT', 'moha/wx/oauth2_silent_login/@WECHAT_NAME/@STATE');

/**
 * Module URL: WeChat OAuth2 login entry.
 * Redirect anonymous user to WeChat OAuth2 authentication URL per account type.
 */
define('MOHA_WX__URL__OAUTH2_LOGIN', 'moha/wx/oauth2/login/%');

/**
 * Module URL: WeChat OAuth2 redirect back entry.
 */
define('MOHA_WX__URL__OAUTH2_BACK', 'moha/wx/oauth2/back/%');

/**
 * Error message: 503 Service is not available.
 */
define('MOHA_WX__MSG__NO_SERVICE', 'Service is not available.');

/**
 * WeChat API: Access Token.
 */
define('MOHA_WX__API__ACCESS_TOKEN', 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=@APPID&secret=@APPSECRET');

/**
 * WeChat API: Access Token - Enterprise Account.
 */
define('MOHA_WX__API__ACCESS_TOKEN__ENT', 'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=@APPID&corpsecret=@APPSECRET');

/**
 * WeChat API: JS SDK Ticket.
 */
define('MOHA_WX__API__JSAPI_TICKET', 'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=@ACCESS_TOKEN&type=jsapi');

/**
 * WeChat API: Materials.
 */
define('MOHA_WX__API__MATERIALS', 'https://api.weixin.qq.com/cgi-bin/material/batchget_material?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Get Current Menu JSON.
 */
define('MOHA_WX__API__GET_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/get?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Get Current Menu JSON - Enterprise Account.
 */
define('MOHA_WX__API__GET_MENU_ENT', 'https://qyapi.weixin.qq.com/cgi-bin/menu/get?access_token=@ACCESS_TOKEN&agentid=@AGENT_ID');

/**
 * WeChat API: Create WeChat Menu.
 */
define('MOHA_WX__API__CREATE_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Create WeChat Menu - Enterprise Account.
 */
define('MOHA_WX__API__CREATE_MENU_ENT', 'https://qyapi.weixin.qq.com/cgi-bin/menu/create?access_token=@ACCESS_TOKEN&agentid=@AGENT_ID');

/**
 * WeChat API: Delete WeChat Menu.
 */
define('MOHA_WX__API__DELETE_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Delete WeChat Menu - Enterprise Account.
 */
define('MOHA_WX__API__DELETE_MENU_ENT', 'https://qyapi.weixin.qq.com/cgi-bin/menu/delete?access_token=@ACCESS_TOKEN&agentid=@AGENT_ID');

/**
 * WeChat API: Request an OAuth2 authorization which could get user information.
 */
define('MOHA_WX__API__OAUTH2_WITH_USER_INFO', 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=@APPID&redirect_uri=@REDIRECT_URI&response_type=code&scope=snsapi_userinfo&state=@STATE#wechat_redirect');

/**
 * WeChat API: Request an OAuth2 authorization which only get user openid.
 */
define('MOHA_WX__API__OAUTH2', 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=@APPID&redirect_uri=@REDIRECT_URI&response_type=code&scope=snsapi_base&state=@STATE#wechat_redirect');

/**
 * WeChat Open Platform API: Request an OAuth2 authorization.
 */
define('MOHA_WX__API__OAUTH2_OPEN_PLATFORM', 'https://open.weixin.qq.com/connect/qrconnect?appid=@APPID&redirect_uri=@REDIRECT_URI&response_type=code&scope=snsapi_login&state=@STATE#wechat_redirect');

/**
 * WeChat API: Request user information of an OAuth2 user.
 */
define('MOHA_WX__API__OAUTH2_REQUEST_USER_INFO', 'https://api.weixin.qq.com/sns/userinfo?access_token=@ACCESS_TOKEN&openid=@OPENID&lang=zh_CN');

/**
 * WeChat API: Get user id through code back with OAuth2 authentication.
 * User's detailed information could be get through user id.
 * If user is not imported into WeChat enterprise account, only OpenID can be returned.
 */
define('MOHA_WX__API__OAUTH2_GET_USER_ID_FROM_CODE_ENT', 'https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=@ACCESS_TOKEN&code=@CODE');

/**
 * WeChat API: Get OAuth Access Token.
 */
define('MOHA_WX__API__OAUTH2_ACCESS_TOKEN', 'https://api.weixin.qq.com/sns/oauth2/access_token?appid=@APPID&secret=@APPSECRET&code=@CODE&grant_type=authorization_code');

/**
 * WeChat API: Refresh token valid seconds.
 */
define('MOHA_WX__API__REFRESH_TOKEN_EXPIRES_IN', 60*60*24*30);

/**
 * WeChat OAuth2 state: Personal Home.
 */
define('MOHA_WX__OAUTH2_STATE__HOME', 'MOHA_WX__OAUTH2_STATE__HOME');

/**
 * WeChat OAuth2 state: Drupal user page.
 */
define('MOHA_WX__OAUTH2_STATE__USER_PAGE', 'MOHA_WX__OAUTH2_STATE__USER_PAGE');

/**
 * Session name: OAuth2 Response of current user.
 */
define('MOHA_WX__SESSION__OAUTH2_USER', 'moha_wx_session_oauth2_user');

/**
 * Implements hook_entity_info().
 */
function moha_wx_entity_info() {
  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_WX_ACCOUNT] = moha_entity_define(
    __MOHA_WX,
    __MOHA_WX_ACCOUNT,
    MOHA_WX_ACCOUNT,
    'MohaWeChatAccount',
    MOHA_WX__URL__ACCOUNT_ADMIN_UI
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function moha_wx_menu() {

  // Moha WeChat server URL, configured at Development > Basic > Server Address.
  $items['moha/wx/server/%'] = array(
    'title' => 'wechat',
    'description' => 'moha callback',
    'page callback' => '_moha_wx_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.callback.inc',
  );

  // moha/wx/oauth2_explicit_login/@WECHAT_NAME/@STATE
  $items[format_string(MOHA_WX__URL__REQUEST_OAUTH2_LOGIN_EXPLICIT, array(
    '@WECHAT_NAME' => '%',
    '@STATE' => '%'
  ))] = array(
    'title' => 'WeChat explicit authentication',
    'description' => 'Moha WX requests WeChat OAuth for User Info.',
    'page callback' => '_moha_wx_oauth2_request_explicit_authorization',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.oauth2.inc',
  );

  // Handles redirect from WeChat oauth2 process.
  // moha/wx/oauth2_back_with_user_info/@WECHAT_NAME
  $items[format_string(MOHA_WX__URL__OAUTH2_BACK_WITH_USER_INFO, array('@WECHAT_NAME' => '%'))] = array(
    'title' => 'wechat',
    'description' => 'moha callback',
    /** @see _moha_wx_oauth2_back_with_user_info() */
    'page callback' => '_moha_wx_oauth2_back_with_user_info',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.oauth2.inc',
  );

  $items['moha/wx/home'] = array(
    'title' => 'wechat',
    'description' => 'moha landing page',
    'page callback' => '_moha_wx_home',
    'access arguments' => array('skip comment approval'),
    'type' => MENU_CALLBACK,
  );

  /** @link moha/wx/oauth2/login/% @endlink */
  $items[MOHA_WX__URL__OAUTH2_LOGIN] = moha_menu_define(
    'OAuth2 Login',
    'Login user through configured OAuth2 client.',
    /** @see moha_wx_oauth2_login */
    array('moha_wx_oauth2_login', 4),
    TRUE,
    'Callback'
  );

  /** @link moha/wx/oauth2/back/% @endlink */
  $items[MOHA_WX__URL__OAUTH2_BACK] = moha_menu_define(
    'OAuth2 Client',
    'Receive response from OAuth2 Server.',
    /** @see moha_wx_oauth2_back */
    array('moha_wx_oauth2_back', 4),
    TRUE,
    'Callback'
  );

  return $items;
}

/**
 * Forward user to scan have
 *
 * @param $name
 * @param $destination
 * @param $force
 *
 * @return mixed
 */
function moha_wx_oauth2_login($name, $destination = '', $force = FALSE) {

  watchdog(__FUNCTION__, t('OAuth2 login %name.', array('%name' => $name)));

  try {
    if (!$force && user_is_logged_in()) {
      drupal_goto($destination);
    }
    else {
      $account = moha_wx_fetch_account_by_name($name);

      if (!isset($account->type)) {
        throw new Exception(t('No account type, WeChat account is miss configured.'));
      }

      // Mark WeChat Browser.
      $wx_browser = FALSE;
      $user_agent = $_SERVER['HTTP_USER_AGENT'];
      watchdog(__FUNCTION__, $user_agent);
      if (strpos( $user_agent, 'MicroMessenger' ) !== FALSE) {
        $wx_browser = TRUE;
      }

      $redirect_uri = moha_url('moha/wx/oauth2/back/' . $name);
      $state = moha_state_set($destination);

      switch ($account->type) {
        default:
          throw new Exception(t('Unknown account type: %type, WeChat account is miss configured.', array('%type' => $account->type)));
          break;

        case moha_array_key_by_value(MOHA_WX__ACCOUNT_TYPE__OPEN, MOHA_WX__ACCOUNT_TYPE):
          // WeChat Open Platform account.
          if ($wx_browser) {
            if (!empty($account->wx_fallback)) {
              $account = moha_wx_fetch_account_by_id($account->wx_fallback);
              watchdog(__FUNCTION__, t('Fallback to %name, App accesses Open Platform.', array('%name' => $account->name)));
              return moha_wx_oauth2_login($account->name, $destination, $force);
            }

            return t("Please don't use WeChat browser to login.");
          }

          $login_url = format_string( MOHA_WX__API__OAUTH2_OPEN_PLATFORM,
            array(
              '@APPID' => $account->app_id,
              '@REDIRECT_URI' => $redirect_uri,
              '@STATE' => $state
            )
          );
          break;

        case moha_array_key_by_value(MOHA_WX__ACCOUNT_TYPE__SERVICE, MOHA_WX__ACCOUNT_TYPE):
        case moha_array_key_by_value(MOHA_WX__ACCOUNT_TYPE__SUBSCRIPTION, MOHA_WX__ACCOUNT_TYPE):
          // WeChat Service and Subscription account.
          if (!$wx_browser) {
            if (!empty($account->wx_fallback)) {
              $account = moha_wx_fetch_account_by_id($account->wx_fallback);
              watchdog(__FUNCTION__, t('Fallback to %name, Browser accesses WeChat account.', array('%name' => $account->name)));
              return moha_wx_oauth2_login($account->name, $destination, $force);
            }

            return t("Please use WeChat browser to login.");
          }

          $login_url = format_string( MOHA_WX__API__OAUTH2,
            array(
              '@APPID' => $account->app_id,
              '@REDIRECT_URI' => $redirect_uri,
              '@STATE' => $state
            )
          );
          break;
      }

      watchdog(__FUNCTION__, t("Authorise: %login_url", array('%login_url' => $login_url)));
      drupal_goto($login_url);
    }
  }
  catch (Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
    moha_http_response_error($e);
  }

  return NULL;
}

/**
 *
 *
 * @param $name
 *
 * @return mixed
 */
function moha_wx_oauth2_back($name) {
  try {
    $state = isset($_GET['state'])?$_GET['state']:'';

    if (empty($state)){
      throw new Exception('No State.', MohaWeChat::$ERROR__OAUTH_NO_STATE);
    }

    $code = isset($_GET['code'])?$_GET['code']:'';

    if (empty($code)){
      throw new Exception('No Code.', MohaWeChat::$ERROR__OAUTH_NO_CODE);
    }

    $account = moha_wx_fetch_account_by_name($name);

    if ($account->isEnterpriseAccount()) {

    }
    else {
      //** Service, Subscription WeChat account logic. */
      /* JSON array structure sample:
        { "access_token":"ACCESS_TOKEN",
          "expires_in":7200,
          "refresh_token":"REFRESH_TOKEN",
          "openid":"OPENID",
          "scope":"SCOPE"
        }
      */
      $oauth2_credential_array = moha_wx_get_official(
        format_string(MOHA_WX__API__OAUTH2_ACCESS_TOKEN, [
          '@APPID' => $account['app_id'],
          '@APPSECRET' => $account['app_secret'],
          '@CODE' => $code,
        ])
      );

      // Store access_token, expires_in, refresh_token, openid, scope, unionid.
      $oauth2_user = _moha_wx_moha_user_by_openid($oauth2_credential_array['openid'], $account->app_id);

      global $user;

      if (!user_is_logged_in() || (user_is_logged_in() && $user->uid != $oauth2_user->uid)) {
        $form_state = array();
        $form_state['uid'] = $oauth2_user->uid;

        user_login_submit(array(), $form_state);
        drupal_session_regenerate();
      }

      drupal_goto(moha_state_get($state));
    }
  }
  catch (Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
    moha_http_response_error($e);
  }
}

function _moha_wx_home() {
  global $user;
  $profile = profile2_load_by_user($user, __MOHA);

  $moha_wx_user_info = entity_load_single('field_collection_item', $profile->moha_wx_user_info[LANGUAGE_NONE][0]['value']);

  echo $moha_wx_user_info->moha_wx_nickname[LANGUAGE_NONE][0]['value'];
  echo '<img src="' . $moha_wx_user_info->moha_wx_portrait[LANGUAGE_NONE][0]['value'] . '" />';

}

/**
 * Check passed signature parameter($_GET['signature']).
 *
 * @param $token
 *
 * @param $query array
 *   All passed parameters from $_GET
 *
 * @throws \MohaWXParamException
 *   Throws when parameters are invalid.
 *
 * @throws \Exception
 *   Throws
 *
 * @return true
 */
function moha_wx_check_signature($token, $query) {

  if (empty($query["signature"])) {
    throw new MohaWXParamException('no signature!');
  }

  if (empty($query["timestamp"])) {
    throw new MohaWXParamException('no timestamp!');
  }

  if (empty($query["nonce"])) {
    throw new MohaWXParamException('no nonce!');
  }

  $signature = $query["signature"];
  $timestamp = $query["timestamp"];
  $nonce = $query["nonce"];

  // Sort, combine, sha1.
  $tmpArr = [$token, $timestamp, $nonce];
  sort($tmpArr, SORT_STRING); // use SORT_STRING rule.
  $tmpStr = implode($tmpArr);
  $tmpStr = sha1($tmpStr);

  if ($tmpStr != $signature) {
    throw new Exception("Signature doesn't match.");
  }

  return TRUE;
}

/**
 * Disable WeChat sharing function.
 */
function moha_wx_sharing_disable() {
  drupal_add_js(MOHA_WX__PATH . '/js/moha_wx_sharing_disable.js');
}

/**
 * Call WeChat official API, and return analysed basing on JSON response.
 *
 * @param $wechat_api_url
 *
 * @throws \Exception
 *
 * @return array converted from wechat json response.
 *   return array with errcode member when no http response, no or error json response.
 */
function moha_wx_get_official($wechat_api_url) {
  return moha_wx_post_official($wechat_api_url, '', 'GET');
}

/**
 * Call WeChat official API, and returns JSON array per response.
 *
 * @param $wechat_api_url string
 * @param $data string
 * @param $request_type string
 *
 * @throws \Exception
 *   Throws exception when no response, no return JSON data, or return error JSON data.
 *
 * @return array
 *   Converted from WeChat json response.
 */
function moha_wx_post_official($wechat_api_url, $data = '', $request_type = "POST") {

  // Trace Called WeChat API.
  watchdog( __FUNCTION__,
    '@URL[@DATA]',
    array(
      '@URL' => $wechat_api_url,
      '@DATA' => $data,
    ),
    WATCHDOG_INFO
  );

  if (!empty($data)) {
    $options['data'] = $data;
    $options['method'] = $request_type;
    $res = drupal_http_request($wechat_api_url, $options);
  }
  else {
    $res = drupal_http_request($wechat_api_url);
  }

  if (!isset($res->data)) {
    // No response data, network error.
    throw new Exception($res->error, $res->code);
  }
  else {
    watchdog( __FUNCTION__,
       "response: @data",
      array('@data' => $res->data),
      WATCHDOG_INFO
    );

    $array = json_decode($res->data, TRUE);

    if (!$array) {
      throw new Exception('No JSON string in response!');
    }
    else if (!empty($array['errcode'])) { // $json['errcode'] is set and value is not 0.
      throw new Exception(isset($array['errmsg'])?$array['errmsg']:t('no error message'), $array['errcode']);
    }
    else {
      // Normal case.
      return $array;
    }
  }

}

/**
 * If access token no existed or expired, fetch access token from wechat server,
 * otherwise return stored access token.
 *
 * @param $account MohaWeChatAccountEntity
 *    account information array.
 *
 * @return string: access token.
 *
 * @throws \Exception: no access token.
 */
function _moha_wx_refresh_access_token($account) {

  // expired time of access_token is in future.
  if (!empty($account->access_token) && ($account->access_token_updated + $account->access_token_expires_in) > REQUEST_TIME ){
    return $account->access_token;
  }

  // Adjust URL of access token API per account type.
  $access_token_api = MOHA_WX__API__ACCESS_TOKEN;
  if ($account->type == moha_array_key_by_value(MOHA_WX__ACCOUNT_TYPE__ENTERPRISE, MOHA_WX__ACCOUNT_TYPE)) {
    $access_token_api = MOHA_WX__API__ACCESS_TOKEN__ENT;
  }

  $json = moha_wx_get_official(format_string($access_token_api, array(
    '@APPID' => $account->app_id,
    '@APPSECRET' => $account->app_secret,
  )));

  // Save access_token into DB.
  $access_token = $account->access_token = $json['access_token'];
  $account->access_token_updated = REQUEST_TIME;
  $account->access_token_expires_in = $json['expires_in'];

  $account->save();

  return $access_token;
}

/**
 * @param $account
 *
 * @throws \Exception: jsapi_ticket.
 *
 * @see https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115
 */
function _moha_wx_refresh_jsapi_ticket(&$account) {

  _moha_wx_refresh_access_token($account);

  // expired time of access_token is in future.
  if (!empty($account['jsapi_ticket']) && ($account['jsapi_ticket_updated'] + $account['jsapi_ticket_expires_in']) > time() ){
    return $account['jsapi_ticket'];
  }

  $account['jsapi_ticket_updated'] = time();

  $json = moha_wx_get_official(format_string(MOHA_WX__API__JSAPI_TICKET, array(
    '@ACCESS_TOKEN' => $account['access_token'],
  )));

  $jsapi_ticket = $account['jsapi_ticket'] = $json['ticket'];
  $account['jsapi_ticket_expires_in'] = $json['expires_in'];

  db_update('moha_wx_accounts')
    ->fields(array(
      'jsapi_ticket' => $account['jsapi_ticket'],
      'jsapi_ticket_updated' => $account['jsapi_ticket_updated'],
      'jsapi_ticket_expires_in' => $account['jsapi_ticket_expires_in'],
    ))
    ->condition('wechat_name', $account['wechat_name'])
    ->execute();

  return $jsapi_ticket;
}

/**
 * Fetch WeChat article URL per article title from WeChat, then update in table: moha_wx_accounts.
 *
 * @param $account array
 *    account information array.
 *
 * @throws \Exception
 */
function _moha_wx_refresh_welcome_news_info($account) {

  _moha_wx_refresh_access_token($account);

  $post_data['type'] = 'news';
  $post_data['offset'] = 0;
  $post_data['count'] = 20;

  do {
    $materials = moha_wx_post_official(
      format_string(MOHA_WX__API__MATERIALS, ['@ACCESS_TOKEN' => $account['access_token']]), json_encode($post_data));

    foreach ($materials['item'] as $item) {
      $content = $item['content'];

      foreach ($content['news_item'] as $news) {

        if ($news['title']  == $account['news_title']) {
          $account['news_cover'] = $news['thumb_url'];
          $account['news_link'] = $news['url'];
          $account['news_digest'] = $news['digest'];

          $affacted_row_number = db_update('moha_wx_accounts')
            ->fields(array(
              'news_title' => $account['news_title'],
              'news_cover' => $account['news_cover'],
              'news_link' => $account['news_link'],
              'news_digest' => $account['news_digest'],
              'updated' => time(),
            ))
            ->condition('wechat_name', $account['wechat_name'])
            ->execute();
          break 3;
        }
      }
    }
    $post_data['offset'] += $post_data['count'];
  }
  while ($materials['item_count'] != 0);

  if (isset($affacted_row_number) && $affacted_row_number == 1) {
    drupal_set_message(t("Welcome message information synced."));
  }
  else {
    drupal_set_message(t("Can't find welcome message."), 'warning');
  }
}

/**
 * Fetch all active WeChat accounts.
 *
 * @param $options
 *
 * @return array
 */
function moha_wx_fetch_account($options = array('status' => MOHA__TERM__ACTIVE)){
  $accounts = moha_entity_fetch(__MOHA_WX_ACCOUNT, $options + array('status' => MOHA__TERM__ACTIVE));

  return $accounts;
}

/**
 * Fetch one WeChat account per given machine name.
 *
 * @param string $name
 *   Machine name of the account.
 *
 * @return MohaWeChatAccountEntity
 *
 * @throws Exception
 *
 */
function moha_wx_fetch_account_by_name($name = '') {
  if (empty($name)) {
    throw new Exception('Empty account name.');
  }

  $name = check_plain($name);
  $account = moha_entity_fetch(__MOHA_WX_ACCOUNT, array('name' => $name));

  if (empty($account)) {
    throw new Exception("Account: $name doesn't exist or isn't active.");
  }
  else if(count($account) > 1) {
    throw new Exception("Account: $name multiply exist.");
  }

  $account = array_shift($account);

  return $account;
}

/**
 * Returns account entity by entity ID.
 *
 * @param $id
 * @param $condition
 *
 * @return MohaWeChatAccountEntity
 *
 * @throws Exception
 *   When $id is not number, or contains non-number.
 */
function moha_wx_fetch_account_by_id($id = 0, $condition = array()) {
  if (empty($id)) {
    throw new Exception('Empty account ID.');
  }
  else if (is_array($id)) {
    $ids = print_r($id, TRUE);

    foreach ($id as $i) {
      if (!is_numeric($i)) {
        throw new Exception(t("Invalid account ID: %ids(%i)", array('%ids' => $ids, '%i' => $i)));
      }
    }
  }
  else if (!is_array($id) && !is_numeric($id)) {
    throw new Exception("Invalid account ID: $id");
  }

  $account = entity_load(__MOHA_WX_ACCOUNT, array($id), $condition);

  if (empty($account)) {
    throw new Exception("Account: $id doesn't exist.");
  }

  if (!is_array($id)) {
    $account = reset($account);
  }

  return $account;
}

/**
 * Return profile2 fields and instances array for profile2 moha.
 *
 * @return array
 */
function _moha_wx_moha_profile2_fields_and_instances() {
  $fields_and_instances['moha_wx_user_info'] = array(
    'type' => 'field_collection',
    'field_name' => 'moha_wx_user_info',
    'label' => t('User information in WeChat'),
    'description' => t('User information in WeChat'),
    'entity_type' => 'profile2',
    'bundle' => __MOHA,
    'default_value' => NULL,
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'field_collection',
        'settings' => array(
          'add' => 'Add',
          'delete' => 'Delete',
          'description' => TRUE,
          'edit' => 'Edit',
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_view',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => FALSE,
      'profile2_private' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_unionid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_unionid',
    'label' => 'UnionID',
    'bundle' => 'moha_wx_user_info',
    'description' => t('UnionID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_nickname'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_nickname',
    'label' => 'Nickname',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Nickname which is used in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_sex'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_sex',
    'label' => 'Sex',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Sex which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_province'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_province',
    'label' => 'Province',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Province which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_city'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_city',
    'label' => 'City',
    'bundle' => 'moha_wx_user_info',
    'description' => t('City which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_country'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_country',
    'label' => 'Country',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Country which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_portrait'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_portrait',
    'label' => 'Portrait',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Portrait which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  // field container: connected WeChat account information.
  $fields_and_instances['moha_wx_connected_accounts'] = array(
    'type' => 'field_collection',
    'field_name' => 'moha_wx_connected_accounts',
    'label' => t('Connected WeChat accounts'),
    'entity_type' => 'profile2',
    'bundle' => __MOHA,
    'default_value' => NULL,
    'description' => t('Stores connected WeChat account information, like: appid, openid, etc.'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'field_collection',
        'settings' => array(
          'add' => 'Add',
          'delete' => 'Delete',
          'description' => TRUE,
          'edit' => 'Edit',
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_view',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => FALSE,
      'profile2_private' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_appid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_appid',
    'label' => 'AppID',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('AppID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_userid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_userid',
    'label' => 'UserID',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('UserID of related WeChat enterprise account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_openid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_openid',
    'label' => 'OpenID',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('OpenID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_access_token'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_access_token',
    'label' => 'OAuth2 access token',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('Last access token of OAuth2'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_token_updated'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_token_updated',
    'label' => 'Updated time',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('By when last oauth2 access token was refreshed.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_token_valid_time'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_token_valid_time',
    'label' => 'Valid time',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('By when last oauth2 access token is valid, update time + expires in.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_refresh_token'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_refresh_token',
    'label' => 'OAuth2 refresh token',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('WeChat OAuth2 30-days valid refresh token.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  return $fields_and_instances;
}

/**
 *
 */
function moha_wx_wechat_is_login($user = NULL) {
  if (empty($user)) {
    global $user;
  }

  // If user exists, profile2: open_weixin exists as well.
  $profile = profile2_load_by_user($user, __OPEN_WEIXIN);

}

/**
 * Returns user object per opendid and appid from Drupal site.
 *
 * @param $appid string
 * @param $openid string
 *
 * @throws \MohaWXNoUserException
 *   User does not exist.
 *
 * @throws \MohaWXParamException
 *   Invalid params are passed.
 *
 * @return \stdClass
 */
function _moha_wx_moha_user_by_openid($openid = '', $appid = '') {
  if (empty($openid)) {
    throw new MohaWXParamException('Empty OpenID.');
  }

  if (empty($appid)) {
    throw new MohaWXParamException('Empty AppID');
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'moha_wx_connected_accounts')
    ->fieldCondition('moha_wx_appid', 'value', $appid)
    ->fieldCondition('moha_wx_openid', 'value', $openid);

  $result = $query->execute();

  if (empty($result)) {
    throw new MohaWXNoUserException(
      format_string(
        'New User: %OPENID(%APPID)',
        array(
          '%OPENID' => $openid,
          '%APPID' => $appid,
        )
      )
    );
  }
  else {
    watchdog(__FUNCTION__, 'Return User: %OPENID(%APPID)',
      array(
        '%OPENID' => $openid,
        '%APPID' => $appid,
      )
    );

    // Load user.
    $field_collection_record = array_pop($result['field_collection_item']);
    $connected_wechat_account = entity_load_single('field_collection_item', $field_collection_record->item_id);
    $profile = $connected_wechat_account->hostEntity();
    $user = user_load($profile->uid);

    return $user;
  }
}

/**
 * Returns user object per user and corpid from Drupal site.
 *
 * @param $corpid string
 * @param $userid string
 *
 * @throws \MohaWXNoUserException
 *   User does not exist.
 *
 * @throws \MohaWXParamException
 *   Invalid params are passed.
 *
 * @return \stdClass
 */
function _moha_wx_moha_user_by_userid($userid = '', $corpid = '') {
  if (empty($userid)) {
    throw new MohaWXParamException('Empty UserID.');
  }

  if (empty($corpid)) {
    throw new MohaWXParamException('Empty CorpID');
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'moha_wx_connected_accounts')
    ->fieldCondition('moha_wx_appid', 'value', $corpid)
    ->fieldCondition('moha_wx_userid', 'value', $userid);

  $result = $query->execute();

  if (empty($result)) {
    throw new MohaWXNoUserException(
      format_string(
        'New: %OPENID(%APPID)',
        array(
          '%OPENID' => $userid,
          '%APPID' => $corpid,
        )
      )
    );
  }
  else {
    watchdog(__FUNCTION__, 'Return: %OPENID(%APPID)',
      array(
        '%OPENID' => $userid,
        '%APPID' => $corpid,
      )
    );

    // Load user.
    $field_collection_record = array_pop($result['field_collection_item']);
    $connected_wechat_account = entity_load_single('field_collection_item', $field_collection_record->item_id);
    $profile = $connected_wechat_account->hostEntity();
    $user = user_load($profile->uid);

    return $user;
  }
}

/**
 * Returns user object per unionid.
 */
function moha_wx_moha_user_by_unionid() {

}


/**
 * @param $signature_array array
 *
 * @return $signature_array
 */
function moha_wx_make_jsapi_signature(array $signature_array) {

  $tmpStr = format_string('jsapi_ticket=@jsapi_ticket&noncestr=@noncestr&timestamp=@timestamp&url=!url', array(
    '@jsapi_ticket' => $signature_array['jsapi_ticket'],
    '@noncestr' => $signature_array['noncestr'],
    '@timestamp' => $signature_array['timestamp'],
    '!url' => $signature_array['url'],
  ));

  $signature = sha1($tmpStr);

  watchdog(__FUNCTION__, $tmpStr . ' ' . $signature);

  return $signature;
}

/**
 * @param $account array
 *
 * @param $url string
 *   on which page JS SDK will be invoked.
 */
function moha_wx_jsapi_config($account) {

  try {
    $signature_array['jsapi_ticket'] = _moha_wx_refresh_jsapi_ticket($account);
    $signature_array['noncestr'] = $nonce = moha_nonce();
    $signature_array['timestamp'] = $timestamp = time();
    $signature_array['url'] = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
    // $_SERVER['HTTP_HOST'] . request_uri();

    $signature = moha_wx_make_jsapi_signature($signature_array);

    $app_id = $account['app_id'];

    $jsapi_config = <<<EOF
(function($) { $(function() {

  wx.config({
    // debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
    appId: '$app_id', // 必填，公众号的唯一标识
    timestamp: $timestamp, // 必填，生成签名的时间戳
    nonceStr: '$nonce', // 必填，生成签名的随机串
    signature: '$signature',// 必填，签名
    jsApiList: ['scanQRCode','onMenuShareAppMessage','onMenuShareTimeline','closeWindow'] // 必填，需要使用的JS接口列表
  });

}); }) (jQuery);
EOF;

    drupal_add_js('https://res.wx.qq.com/open/js/jweixin-1.2.0.js', 'external');
    drupal_add_js($jsapi_config, 'inline');
  }
  catch (Exception $e) {
    watchdog_exception(__FUNCTION__, $e);
  }
}

/**
 * Implements hook_views_api().
 *
 * Declares locations of views' definitions and templates.
 */
function moha_wx_views_api() {
  return array(
    'api' => 3,
    'path' => MOHA_WX__PATH . '/views',               // view 的定义存放的路径
    'template path' => MOHA_WX__PATH . '/templates',  // view 的模版存放的路径
  );
}

/**
 * Returns URL per STATE.
 *
 * @param $state string
 *
 * @return string
 *
 * @throws \Exception
 */
function _moha_wx_get_state_url($state) {
  $mapping = array (
    MOHA_WX__OAUTH2_STATE__HOME => 'moha/wx/home',
    MOHA_WX__OAUTH2_STATE__USER_PAGE => 'user',
  );

  if (module_exists("moha_sales")) {
    $mapping[MOHA_SALES__OAUTH2_STATE__HOME] = MOHA_SALES__URL__HOME;
  }

  if (!array_key_exists($state, $mapping)){
    throw new Exception('No State: ' . check_plain($state), MohaWeChat::$ERROR__OAUTH_INVALID_STATE);
  }
  else {
    return $mapping[$state];
  }
}

/**
 * Redirect user to WeChat OAuth2 page for explicit authentication if user hasn't login.
 *
 * @param $state
 *
 * @throws \Exception if process can't continue.
 */
function moha_wx_anonymous_fall_back_to_explicit_oauth2_authorization($wechat_name, $state) {

  // Check if state is valid.
  _moha_wx_get_state_url($state);

  if (user_is_logged_in()) {
    return;
  }
  else {
    $account = moha_wx_fetch_account_by_name($wechat_name);

    // When user hasn't logged in, redirect him/her to WeChat OAuth2 explicit authentication URL.
    drupal_goto(
      format_string(MOHA_WX__API__OAUTH2_WITH_USER_INFO,
        [
          '@APPID' => $account['app_id'],
          '@REDIRECT_URI' => url(
            format_string(MOHA_WX__URL__OAUTH2_BACK_WITH_USER_INFO, ['@WECHAT_NAME' => $wechat_name]),
            array('absolute' => TRUE)
          ),
          '@STATE' => $state
        ])
    );
  }
}



