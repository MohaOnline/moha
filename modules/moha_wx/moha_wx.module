<?php

/**
 * Human name.
 */
define('MOHA_WX', 'Moha WX');

/**
 * Machine name.
 */
define('__MOHA_WX', 'moha_wx');

/**
 * moha_wx__variables.
 */
define('MOHA_WX__VARIABLES', __MOHA_WX . '__variables');

/**
 * sites/all/modules/custom/moha/modules/moha_wx.
 */
define('MOHA_WX__RELATIVE_PATH', drupal_get_path('module', __MOHA_WX));

/**
 * /sites/all/modules/custom/moha/modules/moha_wx.
 */
define('MOHA_WX__PATH', base_path() . MOHA_WX__RELATIVE_PATH);

/**
 * Error message: 503 Service is not available.
 */
define('MOHA_WX__MSG__NO_SERVICE', 'Service is not available.');

/**
 * WeChat API: Access Token.
 */
define('MOHA_WX__API__ACCESS_TOKEN', 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=@APPID&secret=@APPSECRET');

/**
 * WeChat API: Materials.
 */
define('MOHA_WX__API__MATERIALS', 'https://api.weixin.qq.com/cgi-bin/material/batchget_material?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Get Current Menu JSON.
 */
define('MOHA_WX__API__GET_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/get?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Create WeChat Menu.
 */
define('MOHA_WX__API__CREATE_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=@ACCESS_TOKEN');

/**
 * Implements hook_menu().
 */
function moha_wx_menu() {

  //
  $items['moha/wx/%'] = array(
    'title' => 'wechat',
    'description' => 'moha callback',
    'page callback' => '_moha_wx_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.callback.inc',
  );

  $items['admin/moha/wx/config/%'] = array(
    'title' => t('Configure WeChat Account'),
    'description' => t('Manage WeChat Account configurations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_wx_account_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/moha_wx.admin.inc',
  );

  $items['admin/moha/wx/menu/%'] = array(
    'title' => t('Configure WeChat Menu'),
    'description' => t('Manage configurations of WeChat menus.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_wx_menu_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/moha_wx.admin.inc',
  );

  return $items;
}

/**
 * Check passed signature parameter($_GET['signature']).
 *
 * @param $token
 * @param $query  array  all passed parameters $_GET
 *
 * @return bool
 */
function moha_wx_check_signature($token, $query) {

  try {
    if (empty($query["signature"]) || empty($query["timestamp"]) || empty($query["nonce"])) {
      throw new Exception("miss query parameter.");
    }

    $signature = $query["signature"];
    $timestamp = $query["timestamp"];
    $nonce = $query["nonce"];

    // Sort, combine, sha1.
    $tmpArr = [$token, $timestamp, $nonce];
    sort($tmpArr, SORT_STRING); // use SORT_STRING rule.
    $tmpStr = implode($tmpArr);
    $tmpStr = sha1($tmpStr);

    if ($tmpStr == $signature) {
      return TRUE;
    }
    else {
      throw new Exception("Signature doesn't match.");
    }
  }
  catch (Exception $e) {
    //
    watchdog( MOHA_WX,
      __FUNCTION__ . " catch: %msg ",
      array(
        "%msg" => $e->getMessage(),
      ),
      WATCHDOG_ERROR
    );

    return FALSE;
  }
}

/**
 * Call WeChat official API, and return analysed basing on JSON response.
 *
 * @param $wechat_api_url
 * @return array converted from wechat json response.
 *   return empty array when no http response, no or error json response.
 */
function moha_wx_get_official($wechat_api_url) {
  return moha_wx_post_official($wechat_api_url, '', 'GET');
}

/**
 * Call WeChat official API, and return analysed basing on JSON response.
 *
 * @param $wechat_api_url string
 * @param $data string
 * @param $request_type string
 *
 * @return array converted from wechat json response.
 *   return empty array when no http response, no or error json response.
 */
function moha_wx_post_official($wechat_api_url, $data = '', $request_type = "POST") {

  if (!empty($data)) {
    $options['data'] = $data;
    $options['method'] = $request_type;
    $res = drupal_http_request($wechat_api_url, $options);
  }
  else {
    $res = drupal_http_request($wechat_api_url);
  }

  try {
    if (isset($res->data)) {
      watchdog( MOHA_WX,
        __FUNCTION__ . " respond data: @data",
        array('@data' => $res->data),
        WATCHDOG_INFO
      );

      $json = json_decode($res->data, TRUE);

      if (!$json) {
        throw new Exception('no response JSON.');
      }
      else if (!empty($json['errcode'])) {
        throw new Exception(format_string('errcode: %error_code, %errmsg', array(
          '%error_code' => (isset($json['errcode']))?$json['errcode']:t('no error code'),
          '%errmsg' => (isset($json['errmsg']))?$json['errmsg']:t('no error message'),
        )));
      }
      else { // Normal case.
        return $json;
      }
    }
    // No response data, network error.
    else {
      throw new Exception('no response data. ' . $res->error);
    }
  }
  catch (Exception $e) {
    $error_message = format_string(" %msg [%wechat_api_url]",
      array(
        "%wechat_api_url" => $wechat_api_url,
        "%msg" => $e->getMessage(),
      )
    );

    // Output error log with related failed API.
    watchdog( __FUNCTION__,
      $error_message,
      array(),
      WATCHDOG_ERROR
    );

    drupal_set_message($error_message, 'error');

    return array();
  }

}


/**
 * If access token isn't existed or expired, update access token from wechat server,
 * otherwise return stored access token.
 *
 * @param $account array
 *    account information array.
 *
 * @return string: access token.
 *
 * @throws \Exception: no access token.
 */
function _moha_wx_get_access_token(&$account) {

  if (!empty($account['access_token']) && ($account['access_token_updated'] + $account['access_token_expires_in']) > time() ){
    return $account['access_token'];
  }

  $json = moha_wx_get_official(format_string(MOHA_WX__API__ACCESS_TOKEN, array(
    '@APPID' => $account['app_id'],
    '@APPSECRET' => $account['app_secret'],
  )));

  if (empty($json)) {
    throw new Exception('no access token: ' . __FUNCTION__);
  }

  $access_token = $account['access_token'] = $json['access_token'];
  $account['access_token_expires_in'] = $json['expires_in'];
  $account['access_token_updated'] = time();

  db_update('moha_wx_accounts')
    ->fields(array(
      'access_token' => $account['access_token'],
      'access_token_updated' => $account['access_token_updated'],
      'access_token_expires_in' => $account['access_token_expires_in'],
    ))
    ->condition('wechat_name', $account['wechat_name'])
    ->execute();

  return $access_token;
}

/**
 * @param $account array
 *    account information array.
 * @throws \Exception
 */
function _moha_wx_update_welcome_news($account) {

  $post_data['type'] = 'news';
  $post_data['offset'] = 0;
  $post_data['count'] = 20;

  do {
    $materials = moha_wx_post_official(
      format_string(MOHA_WX__API__MATERIALS, ['@ACCESS_TOKEN' => $account['access_token']]), json_encode($post_data));

    if (empty($materials)) {
      throw new Exception(format_string("no materials [@FUNCTION].", ['@FUNCTION' => __FUNCTION__]));
    }

    foreach ($materials['item'] as $item) {
      $content = $item['content'];

      foreach ($content['news_item'] as $news) {

        if ($news['title']  == $account['news_title']) {
          $account['news_cover'] = $news['thumb_url'];
          $account['news_link'] = $news['url'];
          $account['news_digest'] = $news['digest'];

          $affacted_row_number = db_update('moha_wx_accounts')
            ->fields(array(
              'news_title' => $account['news_title'],
              'news_cover' => $account['news_cover'],
              'news_link' => $account['news_link'],
              'news_digest' => $account['news_digest'],
              'updated' => time(),
            ))
            ->condition('wechat_name', $account['wechat_name'])
            ->execute();
          break 3;
        }
      }
    }
    $post_data['offset'] += $post_data['count'];
  }
  while ($materials['item_count'] != 0);

  if (isset($affacted_row_number) && $affacted_row_number == 1) {
    drupal_set_message(t("Welcome message information synced."));
  }
  else {
    drupal_set_message(t("Can't find welcome message."), 'warning');
  }
}

/**
 * Fetch JSON configuration of WeChat menu.
 *
 * @param $account
 */
function _moha_wx_get_menu(&$account) {
  $menu = moha_wx_get_official(
    format_string(MOHA_WX__API__GET_MENU, array('@ACCESS_TOKEN' => $account['access_token']))
  );

  if (empty($menu)){
   $wx_menu = '';
  }
  else {
    $wx_menu = json_encode($menu);
  }

  $account['wx_menu'] = $wx_menu;

  $affacted_row_number = db_update('moha_wx_accounts')
    ->fields(array(
      'wx_menu' => $account['wx_menu'],
      'updated' => time(),
    ))
    ->condition('wechat_name', $account['wechat_name'])
    ->execute();

  if (isset($affacted_row_number) && $affacted_row_number == 1) {
    drupal_set_message(t("JSON configuration of WeChat menu is fetched."));
  }
  else {
    drupal_set_message(t("Can't fetch JSON configuration of WeChat menu."), 'error');
  }
}

/**
 * Create WeChat Menu.
 *
 * @param $account
 * @see https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141013
 */
function _moha_wx_create_menu(&$account){
  $result = moha_wx_post_official(
    format_string(MOHA_WX__API__CREATE_MENU, ['@ACCESS_TOKEN' => $account['access_token']]), $account['wx_menu']
  );

  if ($result['errcode'] == 0 ) {
    drupal_set_message('WeChat Menu has been uploaded.');
  }
}
