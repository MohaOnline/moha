<?php

/**
 * Human name.
 */
define('MOHA_WX', 'Moha WX');

/**
 * Machine name.
 */
define('__MOHA_WX', 'moha_wx');

/**
 * moha_wx__variables.
 */
define('MOHA_WX__VARIABLES', __MOHA_WX . '__variables');

/**
 * sites/all/modules/custom/moha/modules/moha_wx.
 */
define('MOHA_WX__RELATIVE_PATH', drupal_get_path('module', __MOHA_WX));

/**
 * /sites/all/modules/custom/moha/modules/moha_wx.
 */
define('MOHA_WX__PATH', base_path() . MOHA_WX__RELATIVE_PATH);

/**
 * Module URL used in hook_menu: handles redirection from WeChat OAuth2 for getting user information.
 */
define('MOHA_WX__URL__OAUTH2_REDIRECT_USER_INFO', 'moha/wx/oauth2_redirect_user_info/@WECHAT_NAME');

/**
 * Module URL used in hook_menu: lets user request WeChat OAuth2 to get user information.
 */
define('MOHA_WX__URL__OAUTH2_REQUEST_USER_INFO', 'moha/wx/oauth2_request_user_info/@WECHAT_NAME/@STATE');

/**
 * Error message: 503 Service is not available.
 */
define('MOHA_WX__MSG__NO_SERVICE', 'Service is not available.');

/**
 * WeChat API: Access Token.
 */
define('MOHA_WX__API__ACCESS_TOKEN', 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=@APPID&secret=@APPSECRET');

/**
 * WeChat API: Materials.
 */
define('MOHA_WX__API__MATERIALS', 'https://api.weixin.qq.com/cgi-bin/material/batchget_material?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Get Current Menu JSON.
 */
define('MOHA_WX__API__GET_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/get?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Create WeChat Menu.
 */
define('MOHA_WX__API__CREATE_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Delete WeChat Menu.
 */
define('MOHA_WX__API__DELETE_MENU', 'https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=@ACCESS_TOKEN');

/**
 * WeChat API: Request an OAuth2 authorization.
 */
define('MOHA_WX__API__OAUTH2_REQUEST', 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=@APPID&redirect_uri=@REDIRECT_URI&response_type=code&scope=snsapi_userinfo&state=@STATE#wechat_redirect');

/**
 * WeChat API: Request user information of an OAuth2 user.
 */
define('MOHA_WX__API__OAUTH2_REQUEST_USER_INFO', 'https://api.weixin.qq.com/sns/userinfo?access_token=@ACCESS_TOKEN&openid=@OPENID&lang=zh_CN');

/**
 * WeChat API: Get OAuth Access Token.
 */
define('MOHA_WX__API__OAUTH_ACCESS_TOKEN', 'https://api.weixin.qq.com/sns/oauth2/access_token?appid=@APPID&secret=@APPSECRET&code=@CODE&grant_type=authorization_code');

/**
 * WeChat API: Refresh token valid seconds.
 */
define('MOHA_WX__API__REFRESH_TOKEN_EXPIRES_IN', 60*60*24*30);

/**
 * WeChat OAuth2 state: Personal Home.
 */
define('MOHA_WX__OAUTH2_STATE__HOME', 'MOHA_WX__OAUTH2_STATE__HOME');

/**
 * Implements hook_menu().
 */
function moha_wx_menu() {

  // Moha WeChat server URL, configured at Development > Basic > Server Address.
  $items['moha/wx/server/%'] = array(
    'title' => 'wechat',
    'description' => 'moha callback',
    'page callback' => '_moha_wx_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.callback.inc',
  );

  $items[format_string(MOHA_WX__URL__OAUTH2_REQUEST_USER_INFO, array(
    '@WECHAT_NAME' => '%',
    '@STATE' => '%'
  ))] = array(
    'title' => 'wechat',
    'description' => 'Moha WX requests WeChat OAuth for User Info.',
    'page callback' => '_moha_wx_oauth2_request_authorization',
    'page arguments' => array(3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.oauth2.inc',
  );

  // Handles redirect from WeChat oauth2 process.
  $items[format_string(MOHA_WX__URL__OAUTH2_REDIRECT_USER_INFO, array('@WECHAT_NAME' => '%'))] = array(
    'title' => 'wechat',
    'description' => 'moha callback',
    'page callback' => '_moha_wx_oauth2_redirect_user_info',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'moha_wx.oauth2.inc',
  );

  $items['admin/moha/wx/config/%'] = array(
    'title' => t('Configure WeChat Account'),
    'description' => t('Manage WeChat Account configurations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_wx_account_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/moha_wx.admin.inc',
  );

  $items['admin/moha/wx/menu/%'] = array(
    'title' => t('Configure WeChat Menu'),
    'description' => t('Manage configurations of WeChat menus.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_wx_menu_form', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/moha_wx.admin.inc',
  );

  $items['moha/wx/home'] = array(
    'title' => 'wechat',
    'description' => 'moha landing page',
    'page callback' => '_moha_wx_home',
    'access arguments' => array('skip comment approval'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function _moha_wx_home() {
  global $user;
  $profile = profile2_load_by_user($user, __MOHA);

  $moha_wx_user_info = entity_load_single('field_collection_item', $profile->moha_wx_user_info[LANGUAGE_NONE][0]['value']);

  echo $moha_wx_user_info->moha_wx_nickname[LANGUAGE_NONE][0]['value'];
  echo '<img src="' . $moha_wx_user_info->moha_wx_portrait[LANGUAGE_NONE][0]['value'] . '" />';

}

/**
 * Check passed signature parameter($_GET['signature']).
 *
 * @param $token
 *
 * @param $query array
 *   All passed parameters from $_GET
 *
 * @throws \MohaWXParamException
 *   Throws when parameters are invalid.
 *
 * @throws \Exception
 *   Throws
 *
 * @return true
 */
function moha_wx_check_signature($token, $query) {

  if (empty($query["signature"])) {
    throw new MohaWXParamException('no signature!');
  }

  if (empty($query["timestamp"])) {
    throw new MohaWXParamException('no timestamp!');
  }

  if (empty($query["nonce"])) {
    throw new MohaWXParamException('no nonce!');
  }

  $signature = $query["signature"];
  $timestamp = $query["timestamp"];
  $nonce = $query["nonce"];

  // Sort, combine, sha1.
  $tmpArr = [$token, $timestamp, $nonce];
  sort($tmpArr, SORT_STRING); // use SORT_STRING rule.
  $tmpStr = implode($tmpArr);
  $tmpStr = sha1($tmpStr);

  if ($tmpStr != $signature) {
    throw new Exception("Signature doesn't match.");
  }

  return TRUE;
}

/**
 * Call WeChat official API, and return analysed basing on JSON response.
 *
 * @param $wechat_api_url
 *
 * @throws \Exception
 *
 * @return array converted from wechat json response.
 *   return array with errcode member when no http response, no or error json response.
 */
function moha_wx_get_official($wechat_api_url) {
  return moha_wx_post_official($wechat_api_url, '', 'GET');
}

/**
 * Call WeChat official API, and returns JSON array per response.
 *
 * @param $wechat_api_url string
 * @param $data string
 * @param $request_type string
 *
 * @throws \Exception
 *   Throws exception when no response, no return JSON data, or return error JSON data.
 *
 * @return array
 *   Converted from WeChat json response.
 */
function moha_wx_post_official($wechat_api_url, $data = '', $request_type = "POST") {

  // Trace Called WeChat API.
  watchdog( __FUNCTION__,
    '@URL[@DATA]',
    array(
      '@URL' => $wechat_api_url,
      '@DATA' => $data,
    ),
    WATCHDOG_INFO
  );

  if (!empty($data)) {
    $options['data'] = $data;
    $options['method'] = $request_type;
    $res = drupal_http_request($wechat_api_url, $options);
  }
  else {
    $res = drupal_http_request($wechat_api_url);
  }

  if (!isset($res->data)) {
    // No response data, network error.
    throw new Exception($res->error, $res->code);
  }
  else {
    watchdog( MOHA_WX,
      __FUNCTION__ . " respond data: @data",
      array('@data' => $res->data),
      WATCHDOG_INFO
    );

    $array = json_decode($res->data, TRUE);

    if (!$array) {
      throw new Exception('No JSON string in response!');
    }
    else if (!empty($array['errcode'])) { // $json['errcode'] is set and value is not 0.
      throw new Exception(isset($array['errmsg'])?$array['errmsg']:t('no error message'), $array['errcode']);
    }
    else {
      // Normal case.
      return $array;
    }
  }

}


/**
 * If access token no existed or expired, fetch access token from wechat server,
 * otherwise return stored access token.
 *
 * @param $account array
 *    account information array.
 *
 * @return string: access token.
 *
 * @throws \Exception: no access token.
 */
function _moha_wx_refresh_access_token(&$account) {

  // expired time of access_token is in future.
  if (!empty($account['access_token']) && ($account['access_token_updated'] + $account['access_token_expires_in']) > time() ){
    return $account['access_token'];
  }

  $json = moha_wx_get_official(format_string(MOHA_WX__API__ACCESS_TOKEN, array(
    '@APPID' => $account['app_id'],
    '@APPSECRET' => $account['app_secret'],
  )));

  $access_token = $account['access_token'] = $json['access_token'];
  $account['access_token_expires_in'] = $json['expires_in'];
  $account['access_token_updated'] = time();

  db_update('moha_wx_accounts')
    ->fields(array(
      'access_token' => $account['access_token'],
      'access_token_updated' => $account['access_token_updated'],
      'access_token_expires_in' => $account['access_token_expires_in'],
    ))
    ->condition('wechat_name', $account['wechat_name'])
    ->execute();

  return $access_token;
}

/**
 * Fetch WeChat article URL per article title from WeChat, then update in table: moha_wx_accounts.
 *
 * @param $account array
 *    account information array.
 *
 * @throws \Exception
 */
function _moha_wx_refresh_welcome_news_info($account) {

  _moha_wx_refresh_access_token($account);

  $post_data['type'] = 'news';
  $post_data['offset'] = 0;
  $post_data['count'] = 20;

  do {
    $materials = moha_wx_post_official(
      format_string(MOHA_WX__API__MATERIALS, ['@ACCESS_TOKEN' => $account['access_token']]), json_encode($post_data));

    foreach ($materials['item'] as $item) {
      $content = $item['content'];

      foreach ($content['news_item'] as $news) {

        if ($news['title']  == $account['news_title']) {
          $account['news_cover'] = $news['thumb_url'];
          $account['news_link'] = $news['url'];
          $account['news_digest'] = $news['digest'];

          $affacted_row_number = db_update('moha_wx_accounts')
            ->fields(array(
              'news_title' => $account['news_title'],
              'news_cover' => $account['news_cover'],
              'news_link' => $account['news_link'],
              'news_digest' => $account['news_digest'],
              'updated' => time(),
            ))
            ->condition('wechat_name', $account['wechat_name'])
            ->execute();
          break 3;
        }
      }
    }
    $post_data['offset'] += $post_data['count'];
  }
  while ($materials['item_count'] != 0);

  if (isset($affacted_row_number) && $affacted_row_number == 1) {
    drupal_set_message(t("Welcome message information synced."));
  }
  else {
    drupal_set_message(t("Can't find welcome message."), 'warning');
  }
}

/**
 * Fetch JSON configuration of WeChat menu.
 * If there is no menu customized at WeChat end, save empty string to DB.
 *
 * @param $account
 *
 * @throws \Exception
 */
function _moha_wx_get_menu(&$account) {
  _moha_wx_refresh_access_token($account);

  $array = moha_wx_get_official(
    format_string(MOHA_WX__API__GET_MENU, array('@ACCESS_TOKEN' => $account['access_token']))
  );

  if (empty($array) || !empty($array['errcode'])){
   $wx_menu = '';
  }
  else {
    $wx_menu = json_encode($array);
  }

  $account['wx_menu'] = $wx_menu;

  $affacted_row_number = db_update('moha_wx_accounts')
    ->fields(array(
      'wx_menu' => $account['wx_menu'],
      'updated' => time(),
    ))
    ->condition('wechat_name', $account['wechat_name'])
    ->execute();

  if (isset($affacted_row_number) && $affacted_row_number == 1 && !empty($wx_menu)) {
    drupal_set_message(t("JSON configuration of WeChat menu is fetched."));
  }
  else {
    drupal_set_message(t("Can't fetch JSON configuration of WeChat menu."), 'error');
  }
}

/**
 * Create WeChat Menu.
 *
 * @param $account array
 *        WeChat account array from schema moha_wechat_accounts.
 *
 * @throws \Exception
 *
 * @see https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141013
 */
function _moha_wx_create_menu(&$account){
  _moha_wx_refresh_access_token($account);

  $result = moha_wx_post_official(
    format_string(MOHA_WX__API__CREATE_MENU, ['@ACCESS_TOKEN' => $account['access_token']]), $account['wx_menu']
  );

  if ($result['errcode'] == 0 ) {
    drupal_set_message('WeChat Menu has been uploaded.');
  }
}

/**
 * Delete WeChat menu.
 *
 * @param $account array
 *        WeChat account array from schema moha_wechat_accounts.
 *
 * @throws \Exception
 */
function _moha_wx_delete_menu(&$account){
  _moha_wx_refresh_access_token($account);

  $result = moha_wx_get_official(
    format_string(MOHA_WX__API__DELETE_MENU, ['@ACCESS_TOKEN' => $account['access_token']])
  );

  if ($result['errcode'] == 0 ) {
    drupal_set_message('WeChat Menu has been deleted.');
  }
}

/**
 * Fetch WeChat account details from DB table: moha_wx_accounts.
 *
 * @param $wechat_name
 *   WeChat account machine name.
 *
 * @return array
 *   WeChat account array from schema moha_wx_accounts.
 *
 * @throws \Exception
 *
 */
function _moha_wx_moha_account($wechat_name) {

  $account = db_query("SELECT * FROM {moha_wx_accounts} moha_wx_accounts WHERE wechat_name = :wechat_name",
    array(
      ':wechat_name' => $wechat_name,
    )
  )->fetchAssoc();

  if (!$account) {
    throw new Exception("Invalid WeChat account name: " . check_plain($wechat_name), MohaWeChat::$ERROR__WECHAT_ACCOUNT_INVALID);
  }
  else {
    return $account;
  }
}

/**
 * Return profile2 fields and instances array for profile2 moha.
 *
 * @return array
 */
function _moha_wx_moha_profile2_fields_and_instances() {
  $fields_and_instances['moha_wx_user_info'] = array(
    'type' => 'field_collection',
    'field_name' => 'moha_wx_user_info',
    'label' => t('User information in WeChat'),
    'entity_type' => 'profile2',
    'bundle' => __MOHA,
    'default_value' => NULL,
    'description' => t('User information in WeChat'),
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'field_collection',
        'settings' => array(
          'add' => 'Add',
          'delete' => 'Delete',
          'description' => TRUE,
          'edit' => 'Edit',
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_view',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => FALSE,
      'profile2_private' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_unionid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_unionid',
    'label' => 'UnionID',
    'bundle' => 'moha_wx_user_info',
    'description' => t('UnionID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_nickname'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_nickname',
    'label' => 'Nickname',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Nickname which is used in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_sex'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_sex',
    'label' => 'Sex',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Sex which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_province'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_province',
    'label' => 'Province',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Province which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_city'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_city',
    'label' => 'City',
    'bundle' => 'moha_wx_user_info',
    'description' => t('City which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_country'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_country',
    'label' => 'Country',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Country which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_portrait'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_portrait',
    'label' => 'Portrait',
    'bundle' => 'moha_wx_user_info',
    'description' => t('Portrait which is registered in WeChat.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  // field container: connected WeChat account information.
  $fields_and_instances['moha_wx_connected_accounts'] = array(
    'type' => 'field_collection',
    'field_name' => 'moha_wx_connected_accounts',
    'label' => t('Connected WeChat accounts'),
    'entity_type' => 'profile2',
    'bundle' => __MOHA,
    'default_value' => NULL,
    'description' => t('Stores connected WeChat account information, like: appid, openid, etc.'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'field_collection',
        'settings' => array(
          'add' => 'Add',
          'delete' => 'Delete',
          'description' => TRUE,
          'edit' => 'Edit',
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_view',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'user_register_form' => FALSE,
      'profile2_private' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_appid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_appid',
    'label' => 'AppID',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('AppID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_openid'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_openid',
    'label' => 'OpenID',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('OpenID of this WeChat account.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_access_token'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_access_token',
    'label' => 'OAuth2 access token',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('Last access token of OAuth2'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_token_updated'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_token_updated',
    'label' => 'Updated time',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('By when last oauth2 access token was refreshed.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_token_valid_time'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_token_valid_time',
    'label' => 'Valid time',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('By when last oauth2 access token is valid, update time + expires in.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  $fields_and_instances['moha_wx_oauth2_refresh_token'] = array(
    'type' => 'text',
    'field_name' => 'moha_wx_oauth2_refresh_token',
    'label' => 'OAuth2 refresh token',
    'bundle' => 'moha_wx_connected_accounts',
    'description' => t('WeChat OAuth2 30-days valid refresh token.'),
    'entity_type' => 'field_collection_item',
    'cardinality' => 1,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  return $fields_and_instances;
}

/**
 * Returns user object per opendid and appid from Drupal site.
 *
 * @param $appid string
 * @param $openid string
 *
 * @throws \MohaWXNoUserException
 *   User does not exist.
 *
 * @throws \MohaWXParamException
 *   Invalid params are passed.
 */
function _moha_wx_moha_user_by_openid($openid='', $appid=''){
  if (empty($openid)) {
    throw new MohaWXParamException('Empty OpenID.');
  }

  if (empty($appid)) {
    throw new MohaWXParamException('Empty AppID');
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'moha_wx_connected_accounts')
    ->fieldCondition('moha_wx_appid', 'value', $appid)
    ->fieldCondition('moha_wx_openid', 'value', $openid);

  $result = $query->execute();

  if (empty($result)) {
    throw new MohaWXNoUserException(
      format_string(
        'New User: %OPENID(%APPID)',
        array(
          '%OPENID' => $openid,
          '%APPID' => $appid,
        )
      )
    );
  }
  else {
    watchdog(__FUNCTION__, 'Return User: %OPENID(%APPID)',
      array(
        '%OPENID' => $openid,
        '%APPID' => $appid,
      )
    );

    // Load user.
    $field_collection_record = array_pop($result['field_collection_item']);
    $connected_wechat_account = entity_load_single('field_collection_item', $field_collection_record->item_id);
    $profile = $connected_wechat_account->hostEntity();
    $user = user_load($profile->uid);

    return $user;

  }
}

/**
 * Returns user object per unionid.
 */
function moha_wx_moha_user_by_unionid(){

}
