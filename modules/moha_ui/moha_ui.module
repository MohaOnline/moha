<?php
/**
 * @file
 * Provides kinds of UI enhancement widgets.
 */

/**
 * Human name.
 */
define('MOHA_UI', 'Moha UI');

/**
 * Machine name.
 */
define('__MOHA_UI', 'moha_ui');

/**
 * Machine name.
 */
define('__MOHA_UI_ADMIN', 'moha_ui_admin');

/**
 * sites/all/modules/custom/moha/modules/moha_ui.
 */
define('MOHA_UI__PATH', drupal_get_path('module', __MOHA_UI));

/**
 * /sites/all/modules/custom/moha/modules/moha_ui.
 */
define('__MOHA_UI__PATH', base_path() . MOHA_UI__PATH);

/**
 * Module variables name.
 */
define('MOHA_UI__VARIABLES', __MOHA_UI . '__variables');

/**
 * Image field Widget: Image Mobile Uploader.
 */
define('MOHA_UI__WIDGET__IMAGE_MOBILE_UPLOADER', 'moha_ui_image_mobile_uploader');

/**
 * Render array item: Dashboard Container.
 */
define('MOHA_UI__DASHBOARD__CONTAINER','moha_ui__dashboard');

/**
 * Drupal Element.
 */
define('MOHA_UI__ELEMENT__DASHBOARD_CHART_EXPENSE', 'moha_ui_dashboard_chart_expense');

/**
 * Implements hook_library().
 *
 * @see drupal_add_library
 */
function moha_ui_library() {
  /** @example  drupal_add_library(__MOHA_UI, __MOHA_UI); */
  $libraries[__MOHA_UI] = array(
    'title' => MOHA_UI,
    'website' => 'https://www.moha.online/',
    'version' => '1.0',
    'css' => array(
      MOHA_UI__PATH . '/bower_components/font-awesome/css/font-awesome.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/Ionicons/css/ionicons.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/weui/dist/style/weui.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/swiper/dist/css/swiper.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/libs/ckeditor/ckeditor-4.7.3-full/plugins/codesnippet/lib/highlight/styles/monokai-sublime.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/css/moha_ui.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'js' => array(
      MOHA_UI__PATH . '/bower_components/lodash/dist/lodash.js' => array(),
      MOHA_UI__PATH . '/libs/weui.js/dist/weui.js' => array(),
      MOHA_UI__PATH . '/bower_components/swiper/dist/js/swiper.js' => array(),
      MOHA_UI__PATH . '/libs/jquery.rating-stars/dist/js/jquery.rating-stars.js' => array(),
      MOHA_UI__PATH . '/libs/ckeditor/ckeditor-4.7.3-full/plugins/codesnippet/lib/highlight/highlight.pack.js' => array(),
      MOHA_UI__PATH . '/js/moha_ui.ajax.js' => array(),
      MOHA_UI__PATH . '/js/moha_ui.js' => array(),
    ),
  );

  /** @example  drupal_add_library(__MOHA_UI, __MOHA_UI); */
  $libraries[__MOHA_UI_ADMIN] = array(
    'title' => 'Moha UI Admin',
    'website' => 'https://www.moha.online/admin/',
    'version' => '1.0',
    'css' => array(
      MOHA_UI__PATH . '/bower_components/bootstrap/dist/css/bootstrap.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/bootstrap/dist/css/bootstrap-theme.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/admin-lte/dist/css/AdminLTE.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/bower_components/admin-lte/dist/css/skins/skin-blue.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      MOHA_UI__PATH . '/css/moha_ui.admin.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'js' => array(
      MOHA_UI__PATH . '/bower_components/bootstrap/dist/js/bootstrap.js' => array(),
      MOHA_UI__PATH . '/bower_components/admin-lte/dist/js/adminlte.js' => array(),
      MOHA_UI__PATH . '/bower_components/echarts/dist/echarts.js' => array(),
      MOHA_UI__PATH . '/js/moha_ui.admin.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_library_alter().
 *
 * @inheritdoc
 */
function moha_ui_library_alter(&$libraries, $module) {
  /** @link https://www.drupal.org/docs/7/theming/using-newer-versions-of-jquery @endlink */
  if ($module === 'system') {
    // Modified jQuery version to 1.12.4 to support fancy dashboard.
    global $theme_key;
    $version_2 = variable_get('jquery_update_jquery_admin_version', '1.4');
    $version_3 = moha_n2e(theme_get_setting('jquery_update_jquery_version', $theme_key), '1.4');

    if (version_compare($version_2, '1.10') >= 0 || version_compare($version_3, '1.10') >= 0) {
      $libraries['jquery']['js']['misc/jquery.js']['data'] = MOHA_UI__PATH . '/libs/jquery/jquery-1.12.4.js';
    }
  }
}

/**
 * Implements hook_libraries_info().
 *
 * @see libraries_load();
 */
function moha_ui_libraries_info() {

  $libraries[__MOHA_UI] = array(
    'name' => MOHA_UI,
    'library path' => MOHA_UI__PATH,
    'version' => '1.0',
    'files' => array(
      'js' => array(
        'libs/lodash.js',
        'libs/weui.js/dist/weui.js',
        'libs/jquery.rating-stars/dist/js/jquery.rating-stars.js',
        'js/moha_ui.ajax.js',
        'js/moha_ui.js',
      ),
      'css' => array(
        'libs/weui/dist/style/weui.css',
        'libs/font-awesome/css/font-awesome.css',
        'css/moha_ui.css',
      ),
      'php' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function moha_ui_menu() {
  $items['moha/homepage'] = array(
    'title' => 'Homepage',
    'weight' => -399,
    'description' => t('Homepage of the site.'),
    /* @see moha_ui_homepage() */
    'page callback' => 'moha_ui_homepage',
    'access arguments' => array('access content'),
    'file' => 'moha_ui.home.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/dashboard'] = array(
    'title' => 'Dashboard',
    'weight' => -99,
    'description' => t('Dashboard of Moha modules.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_dashboard_form() */
    'page arguments' => array('moha_ui_dashboard_form'),
    'access arguments' => array(MOHA__PERMISSION__ROOT),
    'file' => 'moha_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Move 'Clone' action link to tab area.
 *
 * Implements hook_menu_alter().
 */
function moha_ui_menu_alter(&$items) {
  if (isset($items['node/%node/clone/%clone_token'])) {
    $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
  }
}

/**
 * Implements hook_theme().
 */
function moha_ui_theme($existing, $type, $theme, $path) {
  $themes = array(
    'moha_ui_rating' => array(
      'render element' => 'element',
    ),
    'moha_ui_form_element' => array(
      'render element' => 'element',
    ),
    'moha_ui_webform_element' => array(
      'render element' => 'element',
    ),
    'moha_ui_image_mobile_uploader_widget_multiple' => array(
      'render element' => 'element',
    ),
    // Image preview and image uploader widget.
    'moha_ui_image_mobile_uploader_widget' => array(
      'render element' => 'element',
    ),
    'moha_ui_image_mobile_uploader_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL),
    ),
  );

  // Declare common templates.
  $themes['html__admin__moha__dashboard'] = array(
    'render element' => 'elements',
    'template' => 'templates/html--admin--moha--dashboard',
  );

  $themes['page__admin__moha__dashboard'] = array(
    'render element' => 'elements',
    'template' => 'templates/page--admin--moha--dashboard',
  );

  $themes['moha_ui__tpl__page'] = array(
    'render element' => 'elements',
    'template' => 'templates/page--moha',
  );

  $themes['moha_ui__tpl__homepage_contents'] = array(
    'render element' => 'element',
    'template' => 'templates/page--moha-ui--homepage-contents',
  );

  $themes['moha_ui__tpl__dashboard_block_wrapper'] = array(
    'render element' => 'element',
    'template' => 'templates/dashboard-block-wrapper',
  );

  /** @see moha_ui_dashboard_chart_expense_pre_render() */
  $themes['moha_ui_dashboard_block'] = array(
    'render element' => 'element',
    'template' => 'templates/moha-ui-dashboard-block',
  );

  return $themes;
}

/**
 * Implements hook_page_alter().
 *
 * Add frontend libraries for dashboard.
 */
function moha_ui_page_alter(&$page) {
  $path = current_path();

  if (substr($path, 0, 20) === 'admin/moha/dashboard') {

    // Replace original block.tpl.php template to avoid complex html structure to apply on auto generated system_main block.
    if (isset($page['content']['system_main']['#theme_wrappers'])) {
      foreach ($page['content']['system_main']['#theme_wrappers'] as $index => $value) {
        if ($value == 'block') {
          $page['content']['system_main']['#theme_wrappers'][$index] = 'moha_ui__tpl__dashboard_block_wrapper';
        }
      }
    }

    $page['content']['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);
    $page['content']['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI_ADMIN);

    $html5shiv = array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => '',
      '#weight' => 999,
      '#attributes' => array( // Set up an array of attributes inside the tag
        'type' => 'text/javascript',
        'src' =>  url(MOHA_UI__PATH . '/bower_components/html5shiv/dist/html5shiv.js'),
      ),
      '#prefix' => '<!--[if lte IE 9]>',
      '#suffix' => '<![endif]-->',
    );

    $respond = array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => '',
      '#weight' => 999,
      '#attributes' => array( // Set up an array of attributes inside the tag
        'type' => 'text/javascript',
        'src' =>  url(MOHA_UI__PATH . '/bower_components/respond/dist/respond.min.js'),
      ),
      '#prefix' => '<!--[if lte IE 9]>',
      '#suffix' => '<![endif]-->',
    );

    drupal_add_html_head($html5shiv, 'html5shiv');
    drupal_add_html_head($respond, 'respond');
  }
}

/**
 * Generates and returns dashboard sidebar HTML.
 *
 * @return string rendered HTML.
 *
 * @link https://fontawesome.com/v4.7.0/icons/ @endlink
 */
function moha_ui_dashboard_sidebar_build() {
  $render = array();
  foreach (module_implements('moha_ui_dashboard_sidebar') as $module) {
    $function = $module . '_moha_ui_dashboard_sidebar';
    $item = $function();
    $render = drupal_array_merge_deep($render, $item);
  }

  $output = '';
  $current_path = current_path();
  foreach ($render as $section_name => $items) {
    $section_name = drupal_ucfirst($section_name);
    $output .= "<li class='header'>$section_name</li>";
    uasort($items, 'element_sort');
    foreach ($items as $path => $item) {
      if ($current_path == $path) {
        $output .= '<li class="active">' . drupal_render($item) . '</li>';
      }
      else {
        $output .= '<li>' . drupal_render($item) . '</li>';
      }
    }
  }

  return $output;
}

/**
 * Implements hook_moha_ui_dashboard_sidebar().
 */
function moha_ui_moha_ui_dashboard_sidebar() {
  $items['features']['admin/moha/dashboard'] = array(
    '#markup' => l('<i class="fa fa-tachometer"></i> <span>' . t('Overview') . '</span>', 'admin/moha/dashboard', array('html' => TRUE)),
    '#weight' => -99,
  );

  return $items;
}

/**
 * Implements hook_html_head_alter().
 */
function moha_ui_html_head_alter(&$head_elements) {
  $generator = moha_variable_get('moha_ui__var__generator', t('Moha Online (https://www.moha.online)'));
  if(isset($head_elements['system_meta_generator']) && !empty($generator)) {
    $head_elements['system_meta_generator']['#attributes']['content'] = $generator;
  }
}

/**
 * Wrapper moha_ui_rating as form item, append error css class when validation
 * is failed.
 *
 * @inheritdoc
 *
 * @see \theme_form_element()
 */
function theme_moha_ui_form_element($variables) {
  $element = &$variables['element'];
  _form_set_class($element);

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  // Add element's #type and #name as class to aid with JS/CSS selectors.
  $attributes['class'] = array('form-item');
  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }

  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] = drupal_array_merge_deep($attributes['class'], $element['#attributes']['class']);
  }
  $output = '<div' . drupal_attributes($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      $output .= ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}

/**
 * Replacement for theme_webform_element().
 *
 * @see theme_webform_element
 */
function theme_moha_ui_webform_element($variables) {
  $element = $variables['element'];
  _form_set_class($element);

  $output = '<div ' . drupal_attributes($element['#wrapper_attributes']) . '>' . "\n";
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . webform_filter_xss($element['#field_prefix']) . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . webform_filter_xss($element['#field_suffix']) . '</span>' : '';

  // Generate description for above or below the field.
  $above = !empty($element['#webform_component']['extra']['description_above']);
  $description = array(
    FALSE => '',
    TRUE => !empty($element['#description']) ? ' <div class="description">' . $element['#description'] . "</div>\n" : '',
  );

  // If #children does not contain an element with a matching @id, do not
  // include @for in the label.
  if (isset($variables['element']['#id']) && strpos($element['#children'], ' id="' . $variables['element']['#id'] . '"') === FALSE) {
    $variables['element']['#id'] = NULL;
  }

  switch ($element['#title_display']) {
    case 'inline':
      $output .= $description[$above];
      $description[$above] = '';
    case 'before':
    case 'invisible':
    case 'after':
      $title = ' ' . theme('form_element_label', $variables);
      break;
  }

  $children = ' ' . $description[$above] . $prefix . $element['#children'] . $suffix;
  switch ($element['#title_display']) {
    case 'inline':
    case 'before':
    case 'invisible':
      $output .= $title;
      $output .= $children;
      break;

    case 'after':
      $output .= $children;
      $output .= $title;
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= $children;
      break;
  }
  $output .= "\n";

  $output .= $description[!$above];
  $output .= "</div>\n";

  return $output;
}

/**
 * Implements hook_element_info().
 *
 * @see https://www.drupal.org/node/169815
 */
function moha_ui_element_info() {

  $elements = array(
    /* Element: Moha UI - Rating. */
    'moha_ui_rating' => array(
      // Element carries a value.
      '#input' => TRUE,

      // Do not provide autocomplete.
      '#autocomplete_path' => FALSE,

      // Customize wrapper theme to mark error when validation failed.
      '#theme_wrappers' => array('moha_ui_form_element'),
      '#theme' => array('moha_ui_rating'),
      '#value_callback' => 'moha_ui_rating_value',
      '#process' => array('moha_ui_rating_process'),
      '#element_validate' => array('moha_ui_rating_validate'),
      '#moha_ui_rating_max_score' => 5,
      '#moha_ui_rating_threshold_score' => 3,
      '#default_value' => array(
        'rating' => 0,    // rating score.
        'reason' => '',   // low score reason.
      ),
    ),
  );

  $elements['moha_ui_dashboard_chart_expense'] = array(
    '#input' => FALSE,
    /** @see moha_ui_theme() */
    '#theme' => array('moha_ui_dashboard_block'),
    /** @see moha_ui_dashboard_chart_expense_pre_render() */
    '#pre_render' => array('moha_ui_dashboard_chart_expense_pre_render'),
    '#content_wrapper_selector' => 'moha-ui-dashboard-expense-chart-container',
    '#data' => array(),
  );

  return $elements;
}

/**
 * Determines the values for a moha_ui_rating form element.
 *
 * @param $element
 *   The form element whose value is being populated.
 * @param $input
 *   The incoming input to populate the form element. If this is FALSE,
 *   the element's default value should be returned.
 *
 * @return array
 *   rating score and low score reason.
 */
function moha_ui_rating_value(&$element, $input = FALSE, $form_state) {
  $return = $element['#default_value'];

  if ($input !== FALSE) {
    $return = $form_state['input'][$element['#name']];
  }

  return $return;
}

/**
 * Expands a moha_ui_rating element into rating, details.
 */
function moha_ui_rating_process($element, &$form_state, $complete_form) {
  $value = isset($element['#value'])?$element['#value']:array();

  $wrapper_class = drupal_clean_css_identifier($element['#name']);

  $score = isset($element['#value']['rating'])?$element['#value']['rating']:0;
  $max_score = $element['#moha_ui_rating_max_score'];
  $threshold_score = $element['#moha_ui_rating_threshold_score'];

  // Recover or initial score.
  $rating_items_placeholder = '';
  for ($i = 0; $i < $max_score; $i++) {
    if ($i < $score) {
      $rating_items_placeholder .= <<<RATING_ITEM
        <div class="rating-star is--active">
           <i class="fa fa-star"></i>
        </div>
RATING_ITEM;
    }
    else {
      $rating_items_placeholder .= <<<RATING_ITEM
        <div class="rating-star">
           <i class="fa fa-star"></i>
        </div>
RATING_ITEM;
    }
  }

  $element['rating']['#prefix'] = "<div class='rating-stars $wrapper_class'>";
  $element['rating']['#suffix'] = "</div>";
  $element['rating']['rating_area'] = array(
    '#markup' => <<< RATING_CONTAINER
      <div class="rating-stars-container">
      $rating_items_placeholder
      </div>
RATING_CONTAINER
  ,
  );
  $element['rating']['value'] = array(
    '#name' => $element['#name'] . '[rating]',
    '#type' => 'hidden',
    '#default_value' => $score,
  );

  $reason = empty($value['reason'])?'':$value['reason'];

  $element['reason'] = array(
    '#name' => $element['#name'] . '[reason]',
    '#title' => t('Rating reason'),
    '#type' => 'textfield',
    '#id' => $element['#id'] . '-reason',
    '#default_value' => $reason,
  );

  /** @see https://www.drupal.org/docs/7/api/javascript-api/managing-javascript-in-drupal-7 */
  $element['rating']['#attached'] = array(
    'js' => array(
      array(
        'data' => array(
          __MOHA_UI => array(
            'mohaUIRatingElements' => array(
              array(
                'wrapper' => $wrapper_class,
                'score' => $score,
                'maxScore' => $max_score,
                'thresholdScore' => $threshold_score,
                'required' => $element['#required'],
              ),
            ),
          ),
        ),
        'type' => 'setting'
      ),
      MOHA_UI__PATH . '/elements/moha_ui_rating.js',
    ),
    'css' => array(
      MOHA_UI__PATH . '/elements/moha_ui_rating.css',
    ),
    'library' => array(
      array(__MOHA_UI, __MOHA_UI),
    ),
  );

  return $element;
}

/**
 * Renders moha_ui_rating element.
 *
 * @param $variables
 */
function theme_moha_ui_rating($variables) {
  $element = $variables['element'];
  $error = form_get_error($element);
  if ($error) {
    $element['rating']['#attached']['js'][0]['data'][__MOHA_UI]['mohaUIRatingElements'][0]['error'] = TRUE;

  }
  $output = drupal_render($element['rating']) . drupal_render($element['reason']);
  return $output;
}

/**
 * Validate moha_ui_rating value.
 *
 * @param $element
 * @param $form_state
 *
 * @return bool
 *   returns FALSE if validation is failed.
 */
function moha_ui_rating_validate($element, &$form_state) {
  $require = isset($element['#required']) ? $element['#required'] : FALSE;
  $threshold_score = isset($element['#moha_ui_rating_threshold_score']) ? $element['#moha_ui_rating_threshold_score'] : 0;

  if ($require && $threshold_score > 0) {
    $rating = isset($element['#value']['rating']) ? $element['#value']['rating'] : 0;
    $reason = isset($element['#value']['reason']) ? $element['#value']['reason'] : '';

    if ($rating <= $threshold_score && empty($reason)) {
      form_error($element, t('Please provide reason why @rating point(s) is(are) scored against @name field.',
        array(
          '@name' => $element['#title'],
          '@rating' => $rating,
        )
      ));
      form_error($element['reason']);

      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Prepares data for being rendered as chart.
 *
 * @param $element
 *   A render array.
 *
 * @return array
 *   The passed-in elements as well as data for rendering.
 *
 * @see drupal_render()
 */
function moha_ui_dashboard_chart_expense_pre_render($element) {
  $element['#id'] = drupal_html_id('moha_ui_dashboard_chart_expense');

  if (isset($element['#data'])) {
    foreach ($element['#data'] as $i => $data) {
      // JS rendering engine need to know where to insert chart canvas.
      $element['#data'][$i]['wrapper_id'] = $element['#id'];
    }

    $element['#attached']['js'][] = array(
      'data' => array(__MOHA_UI => array(
        'expenses_charts' => $element['#data'],
      ),),
      'type' => 'setting'
    );
    $element['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);
    $element['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI_ADMIN);
  }

  return $element;
}

/**
 * Render statistic data in row format.
 *
 * @param $expenses
 *
 * @param $column_num
 *
 * @return string
 */
function moha_ui_dashboard_row_statistic($expenses, $column_num = 7) {

  $html = "";
  $previous_row = array_fill(0, $column_num, 0);

  foreach ($expenses as $i => $expense) {
    if (($i + 1) % $column_num == 1) {
      $html .= "<div class='row moha-ui-row-flex'>";
      $row = 0;
    }

    $percentage = '';
    if ($i < $column_num) {
      $previous_row[$i] = $expense;
    }
    else {
      if (!empty($expense)) {
        $percentage = round(($expense - $previous_row[$i%$column_num]) / $previous_row[$i%$column_num] * 100, 2);
        $percentage = moha_ui_dashboard_render_percentage($percentage);
      }
    }

    $html .= <<<DAILY_HTML
  <div class="description-block border-right">
    <div class="description-text">$expense</div>
    $percentage
  </div>
DAILY_HTML;

    $row += $previous_row[$i%$column_num] = $expense;

    if (($i + 1) % $column_num == 0) {
      if (!empty($row_previous)) {
        $percentage = round(($row - $row_previous) / $row_previous * 100, 2);
        $percentage = moha_ui_dashboard_render_percentage($percentage);
      }

      $html .= <<<DAILY_HTML
  <div class="description-block border-right">
    <div class="description-text">$row</div>
    $percentage
  </div>
DAILY_HTML;
      $html .= "</div>";

      $row_previous = $row;
    }
  }

  $html .= "</div>";

  return $html;
}

/**
 * Render percentage number.
 *
 * @param $percentage
 *
 * @return string
 */
function moha_ui_dashboard_render_percentage($percentage) {
  if ($percentage > 0) {
    $percentage_class = 'text-red';
    $icon_class = 'fa-caret-up';
  }
  else if ($percentage < 0) {
    $percentage_class = 'text-green';
    $icon_class = 'fa-caret-down';
  }
  else {
    $percentage_class = 'text-yellow';
    $icon_class = '';
  }
  $percentage = "<span class='description-percentage $percentage_class'><i class='fa $icon_class'></i> $percentage%</span>";

  return $percentage;
}

/**
 * Implements hook_field_info().
 *
 * @see https://api.drupal.org/api/drupal/modules!field!field.module/group/field/7.x
 */
function moha_ui_field_info() {

}

/**
 * Implements hook_field_widget_info().
 */
function moha_ui_field_widget_info() {

//  .ajax-progress-throbber
//  .ajax-progress-throbber .message
//  .ajax-progress-throbber .throbber

  $widgets = array(
    MOHA_UI__WIDGET__IMAGE_MOBILE_UPLOADER => array(
      'label' => t('Moha UI: Image Mobile Uploader'),
      'field types' => array('image'),
      'settings' => array(
        /** @see https://www.antimath.info/css/change-throbber-in-drupal-7/ */
        'progress_indicator' => 'loading',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 *
 * @inheritdoc
 */
function moha_ui_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {
    default:
      return $element;

    /* Return Moha UI widget. */
    case MOHA_UI__WIDGET__IMAGE_MOBILE_UPLOADER:

      $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

      /**
       * Original #process flow of image elements:
       *
       * @see file_field_widget_process_multiple()
       * @see file_managed_file_process()
       * @see file_field_widget_process()
       * @see image_field_widget_process() changes #theme to image_widget.
       *
       * Original #theme flow of image elements:
       *
       * @see theme_file_widget_multiple()
       * @see theme_image_widget()
       * @see theme_file()
       */
      foreach (element_children($elements) as $delta) {
        if ($elements[$delta]['#type'] == 'managed_file') {
          /** @see moha_ui_image_mobile_uploader_widget_process() */
          $elements[$delta]['#process'][] = 'moha_ui_image_mobile_uploader_widget_process';
        }
      }

      // When multiple images are allowed in current image field,
      // Use Moha UI multiple template to render preview list responsively.
      if (isset($elements['#theme'])) {
        /** @see theme_moha_ui_image_mobile_uploader_widget_multiple() */
        $elements['#theme'] = 'moha_ui_image_mobile_uploader_widget_multiple';
      }

      return $elements;
  }

}

/**
 * An element #process callback for the moha_ui_image_mobile_uploader widget.
 *
 * Replace moha_ui_image_mobile_uploader as #theme to render.
 */
function moha_ui_image_mobile_uploader_widget_process($element, &$form_state, $form) {
  /** @see theme_moha_ui_image_mobile_uploader_widget() */
  $element['#theme'] = 'moha_ui_image_mobile_uploader_widget';
  $element['#attached']['library'][] = array('system', 'ui');
  $element['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);

  return $element;
}

/**
 * Returns HTML for a group of file upload widgets.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 *
 * @see theme_file_widget_multiple()
 *   Removes draggable table feature.
 *
 * @ingroup themeable
 */
function theme_moha_ui_image_mobile_uploader_widget_multiple($variables) {
  $element = $variables['element'];

  // Special ID and classes for draggable tables.
  $table_id = $element['#id'] . '-table';

  $wrapperSelector = '#' . $element['#id'];

  drupal_add_js(array(
    __MOHA_UI => array(
      'mobileImageWidgetWrapperSelector' => array($wrapperSelector),
    )
  ), 'setting');

  // Build up a table of applicable fields.
  $headers = array();
  $headers[] = t('Uploaded');
  if ($element['#display_field']) {
    $headers[] = array(
      'data' => t('Display'),
      'class' => array('checkbox'),
    );
  }
  $headers[] = t('Operations');

  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = array();
  foreach (element_children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  /** @see _field_sort_items_value_helper() */
  usort($widgets, '_field_sort_items_value_helper');

  $weui_preview = '';

  $rows = array();
  foreach ($widgets as $key => &$widget) {
    // Save the uploading row for last.
    if ($widget['#file'] == FALSE) {
      $widget['#title'] = $element['#file_upload_title'];
      $widget['#description'] = $element['#file_upload_description'];
      continue;
    }

    // Generate weui preview.
    static $weui_preview_template = '<li class="weui-uploader__file" data-id="!id" data-img="!img" style="background-image: url(!url);"></li>';

    if (isset($widget['#value']['fid'])) {
      if (isset($widget['#value']['uri'])) {
        $weui_preview .= format_string($weui_preview_template, [
          '!id' => $widget['remove_button']['#id'],
          '!img' => image_style_url('large', $widget['#value']['uri']),
          // Original file.
          // '!img' => file_create_url($widget['#value']['uri']),
          '!url' => image_style_url('thumbnail', $widget['#value']['uri']),
        ]);
      }
      else {
        $file = file_load($widget['#value']['fid']);
        $weui_preview .= format_string($weui_preview_template, [
          '!id' => $widget['remove_button']['#id'],
          '!img' => image_style_url('large', $file->uri),
          '!url' => image_style_url('thumbnail', $file->uri),
        ]);
      }
    }

    // Delay rendering of the buttons, so that they can be rendered later in the
    // "operations" column.
    $operations_elements = array();
    foreach (element_children($widget) as $sub_key) {
      if (isset($widget[$sub_key]['#type']) && $widget[$sub_key]['#type'] == 'submit') {
        hide($widget[$sub_key]);
        $operations_elements[] = &$widget[$sub_key];
      }
    }

    // Delay rendering of the "Display" option and the weight selector, so that
    // each can be rendered later in its own column.
    if ($element['#display_field']) {
      hide($widget['display']);
    }

    hide($widget['_weight']);

    // Render everything else together in a column, without the normal wrappers.
    $widget['#theme_wrappers'] = array();
    $information = drupal_render($widget);

    // Render the previously hidden elements, using render() instead of
    // drupal_render(), to undo the earlier hide().
    $operations = '';

    /** $operation_element['#ajax']['path']; */
    foreach ($operations_elements as $operation_element) {
      $operations .= render($operation_element);
    }
    $display = '';
    if ($element['#display_field']) {
      unset($widget['display']['#title']);
      $display = array(
        'data' => render($widget['display']),
        'class' => array('checkbox'),
      );
    }

    // Arrange the row with all of the rendered columns.
    $row = array();
    $row[] = $information;
    if ($element['#display_field']) {
      $row[] = $display;
    }
    $row[] = $operations;
    $rows[] = array(
      'data' => $row,
      'class' => isset($widget['#attributes']['class']) ? $widget['#attributes']['class'] : array(),
    );
  }
  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('moha_ui_hide'))));

  if ($weui_preview) {
    $output .= '<ul class="weui-uploader__files moha_ui_image_mobile_preview">' . $weui_preview . '</ul>';
  }

  $output .= drupal_render_children($element);
  return $output;
}

/**
 * Returns HTML for a moha_ui_image_mobile_uploader widget.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the image field widget.
 *
 * @see theme_image_widget()
 * @see theme_moha_ui_image_mobile_uploader_widget_multiple()
 *
 * @ingroup themeable
 */
function theme_moha_ui_image_mobile_uploader_widget($variables) {
  $element = $variables['element'];
  $output = '';
  $output .= '<div class="image-widget form-managed-file clearfix">';

  if (isset($element['preview'])) {
    $output .= '<div class="image-preview">';
    $output .= drupal_render($element['preview']);
    $output .= '</div>';

    $output .= '<div class="image-widget-data moha_ui-image-preview-meta">';
    hide($element['filename']);
    hide($element['alt']);
    hide($element['title']);
    $output .= drupal_render_children($element);
    $output .= '</div>';
  }
  else {
    $element['upload']['#prefix'] = '<div class="moha_ui_image_mobile_uploader_preview"><ul class="weui-uploader__files"></ul></div><div class="weui-uploader__input-box">';
    $element['upload']['#suffix'] = '</div>';
    $element['upload']['#attributes']['class'][] = 'weui-uploader__input';

    /** @link https://stackoverflow.com/questions/3828554/how-to-allow-input-type-file-to-accept-only-image-files @unlink */
    if (!empty($element['#upload_validators']['file_validate_extensions'])) {
      $extensions = explode(' ', $element['#upload_validators']['file_validate_extensions'][0]);
      $element['upload']['#attributes']['accept'] = '.' . implode(',.', $extensions);
    }
    // Alternative way to limit file type when upload images.
    // $element['upload']['#attributes']['accept'] = 'image/*';

    $element['upload']['#attached']['js'][] = MOHA_UI__PATH . '/js/moha_ui_image_mobile_uploader.js';
    $output .= '<div class="image-widget-data moha_ui_image_mobile_uploader">';
    $output .= drupal_render_children($element);
    $output .= '</div>';
  }

  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function moha_ui_field_formatter_info() {

}

/**
 * Implements hook_webform_component_info().
 */
function moha_ui_webform_component_info() {
  /* Only 16 chars are allowed as Webform component machine name. */
  $components['moha_ui_rating'] = array(
    'label' => t('Moha UI - Rating'),
    'description' => t('Provides Rating field for WebForm.'),
    'features' => array(
      // This component includes an analysis callback. Defaults to TRUE.
      'analysis' => TRUE,

      // Add content to CSV downloads. Defaults to TRUE.
      'csv' => TRUE,

      // This component supports default values. Defaults to TRUE.
      'default_value' => FALSE,

      // This component supports a description field. Defaults to TRUE.
      'description' => FALSE,

      // Show this component in e-mailed submissions. Defaults to TRUE.
      'email' => TRUE,

      // Allow this component to be used as an e-mail FROM or TO address.
      // Defaults to FALSE.
      'email_address' => FALSE,

      // Allow this component to be used as an e-mail SUBJECT or FROM name.
      // Defaults to FALSE.
      'email_name' => TRUE,

      // This component may be toggled as required or not. Defaults to TRUE.
      'required' => TRUE,

      // This component supports a title attribute. Defaults to TRUE.
      'title' => TRUE,

      // This component has a title that can be toggled as displayed or not.
      'title_display' => TRUE,

      // This component has a title that can be displayed inline.
      'title_inline' => TRUE,

      // If this component can be used as a conditional SOURCE. All components
      // may always be displayed conditionally, regardless of this setting.
      // Defaults to TRUE.
      'conditional' => TRUE,

      // If this component allows other components to be grouped within it
      // (like a fieldset or tabs). Defaults to FALSE.
      'group' => FALSE,

      // If this component can be used for SPAM analysis.
      'spam_analysis' => FALSE,

      // If this component saves a file that can be used as an e-mail
      // attachment. Defaults to FALSE.
      'attachment' => FALSE,

      // If this component reflects a time range and should use labels such as
      // "Before" and "After" when exposed as filters in Views module.
      'views_range' => FALSE,

      // Set this to FALSE if this component cannot be used as a private
      // component. If this is not FALSE, in your implementation of
      // _webform_defaults_COMPONENT(), set ['extra']['private'] property to
      // TRUE or FALSE.
      'private' => FALSE,
    ),

    // Specify the conditional behaviour of this component.
    // Examples are 'string', 'date', 'time', 'numeric', 'select'.
    // Defaults to 'string'.
    'conditional_type' => 'numeric',

    'file' => 'webform/components/moha_ui_rating.inc',
  );

  return $components;
}
