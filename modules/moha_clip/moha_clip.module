<?php
/**
 * @file
 */

/**
 * Human name.
 */
define('MOHA_CLIP', 'Moha Clip');

/**
 * Machine name.
 */
define('__MOHA_CLIP', 'moha_clip');

/**
 * moha_clip__variables.
 */
define('MOHA_CLIP__VARIABLES', __MOHA_CLIP . '__variables');

/**
 * /sites/all/modules/custom/moha/modules/moha_clip.
 */
define('MOHA_CLIP__PATH', base_path() . drupal_get_path('module', __MOHA_CLIP));

/**
 * sites/all/modules/custom/moha/modules/moha_clip.
 */
define('MOHA_CLIP__RELATIVE_PATH', drupal_get_path('module', __MOHA_CLIP));

/**
 * Permission: view moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__VIEW', 'view ' . __MOHA_CLIP . ' content');

/**
 * Permission: create moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__CREATE', 'create ' . __MOHA_CLIP . ' content');

/**
 * Permission: edit own moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__EDIT_OWN', 'edit own ' . __MOHA_CLIP . ' content');

/**
 * Permission: edit any moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__EDIT_ANY', 'edit any ' . __MOHA_CLIP . ' content');

/**
 * Permission: delete own moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__DELETE_OWN', 'delete own ' . __MOHA_CLIP . ' content');

/**
 * Permission: delete any moha_clip content.
 */
define('MOHA_CLIP__PERMISSION__DELETE_ANY', 'delete any ' . __MOHA_CLIP . ' content');

/**
 * moha_clip__role__manager.
 */
define('MOHA_CLIP__ROLE__MANAGER', __MOHA_CLIP . '__role__manager');

/**
 * moha_clip__role__admin.
 */
define('MOHA_CLIP__ROLE__ADMIN', __MOHA_CLIP . '__role__admin');

/**
 * moha_clip__text_format.
 */
define('MOHA_CLIP__TEXT_FORMAT', __MOHA_CLIP . '__text_format');

/**
 * moha_clip__ck_profile.
 */
define('MOHA_CLIP__CK_PROFILE', __MOHA_CLIP . '__ck_profile');

/**
 * Create necessary roles and permissions.
 */
function _moha_clip_prepare_roles_and_permissions() {
  $admin_permissions = array();
  $admin_permissions[] = MOHA_CLIP__PERMISSION__CREATE;
  $admin_permissions[] = MOHA_CLIP__PERMISSION__EDIT_ANY;
  $admin_permissions[] = MOHA_CLIP__PERMISSION__DELETE_ANY;

  $manager_permissions = array();
  $manager_permissions[] = MOHA_CLIP__PERMISSION__CREATE;
  $manager_permissions[] = MOHA_CLIP__PERMISSION__EDIT_OWN;
  $manager_permissions[] = MOHA_CLIP__PERMISSION__EDIT_ANY;

  $user_permissions = array();
  $user_permissions[] = MOHA_CLIP__PERMISSION__VIEW;

  moha_grant_permissions_2_role(MOHA_CLIP__ROLE__ADMIN, $admin_permissions);
  moha_grant_permissions_2_role(MOHA_CLIP__ROLE__MANAGER, $manager_permissions);
}

/**
 * Create IMCE profile for Moha Clip Manager and Moha Clip Admin.
 */
function _moha_clip_prepare_imce_profile() {

  $profile = array(
    'name' => 'Moha Clip Manager Profile',
    'usertab' => 1,
    'filesize' => 0,
    'quota' => 0,
    'tuquota' => 0, // Total quotation.
    'extensions' => 'gif png jpg jpeg',
    'dimensions' => '1200x1200',
    'filenum' => 0,
    'mkdirnum' => 0,
    'directories' => array(),
    'thumbnails' => array()
  );

  // File upload destination folder.
  $profile['directories'][] = array(
    'name' => '%uid',
    'subnav' => TRUE,
    'browse' => TRUE,
    'upload' => TRUE,
    'thumb' => TRUE,
    'delete' => TRUE,
    'resize' => TRUE,
    'mkdir' => TRUE,
    'rmdir' => TRUE,
  );

  $profiles = variable_get('imce_profiles', array());
  $profiles[] = $profile;
  end($profiles);
  $profile_id = key($profiles);
  variable_set('imce_profiles', $profiles);

  moha_grant_imce_profile_2_role(MOHA_CLIP__ROLE__ADMIN, $profile_id);
  moha_grant_imce_profile_2_role(MOHA_CLIP__ROLE__MANAGER, $profile_id);
}

/**
 * Create Moha Clip Text Format.
 */
function _moha_clip_prepare_text_format() {
  $format = array(
    'format' => MOHA_CLIP__TEXT_FORMAT,
    'name' => 'Moha Clip Format',
    'weight' => -10,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $format = (object) $format;
  filter_format_save($format);

  // Grant text format permission to related roles.
  $role_names = array(
    MOHA_CLIP__ROLE__ADMIN,
    MOHA_CLIP__ROLE__MANAGER
  );

  if ($permission = filter_permission_name($format)) {
    foreach ($role_names as $role_name) {
      $role = user_role_load_by_name($role_name);
      if ($role) {
        user_role_grant_permissions($role->rid, array($permission));
      }
    }
  }

}

/**
 * Implements hook_element_info_alter().
 */
function moha_clip_element_info_alter(&$type) {
  // Change text format processing on elements to clean UI.
  if (isset($type['text_format'])) {
    // Default function: filter_process_format
    // Add process function: _moha_clip__text_format_process
    $type['text_format']['#process'][] = '_'. MOHA_CLIP__TEXT_FORMAT . '_process';
  }
}

/**
 * Hides help link, hides guidelines, hides text format select drop-down menu.
 */
function _moha_clip__text_format_process($element) {
  if ($element['#format'] != MOHA_CLIP__TEXT_FORMAT) {
    return $element;
  }

  // Remove type: fieldset, which causes 1px grey border.
  unset($element['format']['#type']);
  unset($element['format']['format']['#title']);
//  $element['format']['format']['#access'] = FALSE;
  $element['format']['help']['#access'] = FALSE;
  $element['format']['guidelines']['#access'] = FALSE;

  return $element;
}

/**
 * Create CKEditor profile for Moha Clip.
 */
function _moha_clip_prepare_ckeditor_profile() {

  // Prepare CKEditor profile.
  // Enable HTML source highlight by default.
  $config_js = '
config.startupOutlineBlocks = true;
config.extraPlugins = \'codesnippet\';
config.extraPlugins = \'codemirror\';
config.codeSnippet_theme = \'monokai_sublime\';
config.extraPlugins = \'autogrow\';
config.autoGrow_maxHeight = 0;
config.autoGrow_onStartup = true;
config.templates_files = [ "' . MOHA_CLIP__PATH . '/ckeditor/templates.js" ];
config.templates = \'moha\';
config.templates_replaceContent = false;
config.keystrokes = [
  [ CKEDITOR.CTRL + 83, \'moha_save\' ]
];
';

  $file_browser = 'imce';

  $profile_data = array(
    'ss' => 2,
    'toolbar' => "[
    ['CodeSnippet', 'Templates', 'Styles'], ['PasteFromWord', '-', 'Image', 'HorizontalRule', 'Link', 'Unlink', 'Anchor'],
    ['Bold', 'Italic', 'Underline', 'NumberedList', 'BulletedList', 'TextColor'], ['Maximize', 'Source']
]",
    'expand' => 't',
    'default' => 't',
    'show_toggle' => 'f',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'allowed_content' => 'f',
    'extraAllowedContent' => '',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' => array(
      'custom_formatting_options' => array(
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'self',
    'css_path' => MOHA_CLIP__PATH . '/ckeditor/styles.css',
    'css_style' => 'self',
    'styles_path' => MOHA_CLIP__PATH . '/ckeditor/styles.js',
    'filebrowser' => $file_browser,
    'filebrowser_image' => $file_browser,
    'filebrowser_flash' => $file_browser,
    'UserFilesPath' => '%b%f%u/',
    'UserFilesAbsolutePath' => '%d%b%f%u/',
    'forcePasteAsPlainText' => 't',
    'html_entities' => 'f',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 't',
    'js_conf' => $config_js,
    'loadPlugins' => array(
      'codesnippet' => array(
        'name' => 'codesnippet',
        'desc' => 'Plugin file: codesnippet',
        'path' => '%plugin_dir_extra%codesnippet/',
        'buttons' => array(
          'CodeSnippet' => array(
            'label' => 'CodeSnippet',
            'icon' => 'icons/codesnippet.png',
          ),
        ),
        'default' => 't',
      ),
      'drupalbreaks' => array(
        'name' => 'drupalbreaks',
        'desc' => t('Plugin for inserting Drupal teaser and page breaks.'),
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' => array(
          'DrupalBreak' => array(
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
    ),
  );

  db_query('INSERT INTO {ckeditor_settings} (name, settings) VALUES(:name, :settings)',
    array(
      ':name' => MOHA_CLIP__CK_PROFILE,
      ':settings' => serialize($profile_data),
    )
  );

  db_query("INSERT INTO {ckeditor_input_format} (name, format) VALUES(:name, :format)",
    array(
      ':name' => MOHA_CLIP__CK_PROFILE,
      ':format' => MOHA_CLIP__TEXT_FORMAT,
  ));
}

/**
 * Implements hook_image_default_styles().
 */
function moha_clip_image_default_styles() {
  $styles = array();
  $styles['moha_clip_thumbnail'] = array(
    'label' => 'Thumbnail Moha clip',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 720, 'height' => 405),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_node_info().
 */
function moha_clip_node_info() {

  $items = array(
    __MOHA_CLIP => array(
      'name' => t(MOHA_CLIP),
      'base' => __MOHA_CLIP, /* Set to node_content, otherwise need implement hook_form to let title could be specified. */
      'description' => t('Use <i>Moha Clip</i> to share your knowledge, such as a \'Technology Sharing\' page.'),
      'title_label' => t('Title'),
      'has_title' => TRUE,
      'locked' => FALSE,
    ),
  );

  return $items;
}

/**
 * Implements hook_form().
 *
 * Moha Clip node add / edit form.
 *
 * Drupal needs this to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/moha-clip.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function moha_clip_form($node, $form_state) {
  global $theme_key;

  if ($theme_key == 'seven') {
    // Fix admin style issue when admin theme is seven.
    drupal_add_css(MOHA_CLIP__RELATIVE_PATH . '/css/moha_clip.admin.css');
  }

  // Add collapsible effect to image and video fields.
  drupal_add_js(MOHA_CLIP__PATH . '/js/moha_clip.admin.js', array('group' => JS_LIBRARY, 'weight' => -1));

  // Pass setting values from PHP to JS.
  drupal_add_js(array(
    __MOHA_CLIP => array(
      'ckeditor_template_image_path' => MOHA_CLIP__PATH . '/ckeditor/', // Usage: Drupal.settings.moha_clip.ckeditor_template_image_path.
      'speaker' => ''
    )
  ), 'setting');

  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * add additional functions to moha_clip node form:
 *  - Save & Stay: Ajax saving function for edit form.
 */
function moha_clip_form_moha_clip_node_form_alter(&$form, &$form_state, $form_id) {

  // Ajax saving function hasn't supported node-adding form.
  if ($form['nid']['#value'] != null) {

    $form['changed']['#prefix'] = '<div id="moha-node-changed-form-wrapper">';
    $form['changed']['#suffix'] = '</div>';

    $form['actions']['silent_save'] = [
      /* Must use 'submit' to trigger form save, otherwise field value can't be proceed correctly. */
      '#type' => 'submit',
      /* If need form save with other form elements, set this value to prepare fields for submitting. */
      '#executes_submit_callback' => TRUE,
      '#value' => t('Silently Save'),
      '#ajax'  => [
        // #ajax has two required keys: callback and wrapper.
        // 'callback' is a function that will be called when this element changes.
        'callback' => '_moha_node_ajax_silently_save_callback',
        // 'wrapper' is the HTML id of the page element that will be replaced.
        // Can't use form ID as after ajax process, ID will suffixed by '--2'.
        'wrapper'  => 'moha-node-changed-form-wrapper',
      ],
    ];
  }

}

/**
 * Save node from ajax call.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function _moha_clip_ajax_save_callback($form, &$form_state){

  // @See ajax_form_callback()
  // valid will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return $form;
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form;
}

/**
 * Moha Clip Fields.
 *
 * @return array fields & instance parameter array.
 */
function _moha_clip_fields_and_instances() {
  $fields_and_instances = array();

  $fields_and_instances['image'] = array(
    'label'       => t('Feature Image'),
    'field_name'  => 'image',
    'type'        => 'image',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'description' => t('Upload images to go with this clip.'),
    'entity_type' => 'node',
    'bundle'      => __MOHA_CLIP,
    'settings' => array(
    ),
    'widget' => array(
      'weight' => -90,
      'type' => 'image_image',
    ),
    'display' => array(
      'default' => array(
        'weight' => -90,
        'label' => 'hidden',
      ),
      'teaser' => array(
        'weight' => -90,
        'label' => 'hidden',
      ),
    ),
  );

  $fields_and_instances['video'] = array(
    'label'       => t('Feature Video'),
    'field_name'  => 'video',
    'type'        => 'video',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'description' => t('Upload videos to go with this clip.'),
    'entity_type' => 'node',
    'bundle'      => __MOHA_CLIP,
    'settings' => array(
      'autoconversion' => 0,
      'autothumbnail'  => 'manual_upload',
      'preview_video_thumb_style' => 'moha_clip_thumbnail',
      'uri_scheme' => 'private',
      'uri_scheme_converted'  => 'private',
      'uri_scheme_thumbnails' => 'public',
    ),
    'widget'   => array(
      'type'   => 'video_upload',
      'weight' => -80,
    ),
    'display' => array(
      'default'  => array(
        'label'  => 'hidden',
        'weight' => -80,
      ),
      'teaser' => array(
        'label'  => 'hidden',
        'weight' => -80,
      ),
    ),
  );

  $fields_and_instances['technology_stacks'] = array(
    'type' => 'field_collection',
    'field_name' => 'technology_stacks',
    'label' => t('Technology stacks'),
    'entity_type' => 'node',
    'bundle' => __MOHA_CLIP,
    'description' => t('Stores related technology stacks information.'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'field_collection',
        'settings' => array(
        ),
        // No Delete / Edit / Add link
        'type' => 'field_collection_fields',
        'weight' => 90,
      ),
    ),
    'required' => FALSE,
    'settings' => array(
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 1,
    ),
  );

  $fields_and_instances['technology'] = array(
    'label' => t('Technology'),
    'field_name' => 'technology',
    'description' => t('Input technology used in this Moha Clip.'),
    'type' => 'taxonomy_term_reference',
    'cardinality' => 1,
    'entity_type' => 'field_collection_item',
    'bundle' => 'technology_stacks',
    'settings' => array(
      'max_length' => 260,
      'allowed_values' => array(
        array(
          'vocabulary' => 'it_technologies',
        ),
      ),
    ),
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_plain',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'taxonomy_term_reference_plain',
      ),
    ),
  );

  $fields_and_instances['versions'] = array(
    'label'       => t('Versions'),
    'field_name'  => 'versions',
    'description' => t('Input related version number.'),
    'type'        => 'text',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'entity_type' => 'field_collection_item',
    'bundle' => 'technology_stacks',
    'settings' => array(
      'max_length' => 60,
    ),
    'widget' => array(
      'type' => 'text_textfield',
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
      ),
      'teaser' => array(
        'label' => 'hidden',
      ),
    ),
  );

  return $fields_and_instances;
}

/**
 * Implements hook_node_type_insert().
 *
 * Bind moha_clip fields.
 */
function moha_clip_node_type_insert($info) {
  if ($info->type == __MOHA_CLIP) {

    $body_instance = node_add_body_field($info, t('Contents'));
    // Save our changes to the body field instance.
    field_update_instance($body_instance);

    moha_create_fields_and_instances('_moha_clip_fields_and_instances');

    // Hide comment for Moha Clip by default.
    variable_set('comment_' . __MOHA_CLIP, COMMENT_NODE_HIDDEN);
    variable_set('node_options_' . __MOHA_CLIP, array('status'));
  }
}

/**
 * Implements hook_menu().
 */
function moha_clip_menu() {
  $items = array();

  $items['moha/moha_clip/front'] = array(
    'title' => t('Moha Clip Front Page'),
    'page callback' => '_moha_clip_front',
    'access callback' => TRUE,
    'file' => 'inc/moha_clip.front.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/moha_clip'] = array(
    'title' => t('Moha Clip Manager'),
    'description' => t('Manage Moha Clip configurations.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_moha_clip_manager_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/moha_clip.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Declares location of codes for views.
 */
function moha_clip_views_api() {
  return array(
    'api' => 3,
    'path' => MOHA_CLIP__RELATIVE_PATH . '/views',
    'template path' => MOHA_CLIP__RELATIVE_PATH . '/templates',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * Extract h1 and summary into intro area.
 */
function moha_clip_views_pre_render(&$view) {

  global $base_url;
  global $user;

  //
  if ($view->name == 'moha_clip_list') {

    $rows = $view->result;

    foreach ($rows as $row) {
      $original = $row->field_body[0]['rendered']['#markup'];

      if (preg_match('/<h1>(.+)<\/h1>/msi', $original, $h1)){
        $intro = '<h2>' . array_pop($h1) . '</h2>';
        $intro = format_string('<a href="!link">!text</a>', array(
          '!link' => $base_url . base_path() . 'node/' . $row->nid,
          '!text' => $intro,
        ));

        // Add Edit link to who has edit permission.
        if ($user->uid == 1) {
          $intro .= format_string('<div class="node-actions"><a href="!link" target="_blank">!text</a></div>', array(
            '!link' => $base_url . base_path() . 'node/' . $row->nid . '/edit',
            '!text' => t('Edit'),
          ));
        }

        $row->field_body[0]['raw']['safe_value'] = $row->field_body[0]['raw']['value'] = $row->field_body[0]['rendered']['#markup'] = $intro;
      }

    }

    return;
  }
  ///
}

/**
 * Implements hook_views_post_render().
 */
function moha_clip_views_post_render(&$view, &$output, &$cache) {
  //
  if ($view->name == 'moha_clip_list') {

    $rows = $view->result;

    foreach ($rows as $row) {
      foreach ($row->field_body as $body){
        $original = $body['rendered']['#markup'];


      }
    }
  }
  ///
}

/**
 * Implements hook_theme().
 */
function moha_clip_theme($existing, $type, $theme, $path) {
  $themes = array();

  // Declare theme for moha_clip through naming convention, one place configuration.
  $themes['node__moha_clip'] = array(
    'render element' => 'elements',
    'template' => 'templates/node--moha_clip',
  );

  $themes['front__moha_clip'] = array(
    'render element' => 'elements',
    'template' => 'templates/front--moha_clip',
  );

  return $themes;
}
