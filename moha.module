<?php
/**
 * @file
 * Common used functions and global configurations.
 */

/**
 * Http request timeout, unit is second.
 */
define('MOHA__TIME_OUT__HTTP_REQUEST', '120');

/**
 * Human name.
 */
define('MOHA', 'Moha');

/**
 * Machine name.
 */
define('__MOHA', 'moha');

/**
 * moha__variables.
 */
define('MOHA__VARIABLES', __MOHA . '__variables');

/**
 * sites/all/modules/custom/moha
 */
define('MOHA__PATH', drupal_get_path('module', __MOHA));

/**
 * /sites/all/modules/custom/moha
 */
define('__MOHA__PATH', base_path() . MOHA__PATH);

/**
 * Entity human name: Moha RACI.
 */
define('MOHA_RACI', 'Moha RACI');

/**
 * Entity machine name: moha_raci.
 */
define('__MOHA_RACI', 'moha_raci');

/**
 * Moha URL: Moha entities summary page.
 */
define('MOHA__URL__ENTITIES', 'admin/moha/entities');

/**
 * Moha URL: Moha RACI management page.
 */
define('MOHA__URL__RACI_ADMIN_UI', MOHA__URL__ENTITIES . '/raci');

/**
 * Permission: Edit any Moha RACI.
 */
define('MOHA__PERMISSION__EDIT_ANY_RACI', 'edit any moha raci');

/**
 * Permission: Site root.
 */
define('MOHA__PERMISSION__ROOT', 'administer site configuration');

/**
 * Permission: Anonymous.
 */
define('MOHA__PERMISSION__ANONYMOUS', 'access content');

/**
 * Permission: Site Preview.
 */
define('MOHA__PERMISSION__SITE_PREVIEW', 'moha site preview as user');

/**
 * Permission: Site Preview.
 */
define('MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS', 'moha site preview as anonymous');

/**
 * Moha Role: moha__admin.
 */
define('MOHA__ROLE__ADMIN', __MOHA . '__admin');

/**
 * JSON encoding options: bitmask.
 */
define("MOHA__JSON_ENCODING_OPTIONS_BIT_MASK", JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);

/**
 * Define common used constants.
 */
define('MOHA__CONSTANTS', array(
  '134217728' => '128M',
  '134,217,728' => '128M',
  '268435456' => '256M',
  'DAY_IN_SECONDS' => 60*60*24,
  'WEEK_IN_SECONDS' => 60*60*24*7,
  'YEAR_IN_SECONDS' => 60*60*24*365,
));

/**
 * Data format:
 */
define ('MOHA__DATETIME_FORMAT__SHORT', 'Y-m-d H:i');

/**
 * Date format: 2019/09/03
 */
define ('MOHA__DATETIME_FORMAT__DATE', 'Y/m/d');

/**
 * Data format: Azure Expense.
 */
define('MOHA__DATETIME_FORMAT__AZURE_EXPENSE', 'Y-m');

/**
 * Menu Type: Normal
 * @see moha_menu_define()
 */
define('MOHA__MENU__NORMAL', 'Normal');
define('MOHA__MENU__CALLBACK', 'Callback');

/**
 * Action: Access.
 */
define('MOHA__ACTION__ACCESS', 'Access');

/**
 * Action: Add.
 */
define('MOHA__ACTION__ADD', 'Add');

/**
 * Action: Update.
 */
define('MOHA__ACTION__UPDATE', 'Update');

/**
 * Action: Delete.
 */
define('MOHA__ACTION__DELETE', 'Delete');

/**
 * Action: Refresh.
 */
define('MOHA__ACTION__REFRESH', 'Refresh');

/**
 * Action: Deploy.
 */
define('MOHA__ACTION__DEPLOY', 'Deploy');

/**
 * Action: Login.
 */
define('MOHA__ACTION__LOGIN', 'Login');

/**
 * Action: Logout.
 */
define('MOHA__ACTION__LOGOUT', 'Logout');

/**
 * Action: Save.
 */
define('MOHA__ACTION__SAVE', 'Save');

/**
 * Moha Status array: entity.
 */
define('MOHA__ACTION', array(
  0 => MOHA__ACTION__ACCESS,
  MOHA__ACTION__ADD,
  MOHA__ACTION__UPDATE,
  MOHA__ACTION__DELETE,
  MOHA__ACTION__LOGIN,
  MOHA__ACTION__LOGOUT,
));

/**
 * Moha Term: Checking.
 */
define('MOHA__TERM__CHECKING', 'Checking');

/**
 * Moha Term: Configuration.
 */
define('MOHA__TERM__CONFIGURATION', 'Configuration');

/**
 * Moha Term: Backup.
 */
define('MOHA__TERM__BACKUP', 'Backup');

/**
 * Moha Term: Communication.
 */
define('MOHA__TERM__COMMUNICATION', 'Communication');

/**
 * Moha Term: Development.
 */
define('MOHA__TERM__DEVELOPMENT', 'Development');

/**
 * Moha Term: Uploading.
 */
define('MOHA__TERM__UPLOADING', 'Uploading');

/**
 * Moha Status: configuration.
 */
define('MOHA__TERM__DELETED', 'Deleted');

/**
 * Moha Status: Active.
 */
define('MOHA__TERM__ACTIVE', 'Active');

/**
 * Moha Status: Disabled.
 */
define('MOHA__TERM__DISABLED', 'Disabled');

/**
 * Moha Status: Processed.
 */
define('MOHA__TERM__PROCESSED', 'Processed');

/**
 * Moha Status: Queued.
 */
define('MOHA__TERM__QUEUED', 'Queued');

/**
 * Moha Status: Pending.
 */
define('MOHA__TERM__PENDING', 'Pending');

/**
 * Moha Status: Suspended.
 */
define('MOHA__TERM__SUSPENDED', 'Suspended');

/**
 * Moha Status: Success.
 */
define('MOHA__TERM__SUCCESS', 'Success');

/**
 * Moha Status: Fail.
 */
define('MOHA__TERM__FAILURE', 'Failure');

/**
 * Moha Status array: entity.
 */
define('MOHA__STATUS__ENTITY', array(
  0 => MOHA__TERM__DELETED,
  1 => MOHA__TERM__ACTIVE,
  2 => MOHA__TERM__DISABLED,
  3 => MOHA__TERM__QUEUED,
  4 => MOHA__TERM__PENDING,
  6 => MOHA__TERM__SUCCESS,
  100 => MOHA__TERM__PROCESSED,
  -900 => MOHA__TERM__SUSPENDED,
  -999 => MOHA__TERM__FAILURE,
));

/**
 * Moha RACI: Accountable.
 */
define('MOHA__TERM__ACCOUNTABLE', 'Accountable');

/**
 * Moha RACI: Responsible.
 */
define('MOHA__TERM__RESPONSIBLE', 'Responsible');

/**
 * Moha RACI: Consulted.
 */
define('MOHA__TERM__CONSULTED', 'Consulted');

/**
 * Moha RACI: Informed.
 */
define('MOHA__TERM__INFORMED', 'Informed');

/**
 * Moha Status array: RACI.
 */
define('MOHA__STATUS__RACI', array(
  0 => MOHA__TERM__ACCOUNTABLE, // Resource Owner, Approver
  1 => MOHA__TERM__RESPONSIBLE, // Executor, Updater
  2 => MOHA__TERM__CONSULTED,   // Viewer
  3 => MOHA__TERM__INFORMED,    // Related Party
));

/**
 * Implements hook_theme().
 */
function moha_theme($existing, $type, $theme, $path) {
  $themes = array(
    'moha_admin_form_2_draggable_table' => array(
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 *
 * @param $type
 *   varchar | int
 *
 * @param $description
 *   Column description.
 *
 * @param mixed $size
 *   tiny / small / medium / normal / big / <int>
 *
 * @param $default
 *   Default value of the column
 *
 * @param $unsigned
 *   boolean
 *
 * @return array
 *   DB column definition array.
 */
function moha_db_column_define($type, $description = '', $size = 255, $default = '', $unsigned = TRUE) {
  $type = trim($type);
  $db_field = array();
  static $expecting_int_types = array('tiny', 'small', 'medium', 'normal', 'big');

  switch ($type) {
    default:
      break;
    case 'varchar':
      if (!is_numeric($size)) {
        $size = 255;
      }
      if (!is_string($default)) {
        $default = '';
      }

      $db_field['description'] = $description;
      $db_field['type'] = 'varchar';
      $db_field['length'] = $size;
      $db_field['not null'] = TRUE;
      $db_field['default'] = $default;
      break;

    case 'int':
      $checked_size = 'normal';
      foreach ($expecting_int_types as $expecting_type) {
        if ($expecting_type === $size) {
          $checked_size = $expecting_type;
        }
      }
      if (!is_numeric($default)) {
        $default = 0;
      }

      $db_field['description'] = $description;
      $db_field['type'] = 'int';
      $db_field['size'] = $checked_size;
      $db_field['unsigned'] = $unsigned;
      $db_field['not null'] = TRUE;
      $db_field['default'] = $default;
      break;

    case 'serial':
      $db_field['description'] = $description;
      $db_field['type'] = 'serial';
      $db_field['size'] = 'big';
      $db_field['unsigned'] = TRUE;
      $db_field['not null'] = TRUE;
      break;

    case 'blob':
      $db_field['description'] = $description;
      $db_field['type'] = 'blob';
      $db_field['not null'] = FALSE;
      $db_field['size'] = 'big';
      $db_field['serialize'] = TRUE;
      break;

    case 'text':
      $db_field['description'] = $description;
      $db_field['type'] = 'text'; // Can't have default value.
      if ($size == 'big') {
        $db_field['size'] = $size;
      }
      $db_field['not null'] = FALSE;
      break;

  }

  return $db_field;
}

/**
 * Init common definition of the DB Schema.
 *
 * @param $description
 *   Description of the table schema.
 *
 * @param $name_column
 *   If add default name columns.
 *
 * @return array
 */
function moha_entity_db_schema_init($description = '', $name_column = TRUE) {
  $schema['description'] = $description;

  $schema['fields'] = array(
    'id' => moha_db_column_define('serial', 'Primary Key: Unique ID.'),
    'vid' => moha_db_column_define('int', 'Primary Key: Unique ID.', 'big', 0),
    'status' => moha_db_column_define('int', 'Entity status.', 'big', 1, FALSE),
    'updated' => moha_db_column_define('int', 'The Unix timestamp when the record was updated.', 'normal', 0),
    'created' => moha_db_column_define('int', 'The Unix timestamp when the record was created.', 'normal', 0),
  );

  $schema = moha_entity_db_schema_default_index($schema);
  $schema['primary key'] = array('id');

  if ($name_column) {
    $schema['fields']['name'] =  moha_db_column_define('varchar', 'Stores machine name of the entity record.', 512);
    $schema['fields']['human_name'] =  moha_db_column_define('varchar', 'Stores human name of the entity record.', 512);
    $schema['indexes']['name'] = array('name');
    $schema['indexes']['name_status'] = array('name', 'status');
    $schema['indexes']['name_status_updated'] = array('name', 'status', 'updated');
    $schema['indexes']['human_name'] = array('human_name');
    $schema['indexes']['human_name_status'] = array('human_name', 'status');
    $schema['indexes']['human_name_status_updated'] = array('human_name', 'status', 'updated');
  }

  return $schema;
}

/**
 * Create default index for entity schema.
 *
 * @param $schema
 *
 * @return array
 */
function moha_entity_db_schema_default_index(&$schema) {
  $schema['indexes']['vid'] = array('vid');
  $schema['indexes']['id_vid'] = array('id', 'vid');
  $schema['indexes']['status'] = array('status');
  $schema['indexes']['id_vid_status'] = array('id', 'vid', 'status');
  $schema['indexes']['id_vid_status_updated'] = array('id', 'vid', 'status','updated');
  $schema['indexes']['updated'] = array('updated');
  $schema['indexes']['status_updated'] = array('status', 'updated');
  $schema['indexes']['created'] = array('created');

  return $schema;
}

/**
 * Creates schema for entity cache.
 *
 * @param $schema
 * @param $entity_name
 *
 * @return array
 *   Updated DB Schema array.
 */
function &moha_entity_db_add_cache_schema(&$schema, $entity_name = '') {

  if (empty($entity_name)) { return $schema; }

  // Cache bins for Entity-cache module.
  $cache_schema = drupal_get_schema_unprocessed('system', 'cache');

  if (is_array($entity_name)) {
    $types = $entity_name;
  }
  else {
    $types = array( $entity_name );
  }

  foreach ($types as $type) {
    $schema["cache_entity_$type"] = $cache_schema;
    $schema["cache_entity_$type"]['description'] = "Cache table used to store $type entity records.";
  }

  return $schema;
}

/**
 * Generates revision schema per primary schema,
 * change defination, primary key and index of id and vid,
 *
 * @param $schema
 * @param $table_name string
 *   Base table name.
 *
 * @return array
 */
function &moha_entity_db_add_revision_schema(&$schema, $table_name = '') {
  if (empty($table_name)) {
    // Get copy from base table.
    $schema_rev = $schema;
  }
  else {
    $schema[$table_name . '_revision'] = $schema[$table_name];
    $schema_rev = &$schema[$table_name . '_revision'];
  }

  $schema_rev['fields']['id']['type'] = 'int';
  $schema_rev['fields']['id']['default'] = 0;
  $schema_rev['fields']['vid']['type'] = 'serial';
  unset($schema_rev['fields']['vid']['default']);

  unset($schema_rev['indexes']['vid']);
  $schema_rev['indexes']['id'] = array('id');

  $schema_rev['primary key'] = array('vid');

  return $schema_rev;
}

/**
 * Provided as machine name existing function callback.
 *
 * @param $value
 *
 * @param $element
 *
 * @param $form_state
 *   A keyed array containing the current state of the form. The arguments
 *   that drupal_get_form() was originally called with are available in the
 *   array $form_state['build_info']['args'].
 *
 * @return boolean
 *
 * @see form_validate_machine_name()
 */
function moha_entity_exists($value, $element, $form_state){
  $entity_type = $form_state['entity_type'];
  $entity_type = check_plain($entity_type);

  $query = db_select($entity_type)->fields($entity_type)->condition('name', $value);
  $count = $query->execute()->rowCount();

  if ($count > 0) {
    $count = TRUE;
  }
  else {
    $count = FALSE;
  }

  return $count;
}

/**
 * @param $form
 * @param $form_state
 * @param $entity
 * @param $comment
 *
 * @return array
 *   form rendered array.
 */
function &moha_entity_form_default(&$form, &$form_state, $entity = NULL, $comment = '') {

  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => empty($entity->id) ? '' : $entity->id,
  );

  $form['human_name'] = moha_form_element_text(
    'Human name',
    'Human name of the entity.',
    empty($entity->human_name) ? '' : $entity->human_name,
    40, 64, TRUE, array('form-control', 'form-human-name')
  );

  $form['name'] = moha_form_element_machine(
    'human_name',
    empty($entity->name) ? '' : $entity->name,
    /** @see moha_entity_exists() */
    'moha_entity_exists',
    TRUE
  );

  $container = &moha_form_set_inline_container($form['container']);

  $container['status'] = moha_form_element_select(
    'Status',
    'Status of the entity.',
    isset($entity->status) ? $entity->status : 1,
    MOHA__STATUS__ENTITY
  );

  moha_form_actions($form, isset($entity->is_new) ? MOHA__ACTION__ADD : MOHA__ACTION__UPDATE);

  return $form;
}

/**
 * Generates and returns entity define array.
 *
 * @param $module
 *   Module machine name.
 *
 * @param $machine_name
 *   Entity machine name.
 *
 * @param $human_name
 *   Entity human name.
 *
 * @param $class_prefix
 *   Entity class prefix.
 *
 * @param $admin_url
 *   Entities admin URL.
 *
 * @param $fieldable
 *   If field could be attached to the entity.
 *
 * @example
 *   moha_define_entity(
 *   __MOHA_MAILER,                   // Module machine name.
 *   __MOHA_MAILER_MAIL,              //
 *   MOHA_MAILER_MAIL,
 *   'MohaMailerMail',
 *   MOHA_MAILER__URL__MAIL_ADMIN_UI
 * );
 *
 * @return array
 *
 */
function moha_entity_define($module, $machine_name, $human_name, $class_prefix, $admin_url, $fieldable = FALSE) {
  $entity_definition = array(
    'label' => t($human_name),
    'plural label' => t($human_name . 's'),
    'base table' => $machine_name,
    'revision table' => $machine_name . '_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    // Refer label from $entity['entity keys']['label].
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* Entity management page URL & Class. */
      'path' => $admin_url,
      'controller class' => $class_prefix . 'EntityAdminController',

      /** @see entity_ui_get_form() */
      /* Entity add / edit forms containing file. */
      'file' => 'includes/' . $class_prefix . 'Entity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => $module,
    'access callback' => 'moha_entity_access',

    'entity class' => $class_prefix . 'Entity',
    'controller class' => 'MohaCommonEntityController',
    'entity cache' => module_exists('entitycache'),
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity un-fieldable;
    /** @see field_attach_form to attach added fields. */
    'fieldable' => $fieldable,

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  if (!$fieldable) {
    $entity_definition['bundles'] = array();
  }
  else {
    $entity_definition['bundles'] = array(
      $machine_name => array(
        'label' => $human_name,
        'plural label' => $human_name . 's',
        'admin' => array(
          'path' => $admin_url,
          /* @see moha_entity_bundle_access() */
          'access callback' => 'moha_entity_bundle_access',
        ),
      )
    );
  }

  return $entity_definition;
}

/**
 * Implements hook_entity_info().
 *
 * Declares entity: moha_raci.
 */
function moha_entity_info() {
  $items = array();

  // Stores basic information of an RACI.
  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_RACI] = array(
    'label' => t(MOHA_RACI),
    'plural label' => t(MOHA_RACI . 's'), // Moha RACIs
    'base table' => __MOHA_RACI,
    'revision table' => __MOHA_RACI . '_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    //
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* Moha RACI management page URL & Class. */
      'path' => MOHA__URL__RACI_ADMIN_UI,
      'controller class' => 'MohaRACIEntityAdminController',

      /** @see entity_ui_get_form() */
      /* Moha RACI add / edit forms containing file. */
      'file' => 'includes/MohaRACIEntity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => __MOHA,

    /** @see entity_access() */
    'access callback' => 'moha_entity_access',

    'entity class' => 'MohaRACIEntity',
    'controller class' => 'MohaRACIEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity fieldable; @see field_attach_form to attach added fields.
    'fieldable' => TRUE,
    'bundles' => array(
      __MOHA_RACI => array(
        'label' => t(MOHA_RACI),
        'plural label' => t(MOHA_RACI . 's'),
        'admin' => array(
          'path' => MOHA__URL__RACI_ADMIN_UI,
          'access arguments' => array(MOHA__PERMISSION__EDIT_ANY_RACI),
        ),
      ),
    ),

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $items;
}

/**
 * Generates entity permission array.
 *
 * @param $entity_type
 *   Entity type name.
 *
 * @return array
 */
function moha_entity_permissions_generator($entity_type) {

  $permissions_array = array(
    'view own ' . $entity_type => array(
      'title' => t('View own ' . $entity_type),
    ),
    'view any ' . $entity_type => array(
      'title' => t('View any ' . $entity_type),
    ),
    'create ' . $entity_type => array(
      'title' => t('Create ' . $entity_type),
    ),
    'update own ' . $entity_type => array(
      'title' => t('Update own ' . $entity_type),
    ),
    'update any ' . $entity_type => array(
      'title' => t('Update any ' . $entity_type),
    ),
    'delete own ' . $entity_type => array(
      'title' => t('Delete own ' . $entity_type),
    ),
    'delete any ' . $entity_type => array(
      'title' => t('Delete any ' . $entity_type),
    ),
  );

  return $permissions_array;
}

/**
 * Determines whether the given user can perform actions on an entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity_type
 *   The entity type of the entity to check for.
 * @param $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function moha_entity_access($op, $entity, $account = NULL, $entity_type = '') {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  if (empty($entity_type) && is_string($entity)) {
    $entity_type = $entity;
  }

  if ($op == 'view') {
    if (user_access('view any ' . $entity_type, $account)) {
      return TRUE;
    };
  }
  elseif ($op == 'create') {
    return user_access('create ' . $entity_type, $account);
  }
  elseif ($op == 'update') {
    if (user_access('update any ' . $entity_type, $account)) {
      return TRUE;
    }
  }
  elseif ($op == 'delete') {
    if (user_access('delete any ' . $entity_type, $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback for bundles.
 *
 * @param %op
 *   User object.
 *
 * @return bool
 */
function moha_entity_bundle_access($op) {
  return user_access(MOHA__PERMISSION__ROOT);
}

/**
 * Gets the name of status property for moha entity.
 */
function moha_entity_status_get($data, array $options, $name, $type, $info) {
  $name = isset($info['schema field']) ? $info['schema field'] : $name;

  $status = 'No Status';

  if (isset($data[$name])) {
    $status = MOHA__STATUS__ENTITY[$name];
  }

  return $status;
}

/**
 * @param $w object
 *   Entity Wrapper which need be inspected.
 *
 * @return array
 *   key-value pairs of wrapper object.
 */
function moha_entity_wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * Fetch all active entities per passed parameters.
 *
 * @param $entity_type
 *
 * @param $properties
 *
 * @return array
 */
function moha_entity_fetch($entity_type, $properties = array('status' => MOHA__TERM__ACTIVE)) {
  if (empty($entity_type)) {
    return array();
  }

  $properties += array('status' => MOHA__TERM__ACTIVE);

  // Fetch all infrastructures.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type);
  foreach ($properties as $property_name => $property_value) {
    if ($property_name == 'status') {
      if (is_string($property_value)) {
        $query->propertyCondition('status', moha_array_key_by_value($property_value, MOHA__STATUS__ENTITY), '=');
      }
    }
    else {
      $query->propertyCondition($property_name, $property_value);
    }
  }
  $results = $query->execute();
  $ids = isset($results[$entity_type]) ? array_keys($results[$entity_type]) : array();
  $entities = $ids ? entity_load($entity_type, $ids) : array();

  return $entities;
}

/**
 * Returns revision IDs of certain entity.
 *
 * @param $entity
 * @return mixed
 */
function moha_entity_fetch_revision_ids($entity) {
  if (empty($entity) || !is_object($entity)) {
    return array();
  }

  $table_name = $entity->entityInfo()['base table'];
  $revision_table_name = $entity->entityInfo()['revision table'];
  $id = $entity->entityInfo()['entity keys']['id'];
  $vid = $entity->entityInfo()['entity keys']['revision'];
  $admin_uri = $entity->entityInfo()['admin ui']['path'];

  /** @var \PDOStatement $query */
  $query = db_query("SELECT $vid FROM {$revision_table_name} $revision_table_name WHERE $id = :$id",
    array(
      ":$id" => $entity->$id,
    ));

  $vids = $query->fetchAll(PDO::FETCH_COLUMN);
  if (is_null($vids) || !is_array($vids)) {
    $vids = array();
  }

  return $vids;
}

/**
 * Returns permission define array.
 *
 * @param $title
 * @param $description
 *
 * @return array
 */
function moha_permission_define($title, $description = '') {
  $permission = array(
    'title' => t($title),
    'description' => t($description),
    );

  return $permission;
}

/**
 * Permissions administrator should have.
 *
 * @return array
 */
function moha_permissions_4_admin() {
  $admin_common_permissions = array(
    'view the administration theme',
    'access administration menu',
    'access administration pages',
    'flush caches',
    'access toolbar',
    'administer menu',
    'administer blocks',
    'edit own page content',
    'edit any page content',
    'access content',
  );

  return $admin_common_permissions;
}

/**
 * Implements hook_permission().
 */
function moha_permission() {
  $permissions = moha_entity_permissions_generator(__MOHA_RACI);

  $permissions[MOHA__PERMISSION__SITE_PREVIEW] = array(
    'title' => t('Moha Site Preview as user'),
    'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
  );

  $permissions[MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS] = array(
    'title' => t('Moha Site Preview as anonymous'),
    'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
  );

  return $permissions;
}

/**
 * Create necessary roles and permissions.
 */
function _moha_prepare_roles_and_permissions() {
  $admin_permissions = array(
    'view the administration theme',
    'access administration menu',
    MOHA__PERMISSION__SITE_PREVIEW
  );

  moha_grant_permissions_2_role_with_creation(MOHA__ROLE__ADMIN, $admin_permissions);
}

/**
 * Login with provided information.
 *
 * @param $user_info
 * @param $force
 *   If force to use info provided to login.
 *
 * @throws Exception
 */
function moha_login($user_info = 0, $force = FALSE, $allow_root = FALSE) {

  if (!isset($user_info)) {
    throw new Exception('No user or related info is specified.');
  }

  // Load user per provides information.
  if ($user_info === '0') {
    module_load_include('inc', 'user', 'user.pages');
    user_logout();
  }
  else if (is_numeric($user_info)) {
    $new_user = user_load($user_info);
  }
  else if (is_object($user_info)) {
    $new_user = $user_info;
  }
  else if (is_string($user_info) && valid_email_address($user_info)) {
    $new_user = user_load_by_mail($user_info);
  }
  else {
    throw new Exception("Unknown data passed: $user_info");
  }

  if (empty($new_user)) {
    throw new Exception("User not found: $user_info");
  }

  // No action when specified user has login.
  global $user;
  if ($user->uid == $new_user->uid) {
    drupal_set_message("Your are already $new_user->name($new_user->uid)", "warning");
    return;
  }

  // Process parameter $allow_root
  if ($new_user->uid == 1 && !$allow_root) {
    throw new Exception("User 1 is not allowed");
  }

  $edit_link = moha_link("$new_user->name($new_user->uid)", "user/$new_user->uid/edit");
  if (!isset($new_user->status) || $new_user->status == 0) {
    throw new Exception("User blocked $edit_link.");
  }

  if ($force || !user_is_logged_in()) {
    $form_state['uid'] = $new_user->uid;
    user_login_submit(array(), $form_state);
  }
}

/**
 * Implements hook_image_default_styles().
 */
function moha_image_default_styles() {
  $styles = array();
  $styles['moha_feature'] = array(
    'label' => 'Moha Feature Image',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 720,
          'height' => '',
          'upscale' => 0,
          ),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Page route definition helper.
 *
 * @param $title
 * @param $description
 *
 * @param $type string
 *   Normal
 *   Task
 *   Action
 *   Callback
 *
 * @param $definition
 *   Example: array('<FUNCTION_NAME>', INDEX_OF_ARGUMENT, ...),
 *
 * @param $access
 *   TRUE / FALSE; '<FUNCTION_NAME>'; Array('FUNCTION_NAME', 'PERMISSION_NAME', 'PERMISSION_NAME'); Array('PERMISSION_NAME', 'PERMISSION_NAME');
 *
 * @param $file
 * @param $path
 * @param $weight
 *
 * @return array
 */
function moha_menu_define($title = '', $description = '',
                          $definition = array(), $access = array('access content'),
                          $type = MOHA__MENU__NORMAL, $file = '', $path = '', $weight = 0) {
  $item = array(
    'title' => $title,
    'description' => $description,
  );

  switch ($type) {
    default:
      $item['type'] = $type;
      break;
    case '':
    case MOHA__MENU__NORMAL:
      $item['type'] = MENU_NORMAL_ITEM;
      break;
    case 'Task':
      $item['type'] = MENU_LOCAL_TASK;
      break;
    case MOHA__MENU__CALLBACK:
      $item['type'] = MENU_CALLBACK;
      break;
  }

  if (is_string($definition)) {
    if (moha_end_with($definition, '_form')) {
      $item['page callback'] = 'drupal_get_form';
      $item['page arguments'] = array($definition);
    }
    else {
      $item['page callback'] = $definition;
    }
  }
  else if (is_array($definition) && count($definition) >= 1) {
    if (moha_end_with($definition[0], '_form')) {
      $item['page callback'] = 'drupal_get_form';
      $item['page arguments'] = $definition;
    }
    else {
      $function = array_shift($definition);
      $item['page callback'] = $function;
      $item['page arguments'] = $definition;
    }
  }

  if (is_string($access)) {
    if (function_exists($access)) {
      $item['access callback'] = $access;
    }
    else {
      $item['access arguments'] = array($access);
    }
  }
  else if ($access === TRUE || $access === FALSE) {
    $item['access callback'] = $access;
  }
  else if (is_array($access) && count($access) > 0) {
    if (function_exists($access[0])) {
      $item['access callback'] = $access[0];
      array_shift($access);
      $item['access arguments'] = $access;
    }
    else {
      $item['access callback'] = 'user_access';
      $item['access arguments'] = $access;
    }
  }

  if (!empty(trim($file))) {
    $item['file'] = $file;
  }

  if (!empty(trim($path))) {
    $item['file path'] = $path;
  }

  if (is_numeric($weight) && $weight >= 0) {
    $item['weight'] = $weight;
  }

  return $item;
}

/**
 * Define parent menu to collect admin sub-menu.
 *
 * @param $title
 * @param $description
 * @param $weight
 *
 * @return array
 */
function moha_menu_block_define($title = '', $description = '', $weight = 0) {
  $item = array(
    'page callback' => 'system_admin_menu_block_page',
    'title' => $title,
    'description' => t($description),
    'weight' => $weight,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $item;
}

/**
 * Implements hook_menu().
 */
function moha_menu() {
  $items['admin/moha'] = array(
    'title' => 'Moha',
    'description' => t('Moha enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -10,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[MOHA__URL__ENTITIES] = array(
    'title' => 'Moha Entities',
    'description' => t('Entities of Moha enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -9,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['moha/ckeditor-upload'] = array(
    'title' => t('Moha Ajax Backend - CKEditor File Uploading'),
    'description' => t('Accept file uploaded by Upload Image plugin of CKEditor.'),
    'page callback' => 'moha_ajax_upload_by_ckeditor',
    'access arguments' => array('post comments'),
    'file' => 'ckeditor/moha.ckeditor.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/ckeditor-upload'] = array(
    'title' => t('Moha CKEditor File Uploading'),
    'description' => t('Configure storage for files uploaded by CKEditor.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_ckeditor_upload_form() */
    'page arguments' => array('moha_ckeditor_upload_form'),
    'access arguments' => array(MOHA__PERMISSION__ROOT),
    'file' => 'ckeditor/moha.ckeditor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/moha/db-update'] = array(
    'title' => t('Moha DB Update'),
    'description' => t('Perform DB Schema / Table Update, or specified function.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_db_update_form() */
    'page arguments' => array('moha_db_update_form'),
    'access arguments' => array(MOHA__PERMISSION__ROOT),
    'file' => 'moha.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Hide menu add link.
 */
function moha_menu_alter(&$items) {
  // Upgrade add menu link permission.
  $items['admin/structure/menu/manage/%menu/add']['access arguments'][0] = 'administer site configuration';
}

/**
 * Implements hook_admin_paths().
 */
function moha_admin_paths() {
  $paths = array();

  /* Let imce use admin theme. */
  /* Removed, same could be implemented in IMCE configuration. */

  $paths['moha/*/add'] = TRUE;

  return $paths;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide menu link edit & delete button on menu items list page.
 */
function moha_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1 && !user_access('administer site configuration')) {
    foreach ($form as $key => $value) {
      if (strpos($key, "mlid") !== FALSE) {
        unset($form[$key]["operations"]["edit"]);
        unset($form[$key]["operations"]["delete"]);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Mount configurations which need be passed to templates.js of CKEditor.
 * TODO: Should only mount when CKEditor enable.
 */
function moha_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Pass path of CKEditor templates icons from PHP to JS.
  drupal_add_js(array(
    __MOHA => array(
      'ckeditor_template_image_path' => __MOHA__PATH . '/ckeditor/', // Usage: Drupal.settings.moha.ckeditor_template_image_path.
    )
  ), 'setting');
}

/**
 * Save node from ajax call.
 * don't call when create node.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function moha_node_ajax_save_callback($form, &$form_state){

  /** @see ajax_form_callback() */
  // validation will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return $form;
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form['changed'];
}

/**
 * Create DB tables per parameter if they are not ready.
 *
 * @param $schemas array | string
 *   hook_schema returned array or hook_schema function name.
 *
 * @throws Exception
 */
function moha_schema_create($schemas) {
  if (is_string($schemas) && function_exists($schemas)) {
    $schemas = $schemas();
  }
  else {
    if (!is_array($schemas)) {
      throw new Exception("Func: $schemas does not exist, nothing to be executed.");
    }
  }

  foreach ($schemas as $table_name => $table) {
    if (!db_table_exists($table_name)) {
      db_create_table($table_name, $table);
    }
    else {
      $columns = $table['fields'];

      foreach ($columns as $column_name => $column) {
        if (!db_field_exists($table_name, $column_name)) {
          db_add_field($table_name, $column_name, $column);
        };
      }

      $indexes = isset($table['indexes']) ? $table['indexes'] : array();

      foreach ($indexes as $index_name => $index) {
        if(!db_index_exists($table_name, $index_name)) {
          db_add_index($table_name, $index_name, $index);
        }
      }
    }
  }
}

/**
 * Grant permissions to specified role, if role doesn't exist, will be created first.
 *
 * @param string $role_name
 * @param array $permissions
 *  Permissions array.
 *
 * @return object $role
 */
function moha_grant_permissions_2_role_with_creation($role_name, $permissions = array()) {
  $role = user_role_load_by_name($role_name);

  if (!$role) {
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    $role = user_role_load_by_name($role_name);
  }

  // Passed permissions must be defined in certain module, filter out undefined permissions.
  // If permission <=> defined module map can't be fetched, no need to grant.
  $all_permissions = user_permission_get_modules();
  if (!empty($all_permissions) && is_array($permissions)) {
    foreach ($permissions as $key => $permission) {
      if (empty($all_permissions[$permission])) {
        unset($permissions[$key]);
      }
    }

    if (!empty($permissions)) {
      user_role_grant_permissions($role->rid, $permissions);
    }
  }

  return $role;
}

/**
 * Grant IMCE profile to specified role.
 *
 * @param string $role_name
 * @param int $profile_id
 */
function moha_grant_imce_profile_2_role($role_name, $profile_id = 0) {
  $roles_profiles = variable_get('imce_roles_profiles', array());

  $role = user_role_load_by_name($role_name);

  if ($role) {
    $roles_profiles[$role->rid] = array(
      'private_pid' => $profile_id,
      'public_pid' => $profile_id,
    );

    variable_set('imce_roles_profiles', $roles_profiles);
  }
}

/**
 * Create fields and instances per returned array by passed function.
 *
 * @param $get_fields_and_instances
 *   Function name which returns definition of fields and instances.
 *
 * @throws \FieldException
 */
function moha_create_fields_and_instances($get_fields_and_instances) {

  if (!function_exists($get_fields_and_instances)){
    throw new BadFunctionCallException($get_fields_and_instances . " doesn't exist.");
  }

  foreach ($get_fields_and_instances() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }

    if (!field_info_instance($field['entity_type'], $field['field_name'], $field['bundle'])) {
      field_create_instance($field);
    }
  }
}

/**
 * Returns field and instance definitions per types which requires body field.
 *
 * @param $types
 *   'entity'
 *   'bundle'
 *
 * @return array
 *   Body fields array.
 */
function moha_generate_description_fields_and_instances($types) {

  $fields = array();

  foreach ($types as $type) {
    $fields[] = array(
      'label' => 'Description',
      'field_name' => 'moha_description',
      'type' => 'text_with_summary',
      'entity_type' => $type['entity'],
      'bundle' => $type['bundle'],
      'widget' => array('type' => 'text_textarea_with_summary'),
      'settings' => array('display_summary' => TRUE),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
        ),
      ),
    );
  }

  return $fields;
}

/**
 * Returns HTML of generated link.
 *
 * @param $path
 * @param $file
 * @param $options
 *
 * @return string
 */
function moha_url($path, $file = FALSE, $options = array('absolute' => TRUE)) {
  if ($file) {
    $link = file_create_url($path);
  }
  else {
    $link = url($path, $options);
  }

  return $link;
}

/**
 * Returns HTML of generated link.
 *
 * @param $name
 * @param $url
 * @param $new_window
 * @param $options
 *
 * @return string
 */
function moha_link($name, $url, $new_window = TRUE, $options = array('absolute' => TRUE, 'html' => TRUE)) {
  if ($new_window) {
    $options['attributes']['target'] = '_blank';
  }
  $options = $options + array('absolute' => TRUE, 'html' => TRUE);
  $link = l(t($name), $url, $options);

  return $link;
}

/**
 * Return if passed array is a render-able array.
 *
 * @param $array
 *   Array to test.
 *
 * @return bool
 */
function moha_is_render_array($array) {
  $result = FALSE;
  if (!is_array($array)) {
    return $result;
  }

  static $render_keys = array('#type', '#markup', '#attached');

  foreach ($array as $key => $value) {
    foreach ($render_keys as $render_key) {
      if ($key === $render_key) {
        return TRUE;
      }
    }

     if ($result = moha_is_render_array($value)) {
       return $result;
     }
  }

  return $result;
}

/**
 * Add vertical tabs on passed form.
 *
 * @param $form
 */
function moha_form_add_vertical_tabs(&$form){
  $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
  );
}

/**
 * Add a tab named $tab_name on vertical_tabs.
 *
 * @param $form
 *
 * @param $tab_name string
 *   tab machine name
 */
function moha_form_add_vertical_tab(&$form, $tab_name) {
  if (!isset($form['vertical_tabs'])){
    moha_form_add_vertical_tabs($form);
  }

  $form[$tab_name] = array(
    '#type' => 'fieldset',
    '#title' => t(drupal_ucfirst($tab_name)),
    '#collapsible' => TRUE,
    '#group' => 'vertical_tabs',
  );
}

/**
 * Attach fields wrapper to passed form.
 *
 * @param $form
 *
 * @param $vertical_tabs
 *   if add entity fields on vertical tabs
 *
 * @return array
 *   Fields wrapper in the form array.
 */
function &moha_form_add_entity_fields_wrapper(&$form, $vertical_tabs = TRUE){

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#collapsible' => TRUE,
  );

  if ($vertical_tabs) {
    if (!isset($form['vertical_tabs'])){
      moha_form_add_vertical_tabs($form);
    }

    $form['fields']['#group'] = 'vertical_tabs';
  }

  $form['fields']['hint'] = moha_form_element_prompt_imce_usage();

  $form['fields']['wrapper'] = array(
    '#type' => 'container',
  );

  return $form['fields']['wrapper'];
}

/**
 * Attache entity fields to a vertical tab.
 *
 * @param $entity_type
 * @param $entity
 * @param $form
 * @param $form_state
 *
 * @return array
 */
function &moha_form_add_entity_fields($entity_type, $entity, &$form, $form_state) {
  $wrapper = &moha_form_add_entity_fields_wrapper($form);
  field_attach_form($entity_type, $entity, $wrapper, $form_state);
  return $wrapper;
}

/**
 * Returns render array of collapsible container.
 *
 * @param $title
 * @param $collapsed
 * @param $collapsible
 *
 * @return mixed
 */
function moha_form_element_container($title, $collapsed = TRUE, $collapsible = TRUE) {
  $element['#type'] = 'fieldset';
  $element['#title'] = t($title);
  $element['#collapsed'] = $collapsed;
  $element['#collapsible'] = $collapsible;

  return $element;
}

/**
 * Returns render array of machine name.
 *
 * @param $normal_element
 * @param $default
 * @param $exist_func
 * @param $allow_hyphen
 *
 * @return array
 */
function moha_form_element_machine($normal_element, $default, $exist_func = FALSE, $allow_hyphen = FALSE) {
  $element['#type'] = 'machine_name';
  $element['#default_value'] = $default;
  $element['#machine_name'] = array(
    'source' => array($normal_element), // Bind machine_name field to relative human name field.
    'label' => t('name'),
    'replace_pattern' => '[^a-z0-9_]+',
    'replace' => '_',
    'exists' => $exist_func,
  );

  if ($allow_hyphen) {
    $element['#description'] = t('A unique machine-readable name. Can only contain lowercase letters, numbers, hyphen, and underscores');
    $element['#machine_name']['replace_pattern'] = '[^a-z0-9-_]+';
    $element['#machine_name']['replace'] = '-';
  }

  return $element;
}

/**
 * Returns form element for prompt IMCE usage.
 *
 * @return array
 */
function moha_form_element_prompt_imce_usage() {
  $element = array(
    '#type' => 'item',
    '#title' => 'Hint',
    '#prefix' => '<div class="moha-admin-form-hint">',
    '#markup' => 'Public assets could be uploaded in <a target="_blank" href="/imce">imce</a>, private assets could be uploaded in <a target="_blank" href="/imce/private">imce/private</a>.',
    '#suffix' => '</div>',
    '#weight' => -99,
  );

  return $element;
}

/**
 * Returns render array for weight.
 *
 * @param $default
 * @param $delta
 *
 * @return mixed
 */
function moha_form_element_weight($default = 0, $delta = 255) {
  $element['#type'] = 'weight';
  $element['#attributes'] = array('class' => array('row-weight'));
  $element['#default_value'] = $default;
  $element['#delta'] = $delta;

  return $element;
}

/**
 * Returns render array for Current Item ID column in draggable table.
 *
 * @param $default
 *
 * @return mixed
 */
function moha_form_element_id($default = 0) {
  $element['#type'] = 'hidden';
  $element['#attributes'] = array('class' => array('row-id'));
  $element['#is_id'] = TRUE; // Mark current element is Row ID.
  $element['#value'] = $default;

  return $element;
}

/**
 * Returns render array for parent ID column in draggable table.
 *
 * @param $default
 *
 * @return mixed
 */
function moha_form_element_pid($default = 0) {
  $element['#type'] = 'hidden';
  $element['#attributes'] = array('class' => array('row-pid'));
  $element['#is_pid'] = TRUE;
  $element['#default_value'] = $default;

  return $element;
}

/**
 * Returns render array for text element.
 *
 * @param $title
 * @param $description
 * @param $default
 * @param $size
 * @param $max_length
 * @param $required
 * @param $classes
 *
 * @return mixed
 */
function moha_form_element_text($title = '', $description = '', $default = '', $size = 40, $max_length = 255, $required = FALSE, $classes = array('form-control')) {
  $element['#type'] = 'textfield';
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#default_value'] = $default;
  $element['#size'] = $size;
  $element['#maxlength'] = $max_length;
  $element['#required'] = $required;

  if (!empty($classes)) {
    $element['#attributes']['class'] = $classes;
  }

  return $element;
}

/**
 * Returns render array for textarea element,
 * textarea size decided by newline number of the default value.
 *
 * @param $title
 * @param $description
 * @param $default
 *
 * @return array
 */
function moha_form_element_textarea($title = '', $description = '', $default = '') {
  $element['#type'] = 'textarea';
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#default_value'] = $default;

  $rows = moha_count_line($default) + 1;
  if ($rows < 5) {
    $rows = 5;
  }

  $element['#rows'] = $rows;

  return $element;
}

/**
 * Returns render array for select element.
 *
 * @param $title
 * @param $description
 * @param $default
 * @param $options
 * @param $required
 * @param $empty
 *
 * @return mixed
 */
function moha_form_element_select($title = '', $description = '', $default = '', $options = array(), $required = FALSE, $empty = '') {
  $element['#type'] = 'select';
  $element['#title'] = $title;
  $element['#description'] = t($description);
  $element['#options'] = $options;
  $element['#empty_value'] = $empty;
  $element['#default_value'] = $default;
  $element['#required'] = $required;

  return $element;
}

/**
 * Add default configuration for a Radio form element.
 *
 * @param $title
 *   The title of form element.
 *
 * @param $description
 *   The description of form element.
 *
 * @param $default
 *   Radio default value.
 *
 * @param array $options
 *   Options definitions.
 *
 * @param boolean $required
 *
 * @return array
 *   Form element.
 */
function moha_form_element_radio($title = '', $description = '', $default = NULL, array $options = array(1 => 'Yes', 0 => 'No'), $required = FALSE) {
  $element['#type'] = 'radios';
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#default_value'] = (isset($default)) ? $default : 0;

  if (!empty($options)) {
    $element['#options'] = $options;
  }
  else {
    $element['#options'] = array(1 => 'Yes', 0 => 'No');
  }

  $element['#required'] = $required;

  return $element;
}

/**
 * Cache save default radio value which values generated by moha_form_radio().
 *
 * @param $value
 *
 * @param $constant_name
 */
function moha_form_element_radio_save($constant_name, $value) {
  if ($value) {
    moha_cache_set($constant_name, TRUE);
    moha_variable_set($constant_name, TRUE);
  }
  else {
    moha_cache_set($constant_name, FALSE);
    moha_variable_set($constant_name, FALSE);
  }
}

/**
 * Add default configuration for a Radio form element.
 *
 * @param $title
 *   The title of form element.
 *
 * @param $description
 *   The description of form element.
 *
 * @param $default
 *   Radio default value.
 *
 * @param array $options
 *   Options definitions.
 *
 * @param boolean $required
 *
 * @return array
 *   Form element.
 */
function moha_form_element_checks($title = '', $description = '', $default = NULL, array $options = array(1 => 'Yes', 0 => 'No'), $required = FALSE) {
  $element = moha_form_element_radio($title, $description, $default, $options, $required);
  $element['#type'] = 'checkboxes';

  return $element;
}

/**
 * Returns render array for entity reference autocomplete element.
 *
 * @param $title
 * @param $description
 * @param $default
 * @param string $entity_type
 * @param int $cardinality
 * @param array $property_conditions
 * @param array $field_conditions
 *
 * @return mixed
 *
 * @see entityreference_autocomplete_element_info()
 */
function moha_form_element_entity_ref($title = '', $description = '', $default = NULL, $entity_type = '',
                                      $cardinality = 1, $property_conditions = array(), $field_conditions = array()) {
  $element['#type'] = 'entityreference';
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#default_value'] = (isset($default)) ? $default : '';
  $element['#era_entity_type'] = $entity_type;
  $element['#era_cardinality'] = $cardinality;
  $element['#era_entity_type'] = $entity_type;
  $element['#era_query_settings']['property_conditions'] = $property_conditions;
  $element['#era_query_settings']['field_conditions'] = $field_conditions;

  return $element;
}

/**
 * Returns render array for draggable table.
 * If added weight column, this table will be shown as draggable table.
 *
 * @param $header
 * @param $rows
 *   If true
 * @param $empty
 *
 * @return array
 *
 * @see theme_moha_ui_draggable_table()
 */
function moha_form_element_table($rows, $header = array(), $empty = 'No Data.') {
  $element['#type'] = MOHA_UI__ELEMENT__DRAGGABLE_TABLE;
  $element['#header'] = $header;
  $element['#rows'] = $rows;
  $element['#empty'] = $empty;
  $element['#tree'] = TRUE;

  return $element;
}

/**
 * @param $container
 *
 * @return array
 */
function &moha_form_element_inline_2_table(&$container) {
  $rows = array();

  foreach(element_children($container) as $item) {
    $rows[$item]['item'] = $container[$item]['#title'];
    $container[$item]['#title'] = '';
    $rows[$item][$item] = $container[$item];
  }
  $container = moha_form_element_table($rows, array('Item', 'Value'));
  $container['#tree'] = FALSE;

  return $container;
}

/**
 * Returns render array for invisible iframe.
 *
 * @param array $urls
 *
 * @return array
 */
function moha_form_element_invisible_iframe($urls = array()) {
  $element['#type'] = MOHA_UI__ELEMENT__INVISIBLE_IFRAME;
  $element['#urls'] = $urls;

  return $element;
}

/**
 * Returns render array for invisible iframe.
 *
 * @param $duration
 *   Duration time, unit is second.
 *
 * @param $text_loading
 * @param $text_finished
 *
 * @return array
 *
 * @see moha_ui_element_info()
 * @see moha_ui_loading()
 */
function moha_form_element_loading($duration = 5, $text_loading = 'Loading', $text_finished = 'Done') {
  $element['#type'] = MOHA_UI__ELEMENT__LOADING;
  $element['#duration'] = $duration; /* Unit: second */
  $element['#text_loading'] = $text_loading;
  $element['#text_finished'] = $text_finished;
  return $element;
}

/**
 * Returns render array for moha_ui_date_range.
 *
 * @param $title
 * @param $description
 * @param $default
 *
 * @return array
 */
function moha_form_element_date_range($title = '', $description = '', $default = array()) {
  $element['#type'] = MOHA_UI__ELEMENT__DATE_RANGE;
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#default_value'] = (!empty($default)) ? $default : array();

  return $element;
}

/**
 * Returns render array for adminLTE box.
 *
 * @param string $title
 * @param string $style
 * @param bool $border
 * @param string $column
 * @param bool $collapsable
 * @param bool $collapsed
 * @param $padding
 *   If set padding for box body.
 *
 * @return mixed
 */
function moha_form_element_adminlte_box($title = '', $column = 'col-xs-12', $style = 'box-default', $border = FALSE, $collapsable = TRUE, $collapsed = TRUE, $padding = TRUE) {
  $element['#type'] = MOHA_UI__ELEMENT__ADMINLTE_BOX;
  $element['#title'] = t($title);
  $element['#column'] = $column;
  $element['#style'] = $style;
  $element['#border'] = $border;
  $element['#collapsable'] = $collapsable;
  $element['#collapsed'] = $collapsed;
  $element['#padding'] = $padding;

  return $element;
}

/**
 * Returns render array for adminLTE Summary block.
 *
 * @param string $title
 * @param string $description
 * @param string $style
 * @param string $column
 * @param string $type
 * @param string $icon
 * @param string $more
 *
 * @return mixed
 */
function moha_form_element_adminlte_summary($title = '', $description = '', $style = 'box-default',
                                            $column = 'col-md-4 col-xs-6', $icon = '<i class="ion ion-person-add"></i>',
                                            $type = MOHA_UI__ADMINLTE_SUMMARY_TYPE__ICON_MORE, $more = '') {
  $element['#type'] = MOHA_UI__ELEMENT__ADMINLTE_SUMMARY;
  $element['#title'] = t($title);
  $element['#description'] = t($description);
  $element['#column'] = $column;
  $element['#style'] = $style;
  $element['#block_type'] = $type;
  $element['#icon'] = $icon;
  $element['#more'] = $more;

  return $element;
}

/**
 * Returns render array for container as bootstrap row.
 *
 * @param $additional_class
 *   Additional clesses which will be add with .row class.
 *
 * @return mixed
 */
function moha_form_element_bootstrap_row($additional_class = '') {
  $element['#prefix'] = "<div class='row $additional_class'>";
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Generate form actions per passed buttons definition.
 *
 * @param $form
 *   Form array.
 *
 * @param $buttons
 *
 * @return mixed
 */
function &moha_form_actions(&$form, $buttons = array('Save')) {
  if (!isset($form['actions'])) {
    $form['actions'] = array('#type' => 'actions');
  }

  if (is_string($buttons)) {
    $buttons = array($buttons);
  }

  foreach ($buttons as $name) {
    $form['actions'][moha_h2m($name)] = array(
      '#type' => 'submit',
      '#value' => t($name),
    );
  }

  return $form;
}

/**
 * Generate form link action.
 *
 * @param $form
 *
 * @param $links
 *   Associative array:
 *     Key => URI/URL or
 *     Key => Array(URI/URL, OPTIONS items)
 *   Example: @see moha_user_form_user_login_alter
 *
 * @return array
 *   Render array.
 */
function moha_form_actions_link(&$form, $links = array()) {

  if (empty($form['actions'])) {
    $form['actions'] = array('#type' => 'actions');
  }

  $options = array(
    'attributes' => array(
      'class' => array('button', 'form-submit'),
      'target' => '_blank',
    )
  );

  foreach ($links as $name => $link) {
    if (is_string($link)) {
      $form['actions'][moha_h2m($name)] = array(
        '#type' => 'markup',
        '#markup' => l(t($name), $link, $options),
      );
    }
    else if (is_array($link)) {
      $uri = array_shift($link);
      $options = drupal_array_merge_deep($options, $link);

      $form['actions'][moha_h2m($name)] = array(
        '#type' => 'markup',
        '#markup' => l(t($name), $uri, $options),
      );
    }
  }

  return $form;
}

/**
 *
 * @param $form
 *   Render array.
 *
 * @param $group
 *   Module name, element id, etc
 *
 * @param $key
 *   Key to seek value in JS.
 *
 * @param $value
 *   Value which to pass.
 *
 * @return array
 */
function &moha_attach_js_settings(&$form, $group, $key, $value) {

  if (!empty($group) && !empty($key) && !empty($value)) {
    $form['#attached']['js'][] = array(
      'data' => array(
        $group => array(
          $key => $value,
        ),
      ),
      'type' => 'setting',
    );
  }

  return $form;
}

/**
 *
 *
 * @param $form
 * @param $file
 *
 * @return array
 */
function &moha_attach_js(&$form, $file) {
  $form['#attached']['js'][] = array(
    'data' => $file,
    'type' => 'file',
  );

  return $form;
}

/**
 *
 * @param $form
 * @param $file
 */
function &moha_attach_css(&$form, $file) {
  $form['#attached']['css'][] = $file;
  return $form;
}

/**
 *
 * @param $form
 * @param $admin
 *
 * @return array
 */
function &moha_attach_library_moha_ui(&$form, $admin = FALSE) {
  $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI);

  if ($admin) {
    $form['#attached']['library'][] = array(__MOHA_UI, __MOHA_UI_ADMIN);
  }

  return $form;
}



/**
 * Set text_format to specified value.
 *
 * @param $element
 *   Form element.
 * @param $text_format
 *   Text format.
 */
function moha_text_format_set(&$element, $text_format) {
  if (isset($element[LANGUAGE_NONE]) && !empty($text_format)) {
    foreach (element_children($element[LANGUAGE_NONE]) as $index) {
      if ($element[LANGUAGE_NONE][$index]['#type'] == 'text_format' && $element[LANGUAGE_NONE][$index]['#format'] == NULL) {
        $element[LANGUAGE_NONE][$index]['#format'] = $text_format;
      }
    }
  }
}

/**
 * Set configurations for inline container element.
 *
 * @param $form_element_container
 *   form element.
 */
function &moha_form_set_inline_container(&$form_element_container) {
  $form_element_container['#type'] = 'container';
  $form_element_container['#attributes'] = array('class' => array('container-inline'));
  return $form_element_container;
}

/**
 * Add inline wrapper without additional form element.
 *
 * @param $form_element
 *   form element.
 */
function moha_form_apply_inline_wrapper(&$form_element) {
  $form_element['#prefix'] = '<div class="container-inline">';
  $form_element['#suffix'] = '</div>';
}

/**
 * With of input on vertical tab is set to 100% in seven theme.
 * This function will apply inline style on input element directly.
 *
 * @param $form_element
 */
function moha_form_input_fix_on_vertical_tab(&$form_element) {
  global $theme_key;

  if ($theme_key == 'seven') {
    $form_element['#attributes']['style'] = 'width: inherit;';
  }
}

/**
 * Returns options array per vocabulary.
 *
 * @param string $vocabulary_name
 *
 * @return array
 */
function moha_form_options_from_vocabulary($vocabulary_name = '') {
  $options = array();

  if (empty(trim($vocabulary_name))) {
    return $options;
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);

  if (!empty($vocabulary) && !empty($vocabulary->vid)) {
    $terms = taxonomy_get_tree($vocabulary->vid);

    foreach ($terms as $term) {
      $options[$term->tid] = $term->name;
    }
  }

  return $options;
}

/**
 * Returns options array of entity types as form options.
 *
 * @param $excludes
 *   entity types which need be excluded from options.
 *
 * @return array
 */
function moha_form_options_from_entity($excludes) {

  if (!is_array($excludes)) {
    $excludes = array($excludes);
  }

  $entity_options = array();
  $entities = entity_get_info();

  foreach ($entities as $entity_name => $entity) {
    foreach ($excludes as $exclude) {
      if ($entity_name == $exclude) {
        continue 2;
      }
    }
    $entity_options[$entity_name] = $entity['label'];
  }

  return $entity_options;
}

/**
 * @param $array
 *
 * @return mixed
 */
function &moha_sort_per_weight(&$array) {
  uasort($array, 'drupal_sort_weight');

  return $array;
}


/**
 * Turn admin data configuration form to draggable table.
 *   Weight row must have row-weight class:
 *
 * @example
 *   '#attributes' => array('class' => array('row-weight')),
 *
 * Suitable for:
 * - link configuration form.
 *
 * @throws Exception
 */
function theme_moha_admin_form_2_draggable_table($variables) {
  $element = $variables['form'];

  $header = array();
  $element_keys = element_children($element);

  if (empty($element_keys)){
    return theme('table', array(
      'header' => array(),
      'rows' => array(),
      'empty' => $element['#empty'],
      'attributes' => array('id' => $element['#id'] . '-draggable-table'),
    ));
  }

  $rows = array();

  foreach ($element_keys as $key) {
    $row = array();
    $row['data'] = array();
    $index = 0;
    foreach ($element[$key] as $field_name => $field_content) {
      $first = substr($field_name, 0, 1);
      if ($first == '#') {
        // Skip default form property.
        continue;
      }
      $header[$index++] = $field_name;
      $row['data'][] = drupal_render($field_content);
      $row['class'] = array('draggable');

    }
    $rows[] = $row;
  }

  // New row on fly http://drupal.stackexchange.com/questions/63126/adding-new-rows-on-a-draggable-table-via-jquery.
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $element['#id'] . '-draggable-table'),
  ));

  drupal_add_tabledrag($element['#id'] . '-draggable-table', 'order', 'sibling', 'row-weight');

  return $output;
}


/**
 * Eliminate empty record.
 *
 * @param array $values
 * @param array $condition_columns
 *
 * @return array
 */
function moha_draggable_table_data_trim_empty(&$values, $condition_columns = array('name')) {
  if (!is_array($values)) {
    return array();
  }

  $array_length = count($values);

  for ($i = 0; $i < $array_length; $i++) {
    $current = $values[$i];

    $unset_flag = FALSE;

    foreach ($condition_columns as $column) {
      if (empty($current[$column])) {
        $unset_flag = TRUE;
      }
    }

    if ($unset_flag) {
      unset($values[$i]);
    }
  }

  return $values;
}


/**
 * sort passed array per weight, then eliminate weight after sorting.
 */
function moha_draggable_table_data_trim_weight(&$values) {
  uasort($values, 'drupal_sort_weight');
  $values = array_values($values);
  array_walk($values, 'moha_unset_weight');

  return $values;
}

/**
 * Recall weight element from an array.
 */
function moha_unset_weight(&$item) {
  if (isset($item['weight'])) {
    unset($item['weight']);
  }
}

function moha_draggable_table_data_prepare_for_saving(&$values) {
  $values = moha_draggable_table_data_trim_empty($values);
  $values = moha_draggable_table_data_trim_weight($values);
  return $values;
}

/**
 * Implements hook_init().
 */
function moha_init() {
  moha_preview_handle();
}

/**
 * Change current user per passed preview query parameter.
 */
function moha_preview_handle() {
  // Return anonymous page for preview.
  $params = drupal_get_query_parameters();
  if (isset($params['preview'])) {
    $uid = $params['preview'];

    if (user_access(MOHA__PERMISSION__SITE_PREVIEW) ||
      user_access(MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS)) {

      drupal_save_session(FALSE);
      global $user;
      $new_user = NULL;

      // If passed UID is invalid, or user doesn't exist, preview as anonymous.
      if (user_access(MOHA__PERMISSION__SITE_PREVIEW) && is_numeric($uid)) {

        if ($user->uid == $uid) { return; }
        $new_user = user_load($uid);
        if ($new_user) { $user = $new_user; }
      }

      if (empty($new_user)) {
        $user = user_load(0);
      }

      // Suppress fancy stuff like admin and admin_menu.module for the preview.
      module_invoke_all('suppress');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function moha_preprocess_html(&$variables) {

  /* Add meta tag, actual effect: <meta name="referrer" content="no-referrer" /> */
  $meta_description = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'referrer',
      'content' => "no-referrer",
    )
  );

  drupal_add_html_head($meta_description, 'no-referrer');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see hook_preprocess_HOOK
 */
function moha_preprocess_page(&$variables) {
  if (isset($variables['node']->type)) {
    // If the content type's machine name is "my_machine_name" the file
    // name will be "page--my-machine-name.tpl.php".
    $variables['theme_hook_suggestions'][] = 'page__' . $variables['node']->type;
  }
}

/**
 * Create new profile2 file type for user.
 *
 * @param string $profile2_name
 *   Profile2 name.
 */
function moha_create_profile2($profile2_name = MOHA) {
  $moha_profile = entity_create('profile2_type', array(
    'type' => moha_h2m($profile2_name),
    'label' => $profile2_name,
    'module' => moha_h2m($profile2_name),
    'data' => array(
      'registration' => FALSE,
      'use_page' => TRUE,
    ),
  ));

  /** @var $moha_profile Profile */
  $moha_profile->save();
}

/**
 * Creates taxonomies as passed array.
 *
 * @param $taxonomies array
 *   'name'
 *   'description'
 *   'machine_name'
 *   'terms'
 */
function moha_create_taxonomies($taxonomies = array()) {
  foreach ($taxonomies as $taxonomy) {
    // If not exists, create Taxonomy vocabulary.
    $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy['machine_name']);

    if (empty($vocabulary)) {
      $vocabulary = (object)$taxonomy;
      taxonomy_vocabulary_save($vocabulary);
    }

    // Creates terms.
    foreach ($taxonomy['terms'] as $term_value) {
      $terms = taxonomy_get_term_by_name($term_value, $vocabulary->machine_name);

      if (empty($terms)){
        $term = new stdClass();

        $term->vid = $vocabulary->vid;
        $term->name = $term_value;

        taxonomy_term_save($term);
      }
    }
  }
}

/**
 * Returns tid by term name.
 *
 * @param $term_name
 *
 * @param $vocabulary_name
 *
 * @return bool
 */
function moha_tid_by_term_name($term_name, $vocabulary_name = NULL){
  $terms = taxonomy_get_term_by_name($term_name, $vocabulary_name);
  if (empty($terms)){
    return FALSE;
  }

  $term = array_shift($terms);
  return $term->tid;
}

/**
 * Returns term name by tid.
 *
 * @param $tid string
 *   taxonomy id.
 *
 * @return string
 *   taxonomy name.
 */
function moha_term_name_by_tid($tid) {
  $term = taxonomy_term_load($tid);
  if ($term) {
    $name = $term->name;
  }
  else {
    $name = '';
  }
  return $name;
}

/**
 * @param $node_type string
 *
 */
function moha_hide_node_comment($node_type){
  variable_set('comment_' . $node_type, COMMENT_NODE_HIDDEN);
}

/**
 * Get drupal variable which is stored in form of array.
 *
 * @param $variable_name
 * @param $key
 * @param $default string
 *
 * @return string
 */
function moha_array_variable_get($variable_name, $key, $default = "") {
  $values = variable_get($variable_name);

  if (empty($values[$key])) {
    return $default;
  }
  else {
    return $values[$key];
  }
}

/**
 * Set drupal variable which is stored in form of array.
 *
 * @param $variable_name
 *   Drupal variable name which is stored
 * @param $key
 *   Key name in array.
 * @param $value
 *   Value which will be set to $key.
 */
function moha_array_variable_set($variable_name, $key, $value = ""){
  $values = variable_get($variable_name);
  $values[$key] = $value;
  variable_set($variable_name, $values);
}

/**
 * Get drupal variable which is stored in variables array of MOHA.
 *
 * @param $key
 *   Variable key name in array.
 * @param $default mixed
 *   Default value if variable hasn't been set.
 *
 * @return mixed
 */
function moha_variable_get($key, $default = "") {
  return moha_array_variable_get(MOHA__VARIABLES, $key, $default);
}

/**
 * Set drupal variable which is stored in variables array of MOHA.
 *
 * @param $key
 *   Variable key name in array.
 * @param $value
 *   Value which will be set to $key.
 */
function moha_variable_set($key, $value = ""){
  moha_array_variable_set(MOHA__VARIABLES, $key, $value);
}

/**
 * Get cached data by ID.
 *
 * @param $cid string
 *   Cache ID.
 *
 * @param $default
 *   Default value.
 *
 * @param $use_static
 *   True to further cache value per request.
 *
 * @return mixed
 */
function moha_cache_get($cid, $default = '', $use_static = TRUE) {
  if ($use_static) {
    $static = &drupal_static(__MOHA);
  }
  else {
    $static = array();
  }

  if (!isset($static[$cid])) {
    if ($cache = cache_get($cid)) {
      $ret = $static[$cid] = $cache->data;
    }
    else {
      $ret = $default;
    }
  }
  else {
    $ret = $static[$cid];
  }

  return $ret;
}

/**
 * Cache the data by ID.
 *
 * @param $cid string
 *   Cache ID.
 *
 * @param $value mixed
 *   Data which need be cached.
 *
 * @param $expire_in_seconds
 *   Number in unit of seconds, could be set as Cache constant as well.
 *
 * @see CACHE_PERMANENT
 * @see CACHE_TEMPORARY
 */
function moha_cache_set($cid, $value, $expire_in_seconds = CACHE_PERMANENT) {
  $static = &drupal_static(__MOHA);
  $static[$cid] = $value;
  if ($expire_in_seconds > 0) {
    $expire = time() + $expire_in_seconds;
  }
  else {
    $expire = $expire_in_seconds;
  }
  cache_set($cid, $value, 'cache', $expire);
}

/**
 * Remove cached data by ID.
 *
 * @param $cid string
 *   Cache ID.
 */
function moha_cache_del($cid) {
  $static = &drupal_static(__MOHA);
  unset($static[$cid]);

  cache_clear_all($cid, 'cache');
}

/**
 * Configuration values get, fallback from cache to variable.
 *
 * @param $key
 * @param $default
 *
 * @return mixed
 */
function moha_cache_variable_get($key, $default = '') {
  $value = moha_cache_get($key);

  if (empty($value)) {
    $value = moha_variable_get($key, $default);
    moha_cache_set($key, $value);
  }

  return $value;
}

/**
 * Returns block translated string.
 *
 * @param $variable_name
 * @param $module
 * @param $delta
 * @param $default
 *
 * @return mixed
 */
function moha_i18n_value($variable_name, $module, $delta, $default = '') {
  $value = variable_get($variable_name, $default);

  if (function_exists('i18n_string')) {
    $value = i18n_string('blocks:' . $module . ':' . $delta . ':' . $variable_name, $value, array(
      'format' => I18N_STRING_FILTER_XSS,
    ));
  }

  return $value;
}

/**
 * Stop request processing when unrecoverable or critical error occurs.
 *
 * @param $e \Exception
 *  Exception why processing need be ended up.
 *
 * @param $status_code int
 *  Customized http status code.
 */
function moha_http_response_error(Exception $e = NULL, $status_code = 503) {
  drupal_add_http_header('Status', $status_code . ' Service unavailable');

  if ($e != NULL) {
    print $e->getMessage();
  }

  drupal_exit();
}

/**
 * Api called by get.
 *
 * @param $url
 * @param array $options
 * @param string $return_type
 *
 * @throws \Exception
 */
function moha_api_get($url, $options = array(), $return_type = 'json') {
  return moha_api_post($url, $options, $return_type, 'GET');
}

/**
 * Api called by post.
 *
 * @param $url
 * @param array $options
 * @param string $request_type
 * @param string $return_type
 *
 * @return array
 *    Associate array.
 *
 * @throws \Exception
 */
function moha_api_post($url, $options = array(), $return_type = 'json', $request_type = "POST") {

  $options['method'] = $request_type;

  $res = drupal_http_request($url, $options);

  // Trace Called WeChat API, cutoff 1/2 sensitive information or only leave 10 characters.
  $auth_key = ''; $auth_key_print_allowed_length = 20;
  if (isset($options['headers']['authorization'])) {
    $auth_key = 'authorization';
  }
  else if (isset($options['headers']['Authorization'])) {
    $auth_key = 'Authorization';
  }
  else if (isset($options['headers']['AUTHORIZATION'])) {
    $auth_key = 'AUTHORIZATION';
  }

  if (!empty($auth_key)) {
    $options['headers'][$auth_key] = substr($options['headers'][$auth_key], 0, (strlen($options['headers'][$auth_key])/2 < $auth_key_print_allowed_length) ? strlen($options['headers'][$auth_key])/2 : $auth_key_print_allowed_length);
    watchdog( __FUNCTION__,
      '@URL<pre>!DATA</pre>',
      array(
        '@URL' => $url,
        '!DATA' => print_r($options, TRUE),
      ),
      WATCHDOG_INFO
    );
  }

  if (!isset($res->data) || isset($res->error)) {
    // No response data, network error.
    throw new Exception($res->error, $res->code);
  }
  else {
    $response_message = '';

    if (isset($res->status_message)) {
      $response_message = $res->status_message;
    }

    watchdog( __FUNCTION__,
      "response: @code @msg",
      array(
        '@code' => $res->code,
        '@msg' => $response_message,
      ),
      WATCHDOG_INFO
    );

    if ($return_type == 'json') {
      $data = json_decode($res->data, TRUE);

      if (!$data) {
        throw new Exception('No decode-able JSON string in response!');
      }
      else if (!empty($data['errcode'])) { // $json['errcode'] is set and value is not 0.
        throw new Exception(isset($data['errmsg'])?$data['errmsg']:t('no error message'), $data['errcode']);
      }

      return $data;
    }
    else {
      return $res->data;
    }
  }
}

/**
 * Checks suspend flag, if TRUE is assigned, through an exception.
 *
 * @param $suspend_variable_name
 *   if variable is true, throws exception.
 *
 * @param $default
 *   Default value is variable hasn't been set.
 *
 * @throws Exception
 *   if passed variable is set to TRUE.
 */
function moha_throw_exception_per_variable($suspend_variable_name, $default = FALSE) {
  $exception = moha_cache_get($suspend_variable_name, $default, FALSE);

  if ($exception) {
    throw new Exception(" $suspend_variable_name is TRUE");
  }
}

/**
 * Shows error message when exception occurs for administrator.
 *
 * @param \Exception $e
 *   occurring exception.
 *
 * @param string $message_type
 *  (optional) The message's type. Defaults to 'error'.
 *  These values are supported:
 *    - 'status'
 *    - 'warning'
 *    - 'error'
 */
function moha_show_exception(Exception $e, $message_type = 'error') {
  drupal_set_message(t("Oops: !msg", array('!msg' => $e->getMessage())), $message_type);
}

/* Common functions. */
/**
 * Generates and returns nonce string
 *
 * @param int $length
 *
 * @return string
 */
function moha_nonce($length = 16) {
  // potential characters
  $chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

  $str = "";
  for ($i = 0; $i < $length; $i++) {
    $str .= $chars[mt_rand(0, strlen($chars) - 1)];
  }
  return $str;
}

/**
 * Store value and get a uuid as key to fetch later.
 *
 * @param $original
 *   state code embedded in URL when request OAuth2 authentication.
 *
 * @return string
 *   UUID.
 */
function moha_state_set($original = '') {
  $uuid = uuid_generate();
  $cache_id = __MOHA . ':state:' . $uuid;

  moha_cache_set($cache_id, $original, 60*60*24);

  return $uuid;
}

/**
 * Get a stored value through UUID state key.
 *
 * @param $state_uuid
 *   state code embedded in URL when request OAuth2 authentication.
 *
 * @param  $default
 *
 * @return mixed
 */
function moha_state_get($state_uuid = '', $default = '') {
  $cache_id = __MOHA . ':state:' . $state_uuid;

  $value = moha_cache_get($cache_id, $default);
  moha_cache_del($cache_id);

  return $value;
}

/**
 * Convert NULL to empty string.
 *
 * @param $variable
 * @param $default string
 *  Default value when $variable is NULL.
 *
 * @return string
 */
function moha_n2e($variable, $default = '') {
  if ($variable === NULL) {
    return $default;
  }
  else {
    return $variable;
  }
}

/**
 * Identified NULL or nonexistent array element to $default string.
 *
 * @param $array
 * @param $key
 * @param $default string
 *  Default value when element is NULL.
 *
 * @return mixed
 */
function moha_an2e($array, $key, $default = '') {
  if (isset($array[$key]) && $array[$key] !== NULL) {
    return $array[$key];
  }
  else {
    return $default;
  }
}

/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function moha_h2m($human_name) {
  $converted = &drupal_static(__FUNCTION__);

  if(empty($converted) || !isset($converted[$human_name])){
    $machine_name = strtolower($human_name);
    $machine_name = preg_replace('@[^a-z0-9\-_]+@', '_', $machine_name);
    $converted[$human_name] = $machine_name;
  }
  else {
    $machine_name = $converted[$human_name];
  }

  return $machine_name;
}

/**
 * Uppercase the first character of each word in a string.
 *
 * @param $text
 *
 * @return mixed
 */
function moha_ucwords($text) {
  global $multibyte;

  if ($multibyte == UNICODE_MULTIBYTE) {
    return mb_convert_case($text, MB_CASE_TITLE);
  }
  else {
    return ucwords($text);
  }
}

/**
 * Returns array of status value -> literal label.
 *
 * @param $value
 *  if value is passed, return related key.
 *
 * @return mixed
 */
function moha_array_key_by_value($value = "", $array = array()) {

  if (trim($value) == "") {
    throw new InvalidArgumentException('$value is not specified.');
  }
  else {
    $key = array_search($value, $array);
    if ($key === false) {
      throw new InvalidArgumentException("$value is not contained in array.");
    }
    else {
      return $key;
    }
  }
}

/**
 * Convert to celsius degree.
 *
 * @param $degree
 *
 * @return int
 */
function moha_toCelsius($degree) {
  return ($degree - 32) * 5 / 9;
}

/**
 * Convert to fahrenheit degree.
 *
 * @param $degree
 *
 * @return int
 */
function moha_toFahrenheit($degree) {
  return $degree * 9 / 5 + 32;
}

/**
 * If passed string start with expectation string.
 *
 * @param $string
 * @param $needle
 *
 * @return bool
 */
function moha_start_with($string, $needle)
{
  $length = strlen($needle);
  $result = (substr($string, 0, $length) === $needle);

  return $result;
}

/**
 * If passed string end with expectation string.
 *
 * @param $string
 * @param $expectation
 *
 * @return bool
 */
function moha_end_with($string, $expectation)
{
  $length = strlen($expectation);

  if ($length == 0) {
    return true;
  }

  $result = (substr($string, -$length) === $expectation);

  return $result;
}

/**
 * Trim last characters from passed string.
 *
 * @param $string string
 *   String to trim.
 *
 * @param $number mixed
 *
 * @return string
 */
function moha_trim_last($string = '', $number = 1) {
  if (empty($string) || empty($number) || empty($number)) {
    return $string;
  }

  if (is_numeric($number)) {
    $string = mb_substr($string, 0, 0 - $number);
  }

  return $string;
}

/**
 * Returns how many new lines in passed string.
 *
 * @param $string
 * @return int
 */
function moha_count_line($string = '') {
  $count = substr_count($string, "\n" );
  return $count;
}

/**
 * Polyfill: array_key_first.
 */
if (!function_exists('array_key_first')) {
  function array_key_first(array $arr) {
    foreach($arr as $key => $unused) {
      return $key;
    }
    return NULL;
  }
}

include_once 'ckeditor/moha.ckeditor.inc';
