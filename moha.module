<?php
/**
 * @file
 * Common used functions and global configurations.
 */

/**
 * Http request timeout, unit is second.
 */
define('MOHA__TIME_OUT__HTTP_REQUEST', '120');

/**
 * Human name.
 */
define('MOHA', 'Moha');

/**
 * Machine name.
 */
define('__MOHA', 'moha');

/**
 * moha__variables.
 */
define('MOHA__VARIABLES', __MOHA . '__variables');

/**
 * sites/all/modules/custom/moha
 */
define('MOHA__PATH', drupal_get_path('module', __MOHA));

/**
 * /sites/all/modules/custom/moha
 */
define('__MOHA__PATH', base_path() . MOHA__PATH);

/**
 * Entity human name: Moha RACI.
 */
define('MOHA_RACI', 'Moha RACI');

/**
 * Entity machine name: moha_raci.
 */
define('__MOHA_RACI', 'moha_raci');

/**
 * Moha URL: Moha entities summary page.
 */
define('MOHA__URL__ENTITIES', 'admin/moha/entities');

/**
 * Moha URL: Moha RACI management page.
 */
define('MOHA__URL__RACI_ADMIN_UI', MOHA__URL__ENTITIES . '/raci');

/**
 * Permission: Edit any Moha RACI.
 */
define('MOHA__PERMISSION__EDIT_ANY_RACI', 'edit any moha raci');

/**
 * Permission: Site root.
 */
define('MOHA__PERMISSION__ROOT', 'administer site configuration');

/**
 * Permission: Anonymous.
 */
define('MOHA__PERMISSION__ANONYMOUS', 'access content');

/**
 * Permission: Site Preview.
 */
define('MOHA__PERMISSION__SITE_PREVIEW', 'moha site preview as user');

/**
 * Permission: Site Preview.
 */
define('MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS', 'moha site preview as anonymous');

/**
 * JSON encoding options: bitmask.
 */
define("MOHA__JSON_ENCODING_OPTIONS_BIT_MASK", JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);

/**
 * Define common used constants.
 */
define('MOHA__CONSTANTS', array(
  '134217728' => '128M',
  '134,217,728' => '128M',
  '268435456' => '256M',
  'DAY_IN_SECONDS' => 60*60*24,
  'WEEK_IN_SECONDS' => 60*60*24*7,
  'YEAR_IN_SECONDS' => 60*60*24*365,
));

/**
 * Data format:
 */
define ('MOHA__DATETIME_FORMAT__SHORT', 'Y-m-d H:i');

/**
 * Form OP: Save.
 */
define('MOHA__FORM_OP__SAVE', 'Save');

/**
 * Form OP: Update.
 */
define('MOHA__FORM_OP__UPDATE', 'Update');

/**
 * Form OP: Delete.
 */
define('MOHA__FORM_OP__DELETE', 'Delete');

/**
 * Moha Term: Checking.
 */
define('MOHA__TERM__CHECKING', 'Checking');

/**
 * Moha Term: Configuration.
 */
define('MOHA__TERM__CONFIGURATION', 'Configuration');

/**
 * Moha Term: Backup.
 */
define('MOHA__TERM__BACKUP', 'Backup');

/**
 * Moha Term: Communication.
 */
define('MOHA__TERM__COMMUNICATION', 'Communication');

/**
 * Moha Term: Development.
 */
define('MOHA__TERM__DEVELOPMENT', 'Development');

/**
 * Moha Term: Uploading.
 */
define('MOHA__TERM__UPLOADING', 'Uploading');

/**
 * Moha Status: configuration.
 */
define('MOHA__TERM__DELETED', 'Deleted');

/**
 * Moha Status: Active.
 */
define('MOHA__TERM__ACTIVE', 'Active');

/**
 * Moha Status: Disabled.
 */
define('MOHA__TERM__DISABLED', 'Disabled');

/**
 * Moha Status: Processed.
 */
define('MOHA__TERM__PROCESSED', 'Processed');

/**
 * Moha Status: Queued.
 */
define('MOHA__TERM__QUEUED', 'Queued');

/**
 * Moha Status: Pending.
 */
define('MOHA__TERM__PENDING', 'Pending');

/**
 * Moha Status: Suspended.
 */
define('MOHA__TERM__SUSPENDED', 'Suspended');

/**
 * Moha Status: Success.
 */
define('MOHA__TERM__SUCCESS', 'Success');

/**
 * Moha Status: Fail.
 */
define('MOHA__TERM__FAILURE', 'Failure');

/**
 * Moha Status array: entity.
 */
define('MOHA__STATUS__ENTITY', array(
  0 => MOHA__TERM__DELETED,
  1 => MOHA__TERM__ACTIVE,
  2 => MOHA__TERM__DISABLED,
  3 => MOHA__TERM__QUEUED,
  4 => MOHA__TERM__PENDING,
  6 => MOHA__TERM__SUCCESS,
  100 => MOHA__TERM__PROCESSED,
  -900 => MOHA__TERM__SUSPENDED,
  -999 => MOHA__TERM__FAILURE,
));

/**
 * Moha RACI: Accountable.
 */
define('MOHA__TERM__ACCOUNTABLE', 'Accountable');

/**
 * Moha RACI: Responsible.
 */
define('MOHA__TERM__RESPONSIBLE', 'Responsible');

/**
 * Moha RACI: Consulted.
 */
define('MOHA__TERM__CONSULTED', 'Consulted');

/**
 * Moha RACI: Informed.
 */
define('MOHA__TERM__INFORMED', 'Informed');

/**
 * Moha Status array: RACI.
 */
define('MOHA__STATUS__RACI', array(
  0 => MOHA__TERM__ACCOUNTABLE, // Resource Owner.
  1 => MOHA__TERM__RESPONSIBLE, // Principal.
  2 => MOHA__TERM__CONSULTED,
  3 => MOHA__TERM__INFORMED,
));

/**
 * Implements hook_theme().
 */
function moha_theme($existing, $type, $theme, $path) {
  $themes = array(
    'moha_admin_form_2_draggable_table' => array(
      'render element' => 'form',
    ),
  );

  return $themes;
}

function moha_define_entity($module, $machine_name, $human_name, $class_prefix, $admin_url) {
  $entity_definition = array(
    'label' => t($human_name),
    'plural label' => t($human_name . 's'), // Moha Mailer Mails
    'base table' => $machine_name,
    'revision table' => $machine_name . '_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    // Refer label from $entity['entity keys']['label].
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* Entity management page URL & Class. */
      'path' => $admin_url,
      'controller class' => $class_prefix . 'EntityAdminController',

      /** @see entity_ui_get_form() */
      /* Entity add / edit forms containing file. */
      'file' => 'includes/' . $class_prefix . 'Entity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => $module,
    'access callback' => 'moha_entity_access',

    'entity class' => $class_prefix . 'Entity',
    'controller class' => 'MohaCommonEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity un-fieldable;
    /** @see field_attach_form to attach added fields. */
    'fieldable' => FALSE,
    'bundles' => array(),

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $entity_definition;
}

/**
 * Implements hook_entity_info().
 *
 * Declares entity: moha_raci.
 */
function moha_entity_info() {
  $items = array();

  // Stores basic information of an RACI.
  // @see: https://www.drupal.org/docs/7/api/entity-api/providing-a-new-entity-type
  $items[__MOHA_RACI] = array(
    'label' => t(MOHA_RACI),
    'plural label' => t(MOHA_RACI . 's'), // Moha RACIs
    'base table' => __MOHA_RACI,
    'revision table' => __MOHA_RACI . '_revision',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'id',
      'revision' => 'vid',
    ),
    //
    'label callback' => 'entity_class_label',

    /** @see entity_crud_hook_entity_info() */
    'admin ui' => array(
      /* Moha RACI management page URL & Class. */
      'path' => MOHA__URL__RACI_ADMIN_UI,
      'controller class' => 'MohaRACIEntityAdminController',

      /** @see entity_ui_get_form() */
      /* Moha RACI add / edit forms containing file. */
      'file' => 'includes/MohaRACIEntity.form.inc',  //
    ),

    // Declares which module contains related Class information, like Admin UI Class, etc.
    'module' => __MOHA,

    /** @see entity_access() */
    'access callback' => 'moha_entity_access',

    'entity class' => 'MohaRACIEntity',
    'controller class' => 'MohaRACIEntityController',
    // Uses defaultUri method of entity class to generate entity URL.
    'uri callback' => 'entity_class_uri',

    // Make entity fieldable; @see field_attach_form to attach added fields.
    'fieldable' => TRUE,
    'bundles' => array(
      __MOHA_RACI => array(
        'label' => t(MOHA_RACI),
        'plural label' => t(MOHA_RACI . 's'),
        'admin' => array(
          'path' => MOHA__URL__RACI_ADMIN_UI,
          'access arguments' => array(MOHA__PERMISSION__EDIT_ANY_RACI),
        ),
      ),
    ),

    // Views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $items;
}

/**
 * Generates entity permission array.
 *
 * @param $entity_type
 *   Entity type name.
 *
 * @return array
 */
function moha_entity_permission($entity_type) {

  $permissions_array = array(
    'view own ' . $entity_type => array(
      'title' => t('View own ' . $entity_type),
    ),
    'view any ' . $entity_type => array(
      'title' => t('View any ' . $entity_type),
    ),
    'create ' . $entity_type => array(
      'title' => t('Create ' . $entity_type),
    ),
    'update own ' . $entity_type => array(
      'title' => t('Update own ' . $entity_type),
    ),
    'update any ' . $entity_type => array(
      'title' => t('Update any ' . $entity_type),
    ),
    'delete own ' . $entity_type => array(
      'title' => t('Delete own ' . $entity_type),
    ),
    'delete any ' . $entity_type => array(
      'title' => t('Delete any ' . $entity_type),
    ),
  );

  return $permissions_array;
}

/**
 * Determines whether the given user can perform actions on an entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity_type
 *   The entity type of the entity to check for.
 * @param $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function moha_entity_access($op, $entity, $account, $entity_type) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  if ($op == 'view') {
    if (user_access('view any ' . $entity_type, $account)) {
      return TRUE;
    };
  }
  elseif ($op == 'create') {
    return user_access('create ' . $entity_type, $account);
  }
  elseif ($op == 'update') {
    if (user_access('update any ' . $entity_type, $account)) {
      return TRUE;
    }
  }
  elseif ($op == 'delete') {
    if (user_access('delete any ' . $entity_type, $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Gets the status property of moha entity.
 */
function moha_entity_status_get($data, array $options, $name, $type, $info) {
  $name = isset($info['schema field']) ? $info['schema field'] : $name;

  if (isset($data[$name])) {
    return MOHA__STATUS__ENTITY[$name];
  }

  return 'No Status';
}

/**
 * @param $w object
 *   Entity Wrapper which need be inspected.
 *
 * @return array
 *   key-value pairs of wrapper object.
 */
function moha_entity_wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * Permissions administrator should have.
 *
 * @return array
 */
function moha_permissions_4_admin() {
  $admin_common_permissions = array(
    'view the administration theme',
    'access administration menu',
    'access administration pages',
    'flush caches',
    'access toolbar',
    'administer menu',
    'administer blocks',
    'edit own page content',
    'edit any page content',
    'access content',
  );

  return $admin_common_permissions;
}

/**
 * Implements hook_permission().
 */
function moha_permission() {
  $permissions = moha_entity_permission(__MOHA_RACI);

  $permissions[MOHA__PERMISSION__SITE_PREVIEW] = array(
    'title' => t('Moha Site Preview as user'),
    'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
  );
  $permissions[MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS] = array(
    'title' => t('Moha Site Preview as anonymous'),
    'description' => t('Warning: Give to trusted roles only; this permission has security implications.'),
  );

  return $permissions;
}

/**
 * Create necessary roles and permissions.
 */
function _moha_prepare_roles_and_permissions() {
  $manager_permission = array();

}

/**
 * Implements hook_image_default_styles().
 */
function moha_image_default_styles() {
  $styles = array();
  $styles['moha_feature'] = array(
    'label' => 'Moha Feature Image',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 720,
          'height' => '',
          'upscale' => 0,
          ),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_menu().
 */
function moha_menu() {
  $items['admin/moha'] = array(
    'title' => 'Moha',
    'description' => t('Moha enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -10,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[MOHA__URL__ENTITIES] = array(
    'title' => 'Moha Entities',
    'description' => t('Entities of Moha enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -9,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['moha/ckeditor-upload'] = array(
    'title' => t('Moha Ajax Backend - CKEditor File Uploading'),
    'description' => t('Accept file uploaded by Upload Image plugin of CKEditor.'),
    'page callback' => 'moha_ajax_upload_by_ckeditor',
    'access arguments' => array('post comments'),
    'file' => 'ckeditor/moha.ckeditor.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/moha/ckeditor-upload'] = array(
    'title' => t('Moha CKEditor File Uploading'),
    'description' => t('Configure storage for files uploaded by CKEditor.'),
    'page callback' => 'drupal_get_form',
    /* @see moha_ckeditor_upload_form() */
    'page arguments' => array('moha_ckeditor_upload_form'),
    'access arguments' => array(MOHA__PERMISSION__ROOT),
    'file' => 'ckeditor/moha.ckeditor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/moha/db-update'] = array(
    'title' => t('Moha DB Update'),
    'description' => t('Perform DB Schema or Table Update'),
    'page callback' => 'drupal_get_form',
    'page arguments' => 'moha_db_update_form',
    'access arguments' => array(MOHA__PERMISSION__ROOT),
    'file' => 'ckeditor/moha.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Hide menu add link.
 */
function moha_menu_alter(&$items) {
  // Upgrade add menu link permission.
  $items['admin/structure/menu/manage/%menu/add']['access arguments'][0] = 'administer site configuration';
}

/**
 * Implements hook_admin_paths().
 */
function moha_admin_paths() {
  $paths = array();

  /* Let imce use admin theme. */
  /* Removed, same could be implemented in IMCE configuration. */

  $paths['moha/*/add'] = TRUE;

  return $paths;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide menu link edit & delete button on menu items list page.
 */
function moha_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1 && !user_access('administer site configuration')) {
    foreach ($form as $key => $value) {
      if (strpos($key, "mlid") !== FALSE) {
        unset($form[$key]["operations"]["edit"]);
        unset($form[$key]["operations"]["delete"]);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Mount configurations which need be passed to templates.js of CKEditor.
 * TODO: Should only mount when CKEditor enable.
 */
function moha_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Pass path of CKEditor templates icons from PHP to JS.
  drupal_add_js(array(
    __MOHA => array(
      'ckeditor_template_image_path' => __MOHA__PATH . '/ckeditor/', // Usage: Drupal.settings.moha.ckeditor_template_image_path.
    )
  ), 'setting');
}

/**
 * Save node from ajax call.
 * don't call when create node.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function moha_node_ajax_save_callback($form, &$form_state){

  /** @see ajax_form_callback() */
  // validation will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return $form;
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form['changed'];
}

/**
 * Create DB tables per parameter if they are not ready.
 *
 * @param $schemas array
 *   hook_schema returned array.
 */
function moha_schema_create($schemas) {
  foreach ($schemas as $table_name => $table) {
    if (!db_table_exists($table_name)) {
      db_create_table($table_name, $table);
    }
    else {
      $columns = $table['fields'];

      foreach ($columns as $column_name => $column) {
        if (!db_field_exists($table_name, $column_name)) {
          db_add_field($table_name, $column_name, $column);
        };
      }
    }
  }
}

/**
 * Create DB tables per parameter if they are not ready.
 *
 * @param $hook_schema string
 *   hook_schema function name.
 *
 * @throws
 *   Passed function is not exist.
 */
function moha_schema_create_by_function($hook_schema) {
  if (function_exists($hook_schema)) {

    $schemas = $hook_schema();
    moha_schema_create($schemas);
  }
  else {
    throw new Exception("Func: $hook_schema does not exist.");
  }
}

/**
 * Grant permissions to specified role, if role doesn't exist, will be created first.
 *
 * @param string $role_name
 * @param array $permissions
 *  Permissions array.
 *
 * @return object $role
 */
function moha_grant_permissions_2_role_with_creation($role_name, $permissions = array()) {
  $role = user_role_load_by_name($role_name);

  if (!$role) {
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    $role = user_role_load_by_name($role_name);
  }

  // Passed permissions must be defined in certain module, filter out undefined permissions.
  // If permission <=> defined module map can't be fetched, no need to grant.
  $all_permissions = user_permission_get_modules();
  if (!empty($all_permissions) && is_array($permissions)) {
    foreach ($permissions as $key => $permission) {
      if (empty($all_permissions[$permission])) {
        unset($permissions[$key]);
      }
    }

    if (!empty($permissions)) {
      user_role_grant_permissions($role->rid, $permissions);
    }
  }

  return $role;
}

/**
 * Grant IMCE profile to specified role.
 *
 * @param string $role_name
 * @param int $profile_id
 */
function moha_grant_imce_profile_2_role($role_name, $profile_id = 0) {
  $roles_profiles = variable_get('imce_roles_profiles', array());

  $role = user_role_load_by_name($role_name);

  if ($role) {
    $roles_profiles[$role->rid] = array(
      'private_pid' => $profile_id,
      'public_pid' => $profile_id,
    );

    variable_set('imce_roles_profiles', $roles_profiles);
  }
}

/**
 * Create fields and instances per returned array by passed function.
 *
 * @param $get_fields_and_instances
 *   Function name which returns definition of fields and instances.
 *
 * @throws \FieldException
 */
function moha_create_fields_and_instances($get_fields_and_instances) {

  if (!function_exists($get_fields_and_instances)){
    throw new BadFunctionCallException($get_fields_and_instances . " doesn't exist.");
  }

  foreach ($get_fields_and_instances() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }

    if (!field_info_instance($field['entity_type'], $field['field_name'], $field['bundle'])) {
      field_create_instance($field);
    }
  }
}

/**
 * Returns field and instance definitions per types which requires body field.
 *
 * @param $types
 *   'entity'
 *   'bundle'
 *
 * @return array
 *   Body fields array.
 */
function moha_generate_description_fields_and_instances($types) {

  $fields = array();

  foreach ($types as $type) {
    $fields[] = array(
      'label' => 'Description',
      'field_name' => 'moha_description',
      'type' => 'text_with_summary',
      'entity_type' => $type['entity'],
      'bundle' => $type['bundle'],
      'widget' => array('type' => 'text_textarea_with_summary'),
      'settings' => array('display_summary' => TRUE),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
        ),
      ),
    );
  }

  return $fields;
}

/**
 * Add vertical tabs on passed form.
 *
 * @param $form
 */
function moha_form_add_vertical_tabs(&$form){
  $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
  );
}

/**
 * Add a tab named $tab_name on vertical_tabs.
 *
 * @param $form
 *
 * @param $tab_name string
 *   tab machine name
 */
function moha_form_add_vertical_tab(&$form, $tab_name) {
  if (!isset($form['vertical_tabs'])){
    moha_form_add_vertical_tabs($form);
  }

  $form[$tab_name] = array(
    '#type' => 'fieldset',
    '#title' => t(drupal_ucfirst($tab_name)),
    '#collapsible' => TRUE,
    '#group' => 'vertical_tabs',
  );
}

/**
 * Attach fields wrapper to passed form.
 *
 * @param $form
 *
 * @param $vertical_tabs
 *   if add entity fields on vertical tabs
 *
 */
function moha_form_add_entity_fields_wrapper(&$form, $vertical_tabs = TRUE){

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#collapsible' => TRUE,
  );

  if ($vertical_tabs) {
    if (!isset($form['vertical_tabs'])){
      moha_form_add_vertical_tabs($form);
    }
    
    $form['fields']['#group'] = 'vertical_tabs';
  }

  $form['fields']['hint'] = moha_form_element_prompt_imce_usage();

  $form['fields']['wrapper'] = array(
    '#type' => 'container',
  );
}

/**
 * Returns form element for prompt IMCE usage.
 *
 * @return array
 */
function moha_form_element_prompt_imce_usage() {
  $element = array(
    '#prefix' => '<div class="moha-admin-form-hint">',
    '#markup' => 'Hint: Public assets could be uploaded in <a target="_blank" href="/imce">imce</a>, private assets could be uploaded in <a target="_blank" href="/imce/private">imce/private</a>.',
    '#suffix' => '</div>',
    '#weight' => -99,
  );

  return $element;
}

/**
 * Set text_format to specified value.
 *
 * @param $element
 *   Form element.
 * @param $text_format
 *   Text format.
 */
function moha_text_format_set(&$element, $text_format) {
  if (isset($element[LANGUAGE_NONE]) && !empty($text_format)) {
    foreach (element_children($element[LANGUAGE_NONE]) as $index) {
      if ($element[LANGUAGE_NONE][$index]['#type'] == 'text_format' && $element[LANGUAGE_NONE][$index]['#format'] == NULL) {
        $element[LANGUAGE_NONE][$index]['#format'] = $text_format;
      }
    }
  }
}

/**
 * Set configurations for inline container.
 *
 * @param $form
 *   form element.
 */
function &moha_form_set_inline_container(&$form) {
  $form['#type'] = 'container';
  $form['#attributes'] = array('class' => array('container-inline'));
  return $form;
}

/**
 * Add inline wrapper without additional form element.
 *
 * @param $form_element
 *   form element.
 */
function moha_form_apply_inline_wrapper(&$form_element) {
  $form_element['#prefix'] = '<div class="container-inline">';
  $form_element['#suffix'] = '</div>';
}

/**
 * With of input on vertical tab is set to 100% in seven theme.
 * This function will apply inline style on input element directly.
 *
 * @param $form_element
 */
function moha_form_input_fix_on_vertical_tab(&$form_element) {
  global $theme_key;

  if ($theme_key == 'seven') {
    $form_element['#attributes']['style'] = 'width: inherit;';
  }
}

/**
 * Returns options array per vocabulary.
 *
 * @param string $vocabulary_name
 *
 * @return array
 */
function moha_form_options_from_vocabulary($vocabulary_name = '') {
  $options = array();

  if (empty(trim($vocabulary_name))) {
    return $options;
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);

  if (!empty($vocabulary) && !empty($vocabulary->vid)) {
    $terms = taxonomy_get_tree($vocabulary->vid);

    foreach ($terms as $term) {
      $options[$term->tid] = $term->name;
    }
  }

  return $options;
}

/**
 * Returns options array of entity types as form options.
 *
 * @param $excludes
 *   entity types which need be excluded from options.
 *
 * @return array
 */
function moha_form_options_from_entity($excludes) {

  if (!is_array($excludes)) {
    $excludes = array($excludes);
  }

  $entity_options = array();
  $entities = entity_get_info();

  foreach ($entities as $entity_name => $entity) {
    foreach ($excludes as $exclude) {
      if ($entity_name == $exclude) {
        continue 2;
      }
    }
    $entity_options[$entity_name] = $entity['label'];
  }

  return $entity_options;
}


/**
 * Turn admin data configuration form to draggable table.
 *   Weight row must have row-weight class:
 *
 * @example
 *   '#attributes' => array('class' => array('row-weight')),
 *
 * Suitable for:
 * - link configuration form.
 *
 * @throws Exception
 */
function theme_moha_admin_form_2_draggable_table($variables) {
  $element = $variables['form'];

  $header = array();
  $element_keys = element_children($element);

  if (empty($element_keys)){
    return theme('table', array(
      'header' => array(
        'content'=> 'No content available.',
      ),
      'attributes' => array('id' => $element['#id'] . '-draggable-table'),
    ));
  }

  $rows = array();

  foreach ($element_keys as $key) {
    $row = array();
    $row['data'] = array();
    $index = 0;
    foreach ($element[$key] as $field_name => $field_content) {
      $first = substr($field_name, 0, 1);
      if ($first == '#') {
        // Skip default form property.
        continue;
      }
      $header[$index++] = $field_name;
      $row['data'][] = drupal_render($field_content);
      $row['class'] = array('draggable');

    }
    $rows[] = $row;
  }

  // New row on fly http://drupal.stackexchange.com/questions/63126/adding-new-rows-on-a-draggable-table-via-jquery.
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $element['#id'] . '-draggable-table'),
  ));

  drupal_add_tabledrag($element['#id'] . '-draggable-table', 'order', 'sibling', 'row-weight');

  return $output;
}


/**
 * Eliminate empty record.
 *
 * @param array $values
 * @param array $condition_columns
 *
 * @return array
 */
function moha_draggable_table_data_trim_empty(&$values, $condition_columns = array('name')) {
  if (!is_array($values)) {
    return array();
  }

  $array_length = count($values);

  for ($i = 0; $i < $array_length; $i++) {
    $current = $values[$i];

    $unset_flag = FALSE;

    foreach ($condition_columns as $column) {
      if (empty($current[$column])) {
        $unset_flag = TRUE;
      }
    }

    if ($unset_flag) {
      unset($values[$i]);
    }
  }

  return $values;
}


/**
 * sort passed array per weight, then eliminate weight after storing.
 */
function moha_draggable_table_data_trim_weight(&$values) {
  uasort($values, 'drupal_sort_weight');
  $values = array_values($values);
  array_walk($values, 'moha_unset_weight');

  return $values;
}

/**
 * Recall weight element from an array.
 */
function moha_unset_weight(&$item) {
  if (isset($item['weight'])) {
    unset($item['weight']);
  }
}


function moha_draggable_table_data_prepare_for_saving(&$values) {
  $values = moha_draggable_table_data_trim_empty($values);
  $values = moha_draggable_table_data_trim_weight($values);
  return $values;
}

/**
 * Implements hook_init().
 */
function moha_init() {
  moha_preview_handle();
}

/**
 * Change current user per passed preview query parameter.
 */
function moha_preview_handle() {
  // Return anonymous page for preview.
  $params = drupal_get_query_parameters();
  if (isset($params['preview'])) {
    $uid = $params['preview'];

    if (user_access(MOHA__PERMISSION__SITE_PREVIEW) ||
      user_access(MOHA__PERMISSION__SITE_PREVIEW_ANONYMOUS)) {

      drupal_save_session(FALSE);
      global $user;
      $new_user = NULL;

      // If passed UID is invalid, or user doesn't exist, preview as anonymous.
      if (user_access(MOHA__PERMISSION__SITE_PREVIEW) && is_numeric($uid)) {

        if ($user->uid == $uid) { return; }
        $new_user = user_load($uid);
        if ($new_user) { $user = $new_user; }
      }

      if (empty($new_user)) {
        $user = user_load(0);
      }

      // Suppress fancy stuff like admin and admin_menu.module for the preview.
      module_invoke_all('suppress');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function moha_preprocess_html(&$variables) {

  /* Add meta tag, actual effect: <meta name="referrer" content="no-referrer" /> */
  $meta_description = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'referrer',
      'content' => "no-referrer",
    )
  );

  drupal_add_html_head($meta_description, 'no-referrer');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see hook_preprocess_HOOK
 */
function moha_preprocess_page(&$variables) {
  if (isset($variables['node']->type)) {
    // If the content type's machine name is "my_machine_name" the file
    // name will be "page--my-machine-name.tpl.php".
    $variables['theme_hook_suggestions'][] = 'page__' . $variables['node']->type;
  }
}

/**
 * Create new profile2 file type for user.
 *
 * @param string $profile2_name
 *   Profile2 name.
 */
function moha_create_profile2($profile2_name = MOHA) {
  $moha_profile = entity_create('profile2_type', array(
    'type' => moha_h2m($profile2_name),
    'label' => $profile2_name,
    'module' => moha_h2m($profile2_name),
    'data' => array(
      'registration' => FALSE,
      'use_page' => TRUE,
    ),
  ));

  /** @var $moha_profile Profile */
  $moha_profile->save();
}

/**
 * Creates taxonomies as passed array.
 *
 * @param $taxonomies array
 *   'name'
 *   'description'
 *   'machine_name'
 *   'terms'
 */
function moha_create_taxonomies($taxonomies = array()) {
  foreach ($taxonomies as $taxonomy) {
    // If not exists, create Taxonomy vocabulary.
    $vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy['machine_name']);

    if (empty($vocabulary)) {
      $vocabulary = (object)$taxonomy;
      taxonomy_vocabulary_save($vocabulary);
    }

    // Creates terms.
    foreach ($taxonomy['terms'] as $term_value) {
      $terms = taxonomy_get_term_by_name($term_value, $vocabulary->machine_name);

      if (empty($terms)){
        $term = new stdClass();

        $term->vid = $vocabulary->vid;
        $term->name = $term_value;

        taxonomy_term_save($term);
      }
    }
  }
}

/**
 * Returns tid by term name.
 *
 * @param $term_name
 *
 * @param $vocabulary_name
 *
 * @return bool
 */
function moha_tid_by_term_name($term_name, $vocabulary_name = NULL){
  $terms = taxonomy_get_term_by_name($term_name, $vocabulary_name);
  if (empty($terms)){
    return FALSE;
  }

  $term = array_shift($terms);
  return $term->tid;
}

/**
 * Returns term name by tid.
 *
 * @param $tid string
 *   taxonomy id.
 *
 * @return string
 *   taxonomy name.
 */
function moha_term_name_by_tid($tid) {
  $term = taxonomy_term_load($tid);
  if ($term) {
    $name = $term->name;
  }
  else {
    $name = '';
  }
  return $name;
}

/**
 * @param $node_type string
 *
 */
function moha_hide_node_comment($node_type){
  variable_set('comment_' . $node_type, COMMENT_NODE_HIDDEN);
}

/**
 * Get drupal variable which is stored in form of array.
 *
 * @param $variable_name
 * @param $key
 * @param $default string
 *
 * @return string
 */
function moha_array_variable_get($variable_name, $key, $default = "") {
  $values = variable_get($variable_name);

  if (empty($values[$key])) {
    return $default;
  }
  else {
    return $values[$key];
  }
}

/**
 * Set drupal variable which is stored in form of array.
 *
 * @param $variable_name
 *   Drupal variable name which is stored
 * @param $key
 *   Key name in array.
 * @param $value
 *   Value which will be set to $key.
 */
function moha_array_variable_set($variable_name, $key, $value = ""){
  $values = variable_get($variable_name);
  $values[$key] = $value;
  variable_set($variable_name, $values);
}

/**
 * Get drupal variable which is stored in variables array of MOHA.
 *
 * @param $key
 *   Variable key name in array.
 * @param $default mixed
 *   Default value if variable hasn't been set.
 *
 * @return mixed
 */
function moha_variable_get($key, $default = "") {
  return moha_array_variable_get(MOHA__VARIABLES, $key, $default);
}

/**
 * Set drupal variable which is stored in variables array of MOHA.
 *
 * @param $key
 *   Variable key name in array.
 * @param $value
 *   Value which will be set to $key.
 */
function moha_variable_set($key, $value = ""){
  moha_array_variable_set(MOHA__VARIABLES, $key, $value);
}

/**
 * Get cached data by ID.
 * Don't use to check a non request persistent variable.
 *
 * @param $cid string
 *   Cache ID.
 *
 * @param $default
 *   Default value.
 */
function moha_cache_get($cid, $default = FALSE) {
  $static = &drupal_static(__MOHA);
  if (!isset($static[$cid])) {
    if ($cache = cache_get($cid)) {
      $static[$cid] = $cache->data;
    }
    else {
      $static[$cid] = $default;
    }
  }

  return $static[$cid];
}

/**
 * Cache the data by ID.
 *
 * @param $cid string
 *   Cache ID.
 *
 * @param $value mixed
 *   Data which need be cached.
 *
 * @param $expire_in_seconds
 *   Number in unit of seconds, could be set as Cache constant as well.
 *
 * @see CACHE_PERMANENT
 * @see CACHE_TEMPORARY
 */
function moha_cache_set($cid, $value, $expire_in_seconds = CACHE_PERMANENT) {
  $static = &drupal_static(__MOHA);
  $static[$cid] = $value;
  if ($expire_in_seconds > 0) {
    $expire = time() + $expire_in_seconds;
  }
  else {
    $expire = $expire_in_seconds;
  }
  cache_set($cid, $value, 'cache', $expire);
}

/**
 * Returns block translated string.
 *
 * @param $variable_name
 * @param $module
 * @param $delta
 * @param $default
 *
 * @return mixed
 */
function moha_i18n_value($variable_name, $module, $delta, $default = '') {
  $value = variable_get($variable_name, $default);

  if (function_exists('i18n_string')) {
    $value = i18n_string('blocks:' . $module . ':' . $delta . ':' . $variable_name, $value, array(
      'format' => I18N_STRING_FILTER_XSS,
    ));
  }

  return $value;
}

/**
 * Stop request processing when unrecoverable or critical error occurs.
 *
 * @param $e \Exception
 *  Exception why processing need be ended up.
 *
 * @param $status_code int
 *  Customized http status code.
 */
function moha_response_error(Exception $e = NULL, $status_code = 503) {
  drupal_add_http_header('Status', $status_code . ' Service unavailable');

  if ($e != NULL) {
    print $e->getMessage();
  }

  drupal_exit();
}

/**
 * Checks suspend flag, if TRUE is assigned, through an exception.
 *
 * @param $suspend_variable_name
 *   if variable is true, throws exception.
 *
 * @param $default
 *   Default value is variable hasn't been set.
 *
 * @throws Exception
 *   if passed variable is set to TRUE.
 */
function moha_throw_exception_per_variable($suspend_variable_name, $default = FALSE) {
  // Can't use moha_cache_get as
  $exception = cache_get($suspend_variable_name, $default);

  if ($exception) {
    throw new Exception(__FUNCTION__ . " $suspend_variable_name is TRUE");
  }
}

/**
 * Shows error message when exception occurs for administrator.
 *
 * @param \Exception $e
 *   occurring exception.
 *
 * @param string $message_type
 *  (optional) The message's type. Defaults to 'error'.
 *  These values are supported:
 *    - 'status'
 *    - 'warning'
 *    - 'error'
 */
function moha_show_exception(Exception $e, $message_type = 'error') {
  drupal_set_message(t('Exception: %msg', array('%msg' => $e->getMessage())), $message_type);
}

/* Common functions. */
/**
 * Generates and returns nonce string
 *
 * @param int $length
 *
 * @return string
 */
function moha_nonce($length = 16) {

  // potential characters
  $chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

  $str = "";
  for ($i = 0; $i < $length; $i++) {
    $str .= $chars[mt_rand(0, strlen($chars) - 1)];
  }
  return $str;
}

/**
 * Convert NULL to empty string.
 *
 * @param $variable
 * @param $default string
 *  Default value when $variable is NULL.
 *
 * @return string
 */
function moha_n2e($variable, $default = '') {
  if (!empty($variable)) {
    return $variable;
  }
  else {
    return '';
  }
}

/**
 * Convert array NULL element to empty string.
 * If $default is specified, return $default.
 *
 * @param $array
 * @param $key
 * @param $default string
 *  Default value when element is NULL.
 *
 * @return string
 */
function moha_an2e($array, $key, $default = '') {
  if (!empty($array[$key])) {
    return $array[$key];
  }
  else {
    return $default;
  }
}

/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function moha_h2m($human_name) {

  $string_mapping = &drupal_static(__FUNCTION__);

  if(empty($string_mapping) || !isset($string_mapping[$human_name])){
    $machine_name = strtolower($human_name);
    $machine_name = preg_replace('@[^a-z0-9_]+@', '_', $machine_name);
    $string_mapping[$human_name] = $machine_name;
  }
  else {
    $machine_name = $string_mapping[$human_name];
  }

  return $machine_name;
}

/**
 * Returns array of status value -> literal label.
 *
 * @param $value
 *  if value is passed, return related key.
 *
 * @return mixed
 */
function moha_array_key_by_value($value = "", $array = array()) {

  if (trim($value) == "") {
    throw new InvalidArgumentException('$value is not specified.');
  }
  else {
    $key = array_search($value, $array);
    if ($key === false) {
      throw new InvalidArgumentException("$value is not contained in array.");
    }
    else {
      return $key;
    }
  }
}

/**
 * Capitalizes the first letter of a UTF-8 string.
 *
 * @param $text
 *
 * @return string
 */
function moha_ucfirst($text) {
  // Note: no mbstring equivalent!
  return drupal_strtoupper(drupal_substr($text, 0, 1)) . drupal_substr($text, 1);
}

/**
 * Convert to celsius degree.
 *
 * @param $degree
 *
 * @return int
 */
function moha_toCelsius($degree) {
  return ($degree - 32) * 5 / 9;
}

/**
 * Convert to fahrenheit degree.
 *
 * @param $degree
 *
 * @return int
 */
function moha_toFahrenheit($degree) {
  return $degree * 9 / 5 + 32;
}

// include /site/all/modules/custom/moha/ckeditor/moha.ckeditor.inc.
ctools_include('moha.ckeditor', __MOHA, 'ckeditor');
