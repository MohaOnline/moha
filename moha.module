<?php
/** Http request timeout, unit is second. */
define('MOHA__TIME_OUT__HTTP_REQUEST', '120');

/**
 * Human name.
 */
define('MOHA', 'Moha');

/**
 * Machine name.
 */
define('__MOHA', 'moha');

/**
 * moha__variables.
 */
define('MOHA__VARIABLES', __MOHA . '__variables');

/**
 * sites/all/modules/custom/moha
 */
define('MOHA__RELATIVE_PATH', drupal_get_path('module', __MOHA));

/**
 * /sites/all/modules/custom/moha
 */
define('MOHA__PATH', base_path() . MOHA__RELATIVE_PATH);

/**
 *
 *
 * @return array
 */
function _moha_admin_common_permissions() {
  $admin_common_permissions = array(
    'view the administration theme',
    'access administration menu',
    'access administration pages',
    'flush caches',
    'access toolbar',
    'administer menu',
    'administer blocks',
    'edit own page content',
    'edit any page content',
    'access content',
  );

  return $admin_common_permissions;
}

/**
 * Create necessary roles and permissions.
 */
function _moha_prepare_roles_and_permissions() {
  $manager_permission = array();

}

/**
 * Implements hook_image_default_styles().
 */
function moha_image_default_styles() {
  $styles = array();
  $styles['moha_feature'] = array(
    'label' => 'Moha Feature Image',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 720,
          'height' => '',
          'upscale' => 0,
          ),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_menu().
 */
function moha_menu() {
  $items["admin/moha"] = array(
    'title' => 'Moha',
    'description' => t('Moha enhancement system.'),
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -10,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Hide menu add link.
 */
function moha_menu_alter(&$items) {
  // Upgrade add menu link permission.
  $items['admin/structure/menu/manage/%menu/add']['access arguments'][0] = 'administer site configuration';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Mount configurations which need be passed to templates.js of CKEditor.
 * TODO: Should only mount when CKEditor enable.
 */
function moha_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Pass path of CKEditor templates icons from PHP to JS.
  drupal_add_js(array(
    __MOHA => array(
      'ckeditor_template_image_path' => MOHA__PATH . '/ckeditor/', // Usage: Drupal.settings.moha.ckeditor_template_image_path.
    )
  ), 'setting');

  return;
}


/**
 * Hide menu link edit & delete button.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function moha_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1 && !user_access('administer site configuration')) {
    foreach ($form as $key => $value) {
      if (strpos($key, "mlid") !== FALSE) {
        unset($form[$key]["operations"]["edit"]);
        unset($form[$key]["operations"]["delete"]);
      }
    }
  }
}

/**
 * Save node from ajax call.
 * don't call when create node.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function _moha_node_ajax_save_callback($form, &$form_state){

  // @See ajax_form_callback()
  // valid will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return $form;
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form;
}

/**
 * Silently save node with ajax call.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function _moha_node_ajax_silently_save_callback($form, &$form_state){

  // @See ajax_form_callback()
  // valid will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return ['changed'];
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form['changed'];
}

/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function moha_h2m($human_name) {

  $string_mapping = &drupal_static(__FUNCTION__);

  if(empty($string_mapping) || !isset($string_mapping[$human_name])){
    $machine_name = strtolower($human_name);
    $machine_name = preg_replace('@[^a-z0-9_]+@', '_', $machine_name);
    $string_mapping[$human_name] = $machine_name;
  }
  else {
    $machine_name = $string_mapping[$human_name];
  }

  return $machine_name;
}

/**
 * Grant permissions to specified role, if role doesn't exist, will be created first.
 *
 * @param string $role_name
 * @param array $permissions
 *  Permissions array.
 *
 * @return object $role
 */
function moha_grant_permissions_2_role_with_creation($role_name, $permissions = array()) {
  $role = user_role_load_by_name($role_name);

  if (!$role) {
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    $role = user_role_load_by_name($role_name);
  }

  // Passed permissions must be defined in certain module, filter out undefined permissions.
  // If permission <=> defined module map can't be fetched, no need to grant.
  $all_permissions = user_permission_get_modules();
  if (!empty($all_permissions) && is_array($permissions)) {
    foreach ($permissions as $key => $permission) {
      if (empty($all_permissions[$permission])) {
        unset($permissions[$key]);
      }
    }

    if (!empty($permissions)) {
      user_role_grant_permissions($role->rid, $permissions);
    }
  }

  return $role;
}

/**
 * Grant IMCE profile to specified role.
 *
 * @param string $role_name
 * @param int $profile_id
 */
function moha_grant_imce_profile_2_role($role_name, $profile_id = 0) {
  $roles_profiles = variable_get('imce_roles_profiles', array());

  $role = user_role_load_by_name($role_name);

  if ($role) {
    $roles_profiles[$role->rid] = array(
      'private_pid' => $profile_id,
      'public_pid' => $profile_id,
    );

    variable_set('imce_roles_profiles', $roles_profiles);
  }
}

/**
 * Implements hook_admin_paths().
 */
function moha_admin_paths() {
  $paths = array();

  /* Let imce use admin theme. */
  $paths['imce'] = TRUE;
  $paths['*/imce'] = TRUE;

  $paths['moha/*/add'] = TRUE;

  return $paths;
}

/**
 * Implements hook_preprocess().
 */
function moha_preprocess(&$variables, $hook) {

}

/**
 * Get tid from term name.
 *
 * @param $term_name
 * @param null $vocabulary
 *
 * @return bool
 */
function moha_get_tid_from_name($term_name, $vocabulary = NULL){
  $terms = taxonomy_get_term_by_name($term_name, $vocabulary);
  if (empty($terms)){
    return FALSE;
  }

  $term = array_shift($terms);
  return $term->tid;
}


/**
 * Create new profile2 file type for user.
 *
 * @param string $profile2_name
 *   Profile2 name.
 */
function _moha_create_profile2($profile2_name = MOHA) {
  $moha_profile = entity_create('profile2_type', array(
    'type' => moha_h2m($profile2_name),
    'label' => $profile2_name,
    'module' => moha_h2m($profile2_name),
    'data' => array(
      'registration' => FALSE,
      'use_page' => TRUE,
    ),
  ));
  $moha_profile->save();
}

/**
 * Create fields and instances per returned array by passed function.
 *
 * @param $get_fields_and_instances
 *   Function name which returns definition of fields and instances.
 *
 * @throws \FieldException
 */
function moha_create_fields_and_instances($get_fields_and_instances) {

  if (!function_exists($get_fields_and_instances)){
    throw new BadFunctionCallException($get_fields_and_instances . " doesn't exist.");
  }

  foreach ($get_fields_and_instances() as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }

    if (!field_info_instance($field['entity_type'], $field['field_name'], $field['bundle'])) {
      field_create_instance($field);
    }
  }
}

/**
 * @param $node_type string
 *
 */
function moha_hide_node_comment($node_type){

  variable_set('comment_' . $node_type, COMMENT_NODE_HIDDEN);
}

/**
 * Generates and returns nonce string
 *
 * @param int $length
 *
 * @return string
 */
function moha_nonce($length = 16) {

  // potential characters
  $chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

  $str = "";
  for ($i = 0; $i < $length; $i++) {
    $str .= $chars[mt_rand(0, strlen($chars) - 1)];
  }
  return $str;
}

/**
 * @param $w object
 *   Entity Wrapper which need be inspected.
 *
 * @return array
 *   key-value pairs of wrapper object.
 */
function moha_entity_wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * @param $status_array array
 * @param $status_value string
 *
 * @throws \InvalidArgumentException
 */
function moha_status_key($status_array = array(), $status_value) {
  return array_search($status_value, $status_array);
}

/**
 * Convert NULL to empty string.
 *
 * @param $variable
 * @param $default string
 *  Default value when $variable is NULL.
 *
 * @return string
 */
function moha_n2e($variable, $default = '') {
  if (!empty($variable)) {
    return $variable;
  }
  else {
    return '';
  }
}

/**
 * Convert array NULL element to empty string.
 * If $default is specified, return $default.
 *
 * @param $array
 * @param $key
 * @param $default string
 *  Default value when element is NULL.
 *
 * @return string
 */
function moha_an2e($array, $key, $default = '') {
  if (!empty($array[$key])) {
    return $array[$key];
  }
  else {
    return $default;
  }
}

/**
 * Set drupal variable which is inform of array.
 *
 * @param $variable_name
 *  Drupal variable name which is stored
 * @param $key
 *  Key name in array.
 * @param $value
 *  Value which will be set to $key.
 *
 */
function moha_array_variable_set($variable_name, $key, $value = ""){
  $values = variable_get($variable_name);
  $values[$key] = $value;
  variable_set($variable_name, $values);
}

/**
 * Get drupal variable which is inform of array.
 *
 * @param $variable_name
 * @param $key
 * @param $default string
 *
 * @return string
 */
function moha_array_variable_get($variable_name, $key, $default = "") {
  $values = variable_get($variable_name);

  if (empty($values[$key])) {
    return $default;
  }
  else {
    return $values[$key];
  }
}

/**
 * Return block translated string.
 *
 * @param $variable_name
 * @param
 * @param
 * @param
 */
function moha_i18n_value($variable_name, $module, $delta, $default = '') {
  $value = variable_get($variable_name, $default);

  if (function_exists('i18n_string')) {
    $value = i18n_string('blocks:' . $module . ':' . $delta . ':' . $variable_name, $value, array(
      'format' => I18N_STRING_FILTER_XSS,
    ));
  }

  return $value;
}

/**
 * Returns taxonomy name by tid.
 *
 * @param $tid string
 *   taxonomy id.
 */
function moha_taxonomy_name_by_id($tid) {
  $term = taxonomy_term_load($tid);
  if ($term) {
    $name = $term->name;
  }
  else {
    $name = '';
  }
  return $name;
}

// include /site/all/modules/custom/moha/ckeditor/moha.ckeditor.inc.
ctools_include('moha.ckeditor', __MOHA, 'ckeditor');
