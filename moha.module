<?php
/** Http request timeout, unit is second. */
define('MOHA__TIME_OUT__HTTP_REQUEST', '120');

/**
 * Human name.
 */
define('MOHA', 'Moha');

/**
 * Machine name.
 */
define('__MOHA', 'moha');

/**
 * moha__variables.
 */
define('MOHA__VARIABLES', __MOHA . '__variables');

/**
 * sites/all/modules/custom/moha
 */
define('MOHA__RELATIVE_PATH', drupal_get_path('module', __MOHA));

/**
 * /sites/all/modules/custom/moha
 */
define('MOHA__PATH', base_path() . MOHA__RELATIVE_PATH);

/**
 *
 *
 * @return array
 */
function _moha_admin_common_permissions() {
  $admin_common_permissions = array(
    'view the administration theme',
    'access administration menu',
    'access administration pages',
    'flush caches',
    'access toolbar',
    'administer menu',
    'administer blocks',
    'edit own page content',
    'edit any page content',
    'access content',
  );

  return $admin_common_permissions;
}

/**
 * Create necessary roles and permissions.
 */
function _moha_prepare_roles_and_permissions() {
  $manager_permission = array();

}

/**
 * Implements hook_image_default_styles().
 */
function moha_image_default_styles() {
  $styles = array();
  $styles['moha_feature'] = array(
    'label' => 'Moha Feature Image',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 720, 'height' => 405),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Mount configurations which need be passed to templates.js of CKEditor.
 * TODO: Should only mount when CKEditor enable.
 */
function moha_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Pass path of CKEditor templates icons from PHP to JS.
  drupal_add_js(array(
    __MOHA => array(
      'ckeditor_template_image_path' => MOHA__PATH . '/ckeditor/', // Usage: Drupal.settings.moha.ckeditor_template_image_path.
    )
  ), 'setting');

  return;
}



/**
 * Save node from ajax call.
 * don't call when create node.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function _moha_node_ajax_save_callback($form, &$form_state){

  // @See ajax_form_callback()
  // valid will be proceed
  // If error, directly returns.
  if (form_get_errors()) {
    return $form;
  }

  /*
   * As ajax button doesn't have #submit function, so
   * form_execute_handlers('submit', $form, $form_state);
   * will not be invoked, node submit function need be manually executed
   */
  node_form_submit($form, $form_state);
  // need write update time back to form to avoid node was changed by others issue.
  $form['changed']['#value'] = $form_state['node']->changed;

  return $form;
}

/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function moha_h2m($human_name) {

  $string_mapping = &drupal_static(__FUNCTION__);

  if(empty($string_mapping) || !isset($string_mapping[$human_name])){
    $machine_name = strtolower($human_name);
    $machine_name = preg_replace('@[^a-z0-9_]+@', '_', $machine_name);
    $string_mapping[$human_name] = $machine_name;
  }
  else {
    $machine_name = $string_mapping[$human_name];
  }

  return $machine_name;
}

/**
 * Grant permissions to specified role, if role doesn't exist, it will be created.
 *
 * @param string $role_name
 * @param array $permissions
 *
 * @return object $role
 */
function moha_grant_permissions_2_role($role_name, $permissions = array()) {
  $role = user_role_load_by_name($role_name);

  if (!$role) {
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
    $role = user_role_load_by_name($role_name);
  }

  $all_permissions = user_permission_get_modules();

  if (!empty($all_permissions) && is_array($permissions)) {
    foreach ($permissions as $key => $permission) {
      if (empty($all_permissions[$permission])) {
        unset($permissions[$key]);
      }
    }

    if (!empty($permissions)) {
      user_role_grant_permissions($role->rid, $permissions);
    }
  }

  return $role;
}

/**
 * Grant IMCE profile to specified role.
 *
 * @param string $role_name
 * @param int $profile_id
 */
function moha_grant_imce_profile_2_role($role_name, $profile_id = 0) {
  $roles_profiles = variable_get('imce_roles_profiles', array());

  $role = user_role_load_by_name($role_name);

  if ($role) {
    $roles_profiles[$role->rid] = array(
      'private_pid' => $profile_id,
      'public_pid' => $profile_id,
    );

    variable_set('imce_roles_profiles', $roles_profiles);
  }
}

/**
 * Implements hook_admin_paths().
 */
function moha_admin_paths() {
  $paths = array();

  /* Let imce use admin theme. */
  $paths['imce'] = TRUE;
  $paths['*/imce'] = TRUE;

  $paths['moha/*/add'] = TRUE;

  return $paths;
}

// include /site/all/modules/custom/moha/ckeditor/moha.ckeditor.inc.
ctools_include('moha.ckeditor', __MOHA, 'ckeditor');
